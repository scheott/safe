{"version":3,"file":"content.js","mappingssources":["webpack://safesignal-extension/./src/content/content.js"],"sourcesContent":["class SafeSignalBadgePositioning {\r\n    constructor(shadowRoot) {\r\n        this.shadowRoot = shadowRoot;\r\n        this.SAFE_MARGIN = 16;\r\n        this.topLayerContainer = null;\r\n        this.menuPortaled = false;\r\n    }\r\n\r\n    // Create top-layer container for menu to escape clipping\r\n    createTopLayerContainer() {\r\n        if (this.topLayerContainer) return this.topLayerContainer;\r\n        \r\n        this.topLayerContainer = document.createElement('div');\r\n        this.topLayerContainer.id = 'safesignal-menu-portal';\r\n        this.topLayerContainer.style.cssText = `\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            z-index: 2147483647;\r\n            pointer-events: none;\r\n            width: 100vw;\r\n            height: 100vh;\r\n        `;\r\n        \r\n        // Append to documentElement to escape any body transforms\r\n        document.documentElement.appendChild(this.topLayerContainer);\r\n        return this.topLayerContainer;\r\n    }\r\n\r\n    // Portal menu to top layer when opening\r\n    portalMenuToTopLayer(menu, badgeRect) {\r\n        if (this.menuPortaled) return;\r\n        \r\n        const container = this.createTopLayerContainer();\r\n        \r\n        // Clone menu styles but make it portaled\r\n        const portaledMenu = menu.cloneNode(true);\r\n        portaledMenu.style.cssText = `\r\n            position: fixed;\r\n            pointer-events: auto;\r\n            z-index: 1;\r\n        `;\r\n        \r\n        // Hide original menu, show portaled version\r\n        menu.style.display = 'none';\r\n        container.appendChild(portaledMenu);\r\n        \r\n        this.menuPortaled = true;\r\n        return portaledMenu;\r\n    }\r\n\r\n    // Calculate smart menu placement\r\n    calculateMenuPlacement(badgeRect, menuRect) {\r\n        const vw = window.innerWidth;\r\n        const vh = window.innerHeight;\r\n        const margin = this.SAFE_MARGIN;\r\n        \r\n        let placement = {\r\n            x: badgeRect.right,\r\n            y: badgeRect.bottom,\r\n            anchorX: 'right',\r\n            anchorY: 'below',\r\n            classes: []\r\n        };\r\n        \r\n        // Vertical placement - flip if would overflow bottom\r\n        if (badgeRect.bottom + menuRect.height > vh - margin) {\r\n            placement.y = badgeRect.top - menuRect.height;\r\n            placement.anchorY = 'above';\r\n            placement.classes.push('menu--above');\r\n        }\r\n        \r\n        // Horizontal placement - flip if would overflow right\r\n        if (badgeRect.right + menuRect.width > vw - margin) {\r\n            placement.x = badgeRect.left - menuRect.width;\r\n            placement.anchorX = 'left';\r\n            placement.classes.push('menu--left');\r\n        }\r\n        \r\n        // Ensure within safe bounds\r\n        placement.x = Math.max(margin, Math.min(placement.x, vw - menuRect.width - margin));\r\n        placement.y = Math.max(margin, Math.min(placement.y, vh - menuRect.height - margin));\r\n        \r\n        return placement;\r\n    }\r\n\r\n    // Smart status bubble placement\r\n    calculateStatusPlacement(badgeRect, statusRect) {\r\n        const vw = window.innerWidth;\r\n        const vh = window.innerHeight;\r\n        const margin = this.SAFE_MARGIN;\r\n        \r\n        let placement = {\r\n            x: badgeRect.left + (badgeRect.width - statusRect.width) / 2,\r\n            y: badgeRect.bottom + 8,\r\n            anchorY: 'below',\r\n            classes: []\r\n        };\r\n        \r\n        // Flip above if badge is in bottom 40% of screen\r\n        if (badgeRect.bottom > vh * 0.6) {\r\n            placement.y = badgeRect.top - statusRect.height - 8;\r\n            placement.anchorY = 'above';\r\n            placement.classes.push('status--above');\r\n        }\r\n        \r\n        // Horizontal centering with edge protection\r\n        if (placement.x < margin) {\r\n            placement.x = margin;\r\n            placement.classes.push('status--left-aligned');\r\n        } else if (placement.x + statusRect.width > vw - margin) {\r\n            placement.x = vw - statusRect.width - margin;\r\n            placement.classes.push('status--right-aligned');\r\n        }\r\n        \r\n        return placement;\r\n    }\r\n\r\n    // Apply menu positioning\r\n    applyMenuPosition(menu, badgeRect) {\r\n        // Get menu dimensions\r\n        menu.style.opacity = '0';\r\n        menu.style.pointerEvents = 'none';\r\n        menu.classList.add('measuring');\r\n        \r\n        const menuRect = menu.getBoundingClientRect();\r\n        const placement = this.calculateMenuPlacement(badgeRect, menuRect);\r\n        \r\n        // Portal to top layer if needed for clipping escape\r\n        const portaledMenu = this.shouldPortal() ? \r\n            this.portalMenuToTopLayer(menu, badgeRect) : menu;\r\n        \r\n        // Apply positioning\r\n        portaledMenu.style.left = `${placement.x}px`;\r\n        portaledMenu.style.top = `${placement.y}px`;\r\n        portaledMenu.style.maxHeight = `calc(100vh - ${this.SAFE_MARGIN * 2}px)`;\r\n        portaledMenu.style.overflowY = 'auto';\r\n        \r\n        // Apply placement classes\r\n        portaledMenu.classList.remove('measuring');\r\n        placement.classes.forEach(cls => portaledMenu.classList.add(cls));\r\n        \r\n        // Show menu\r\n        portaledMenu.style.opacity = '';\r\n        portaledMenu.style.pointerEvents = '';\r\n        \r\n        return portaledMenu;\r\n    }\r\n\r\n    // Check if we need to portal (body has transforms)\r\n    shouldPortal() {\r\n        const bodyStyle = getComputedStyle(document.body);\r\n        return bodyStyle.transform !== 'none' || \r\n               bodyStyle.overflow !== 'visible' ||\r\n               bodyStyle.position === 'fixed';\r\n    }\r\n\r\n    // Update status bubble smart positioning\r\n    updateStatusBubblePosition() {\r\n        const badge = this.shadowRoot?.querySelector('.badge');\r\n        const statusEl = this.shadowRoot?.querySelector('.badge-status');\r\n        \r\n        if (!badge || !statusEl) return;\r\n        \r\n        this.positioning.updateStatusBubblePosition(badge, statusEl);\r\n    }\r\n\r\n    // Enhanced viewport guards\r\n    addViewportGuards() {\r\n        // Add responsive styles to prevent cut-off\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            .safesignal-badge .badge-menu {\r\n                max-height: calc(100vh - 32px);\r\n                overflow-y: auto;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            .safesignal-badge .badge-status {\r\n                max-width: min(280px, calc(100vw - 32px));\r\n                word-wrap: break-word;\r\n                white-space: normal;\r\n                box-sizing: border-box;\r\n            }\r\n            \r\n            .safesignal-badge .menu--above {\r\n                transform-origin: bottom center;\r\n            }\r\n            \r\n            .safesignal-badge .menu--left {\r\n                transform-origin: top right;\r\n            }\r\n            \r\n            .safesignal-badge .status--above .badge-status {\r\n                bottom: 100%;\r\n                top: auto;\r\n                margin-bottom: 8px;\r\n                margin-top: 0;\r\n            }\r\n            \r\n            .safesignal-badge .status--left-aligned .badge-status {\r\n                left: 0;\r\n                transform: none;\r\n            }\r\n            \r\n            .safesignal-badge .status--right-aligned .badge-status {\r\n                right: 0;\r\n                left: auto;\r\n                transform: none;\r\n            }\r\n        `;\r\n        \r\n        this.shadowRoot.appendChild(style);\r\n    }\r\n\r\n    // Cleanup portaled elements\r\n    cleanup() {\r\n        if (this.topLayerContainer && this.topLayerContainer.parentNode) {\r\n            this.topLayerContainer.parentNode.removeChild(this.topLayerContainer);\r\n        }\r\n        this.topLayerContainer = null;\r\n        this.menuPortaled = false;\r\n    }\r\n}\r\n\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        this.shadowRoot = null;\r\n        this.badgeContainer = null;\r\n        this.currentState = 'checking';\r\n        this.isVisible = true;\r\n        \r\n        // Enhanced positioning system\r\n        this.positioning = {\r\n            anchor: 'bottom-right',\r\n            offsetX: 0,\r\n            offsetY: 0\r\n        };\r\n        \r\n        // SPA Detection properties (simplified)\r\n        this.currentUrl = window.location.href;\r\n        this.currentSignature = null;\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.lastCheck = 0;\r\n        this.checkCooldown = 30 * 60 * 1000; // 30 minutes\r\n        this.cleanupHandlers = [];\r\n        \r\n        // UI state\r\n        this.isMenuOpen = false;\r\n        this.proximityCheckInterval = null; // Track the interval\r\n        this.userPreferences = {\r\n            positioning: { anchor: 'bottom-right', offsetX: 0, offsetY: 0 },\r\n            hiddenSites: new Set()\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        if (this.shouldSkipInjection()) {\r\n            return;\r\n        }\r\n\r\n        await this.loadUserPreferences();\r\n        \r\n        if (this.isSiteHidden()) {\r\n            console.log('SafeSignal: Badge hidden on this site per user preference');\r\n            return;\r\n        }\r\n\r\n        this.createShadowDOMBadge();\r\n        this.attachEventListeners();\r\n        this.setupSPADetection();\r\n        \r\n        // Apply saved positioning\r\n        this.applyPositioning(this.userPreferences.positioning);\r\n        \r\n        this.checkIfPageChanged('initial_load');\r\n        \r\n        console.log('SafeSignal: Enhanced badge active (simplified)');\r\n    }\r\n\r\n    shouldSkipInjection() {\r\n        const protocol = window.location.protocol;\r\n        \r\n        if (protocol === 'chrome:' || \r\n            protocol === 'chrome-extension:' ||\r\n            protocol === 'moz-extension:' ||\r\n            protocol === 'about:') {\r\n            return true;\r\n        }\r\n        \r\n        if (window.top !== window) {\r\n            console.log('SafeSignal: Skipping injection in embedded frame');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    // === UTILITY METHODS ===\r\n    \r\n    getOriginKey() {\r\n        return `${window.location.protocol}//${window.location.host}`;\r\n    }\r\n\r\n    // === ENHANCED POSITIONING SYSTEM ===\r\n    \r\n    getBadgeRect() {\r\n        const el = this.shadowRoot?.querySelector('.badge');\r\n        return el ? el.getBoundingClientRect() : { width: 48, height: 48, left: 0, top: 0 };\r\n    }\r\n    \r\n    getAnchorPositions() {\r\n        const padding = 20; // Increased for better safe margins\r\n        const systemBarHeight = 100; // More conservative for mobile\r\n        const viewportWidth = window.innerWidth;\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        return {\r\n            'top-left': { x: padding, y: padding },\r\n            'top-right': { x: viewportWidth - padding, y: padding },\r\n            'mid-left': { x: padding, y: viewportHeight / 2 },\r\n            'mid-right': { x: viewportWidth - padding, y: viewportHeight / 2 },\r\n            'bottom-left': { x: padding, y: viewportHeight - systemBarHeight },\r\n            'bottom-right': { x: viewportWidth - padding, y: viewportHeight - systemBarHeight }\r\n        };\r\n    }\r\n\r\n    applyPositioning(positioning) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const { anchor, offsetX = 0, offsetY = 0 } = positioning;\r\n        const anchorPositions = this.getAnchorPositions();\r\n        const anchorPos = anchorPositions[anchor] || anchorPositions['bottom-right'];\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const { width: badgeW, height: badgeH } = this.getBadgeRect();\r\n        \r\n        // Calculate final position\r\n        let finalX = anchorPos.x + offsetX;\r\n        let finalY = anchorPos.y + offsetY;\r\n        \r\n        // Adjust for badge size based on anchor\r\n        if (anchor.includes('right')) finalX -= badgeW;\r\n        if (anchor.includes('bottom')) finalY -= badgeH;\r\n        if (anchor.includes('mid')) {\r\n            if (anchor.includes('left') || anchor.includes('right')) {\r\n                finalY -= badgeH / 2;\r\n            }\r\n        }\r\n        \r\n        // Apply safe bounds with more margin\r\n        finalX = Math.max(16, Math.min(finalX, window.innerWidth - badgeW - 16));\r\n        finalY = Math.max(16, Math.min(finalY, window.innerHeight - badgeH - 16));\r\n        \r\n        // Apply position\r\n        badge.style.position = 'fixed';\r\n        badge.style.left = `${finalX}px`;\r\n        badge.style.top = `${finalY}px`;\r\n        badge.style.right = 'auto';\r\n        badge.style.bottom = 'auto';\r\n        \r\n        // Update internal state\r\n        this.positioning = { anchor, offsetX, offsetY };\r\n        \r\n        // Update active state in UI\r\n        this.updatePositionGridUI(anchor);\r\n        \r\n        console.log('SafeSignal: Applied positioning:', { anchor, offsetX, offsetY, finalX, finalY });\r\n    }\r\n\r\n    updatePositionGridUI(activeAnchor) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const positionOptions = this.shadowRoot.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.classList.remove('active');\r\n            if (option.dataset.position === activeAnchor) {\r\n                option.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    // === STORAGE & PREFERENCES ===\r\n\r\n    async loadUserPreferences() {\r\n        try {\r\n            if (!chrome?.storage?.sync) {\r\n                console.warn('SafeSignal: Chrome storage not available, using defaults');\r\n                return;\r\n            }\r\n            \r\n            const result = await chrome.storage.sync.get([\r\n                'safesignal_positioning',\r\n                'safesignal_hidden_sites',\r\n                'safesignal_positions' // Legacy key for migration\r\n            ]);\r\n            \r\n            const origin = this.getOriginKey();\r\n            \r\n            // Migrate old key if present\r\n            if (!result.safesignal_positioning?.[origin] && result.safesignal_positions?.[origin]) {\r\n                const anchor = result.safesignal_positions[origin];\r\n                const newPositioning = { \r\n                    ...(result.safesignal_positioning || {}), \r\n                    [origin]: { anchor, offsetX: 0, offsetY: 0 } \r\n                };\r\n                await chrome.storage.sync.set({ \r\n                    safesignal_positioning: newPositioning\r\n                });\r\n                console.log('SafeSignal: Migrated legacy position data for', origin);\r\n            }\r\n            \r\n            const positioningData = result.safesignal_positioning || {};\r\n            const hiddenSites = result.safesignal_hidden_sites || [];\r\n            \r\n            this.userPreferences.positioning = positioningData[origin] || \r\n                { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n            this.userPreferences.hiddenSites = new Set(hiddenSites);\r\n            \r\n            console.log('SafeSignal: Loaded preferences:', this.userPreferences);\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not load preferences:', e);\r\n        }\r\n    }\r\n\r\n    async savePositioningPreference(positioning) {\r\n        try {\r\n            if (!chrome?.storage?.sync) {\r\n                console.warn('SafeSignal: Chrome storage not available');\r\n                return;\r\n            }\r\n            \r\n            const result = await chrome.storage.sync.get(['safesignal_positioning']);\r\n            const positioningData = result.safesignal_positioning || {};\r\n            \r\n            const origin = this.getOriginKey();\r\n            positioningData[origin] = positioning;\r\n            \r\n            await chrome.storage.sync.set({\r\n                safesignal_positioning: positioningData\r\n            });\r\n            \r\n            this.userPreferences.positioning = positioning;\r\n            console.log('SafeSignal: Saved positioning preference:', positioning, 'for', origin);\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not save positioning preference:', e);\r\n        }\r\n    }\r\n\r\n    async toggleSiteVisibility() {\r\n        try {\r\n            if (!chrome?.storage?.sync) {\r\n                console.warn('SafeSignal: Chrome storage not available');\r\n                return;\r\n            }\r\n            \r\n            const origin = this.getOriginKey();\r\n            const result = await chrome.storage.sync.get(['safesignal_hidden_sites']);\r\n            const hiddenSites = new Set(result.safesignal_hidden_sites || []);\r\n            \r\n            if (hiddenSites.has(origin)) {\r\n                hiddenSites.delete(origin);\r\n                await chrome.storage.sync.set({\r\n                    safesignal_hidden_sites: Array.from(hiddenSites)\r\n                });\r\n                \r\n                console.log('SafeSignal: Unhidden site:', origin);\r\n                this.show();\r\n            } else {\r\n                hiddenSites.add(origin);\r\n                await chrome.storage.sync.set({\r\n                    safesignal_hidden_sites: Array.from(hiddenSites)\r\n                });\r\n                \r\n                console.log('SafeSignal: Hidden site:', origin);\r\n                this.hide();\r\n                setTimeout(() => this.destroy(), 100);\r\n            }\r\n            \r\n            this.userPreferences.hiddenSites = hiddenSites;\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not toggle site visibility:', e);\r\n        }\r\n    }\r\n\r\n    isSiteHidden() {\r\n        const origin = this.getOriginKey();\r\n        return this.userPreferences.hiddenSites.has(origin);\r\n    }\r\n\r\n    // === BADGE CREATION ===\r\n\r\n    createShadowDOMBadge() {\r\n        this.badgeContainer = document.createElement('div');\r\n        this.badgeContainer.id = 'safesignal-badge-container';\r\n        // Use open mode for dev/debugging - change to 'closed' for production\r\n        this.shadowRoot = this.badgeContainer.attachShadow({ mode: 'open' });\r\n        \r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    all: initial;\r\n                }\r\n                \r\n                .badge {\r\n                    position: fixed;\r\n                    width: 3rem;\r\n                    height: 3rem;\r\n                    border-radius: 50%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\r\n                    font-size: 1.25rem;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    user-select: none;\r\n                    z-index: 999999; /* Reduced from 2147483647 */\r\n                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n                    transition: all 0.2s ease;\r\n                    transform: scale(1);\r\n                    /* Removed backdrop-filter for lighter feel */\r\n                    touch-action: manipulation; /* Better for touch, allows page pan */\r\n                }\r\n                \r\n                @media (prefers-reduced-motion: reduce) {\r\n                    .badge {\r\n                        transition: none;\r\n                        animation: none !important;\r\n                    }\r\n                }\r\n                \r\n                .badge-status {\r\n                    position: absolute;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    background: rgba(0, 0, 0, 0.9);\r\n                    color: white;\r\n                    padding: 8px 12px;\r\n                    border-radius: 8px;\r\n                    font-size: 0.75rem;\r\n                    white-space: nowrap;\r\n                    pointer-events: none;\r\n                    opacity: 0;\r\n                    transition: opacity 0.2s ease;\r\n                    z-index: 1000000;\r\n                    max-width: 200px;\r\n                    word-wrap: break-word;\r\n                    white-space: normal;\r\n                    text-align: center;\r\n                    line-height: 1.2;\r\n                }\r\n                \r\n                /* Smart status positioning - above if at bottom, below if at top */\r\n                .badge.bottom-positioned .badge-status {\r\n                    bottom: 100%;\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                .badge.top-positioned .badge-status {\r\n                    top: 100%;\r\n                    margin-top: 8px;\r\n                }\r\n                \r\n                .badge.show-status .badge-status {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .menu-button {\r\n                    position: absolute;\r\n                    top: -8px;\r\n                    right: -8px;\r\n                    width: 20px;\r\n                    height: 20px;\r\n                    border-radius: 50%;\r\n                    background: rgba(0, 0, 0, 0.7);\r\n                    color: white;\r\n                    border: none;\r\n                    font-size: 12px;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    opacity: 0;\r\n                    transition: opacity 0.2s ease;\r\n                    z-index: 1000001;\r\n                }\r\n                \r\n                .badge:hover .menu-button,\r\n                .badge:focus .menu-button {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .menu-button:hover {\r\n                    background: rgba(0, 0, 0, 0.9);\r\n                    transform: scale(1.1);\r\n                }\r\n                \r\n                .badge-menu {\r\n                    position: absolute;\r\n                    top: 100%;\r\n                    right: 0;\r\n                    background: white;\r\n                    border-radius: 12px;\r\n                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15), 0 4px 16px rgba(0, 0, 0, 0.1);\r\n                    padding: 12px;\r\n                    min-width: 220px;\r\n                    opacity: 0;\r\n                    transform: translateY(-10px) scale(0.95);\r\n                    pointer-events: none;\r\n                    transition: all 0.2s ease;\r\n                    z-index: 1000002;\r\n                    border: 1px solid rgba(0, 0, 0, 0.08);\r\n                }\r\n                \r\n                .badge-menu.open {\r\n                    opacity: 1;\r\n                    transform: translateY(0) scale(1);\r\n                    pointer-events: auto;\r\n                }\r\n                \r\n                .menu-section {\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .menu-section:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n                \r\n                .menu-label {\r\n                    font-size: 0.75rem;\r\n                    font-weight: 600;\r\n                    color: #6b7280;\r\n                    margin-bottom: 8px;\r\n                    text-transform: uppercase;\r\n                    letter-spacing: 0.05em;\r\n                }\r\n                \r\n                .position-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr);\r\n                    gap: 6px;\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .position-option {\r\n                    width: 36px;\r\n                    height: 36px;\r\n                    border: 2px solid #e5e7eb;\r\n                    border-radius: 8px;\r\n                    background: #f9fafb;\r\n                    cursor: pointer;\r\n                    position: relative;\r\n                    transition: all 0.15s ease;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n                \r\n                .position-option:hover {\r\n                    border-color: #3b82f6;\r\n                    background: #eff6ff;\r\n                    transform: scale(1.05);\r\n                }\r\n                \r\n                .position-option.active {\r\n                    border-color: #3b82f6;\r\n                    background: #3b82f6;\r\n                }\r\n                \r\n                .position-option::after {\r\n                    content: '';\r\n                    position: absolute;\r\n                    width: 8px;\r\n                    height: 8px;\r\n                    background: #6b7280;\r\n                    border-radius: 50%;\r\n                    transition: background 0.15s ease;\r\n                }\r\n                \r\n                .position-option.active::after {\r\n                    background: white;\r\n                }\r\n                \r\n                .position-option[data-position=\"top-left\"]::after {\r\n                    top: 6px;\r\n                    left: 6px;\r\n                }\r\n                \r\n                .position-option[data-position=\"top-right\"]::after {\r\n                    top: 6px;\r\n                    right: 6px;\r\n                }\r\n                \r\n                .position-option[data-position=\"mid-left\"]::after {\r\n                    top: 50%;\r\n                    left: 6px;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-option[data-position=\"mid-right\"]::after {\r\n                    top: 50%;\r\n                    right: 6px;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-option[data-position=\"bottom-left\"]::after {\r\n                    bottom: 6px;\r\n                    left: 6px;\r\n                }\r\n                \r\n                .position-option[data-position=\"bottom-right\"]::after {\r\n                    bottom: 6px;\r\n                    right: 6px;\r\n                }\r\n                \r\n                .menu-item {\r\n                    width: 100%;\r\n                    padding: 10px 14px;\r\n                    border: none;\r\n                    background: #f9fafb;\r\n                    color: #374151;\r\n                    font-size: 0.875rem;\r\n                    border-radius: 8px;\r\n                    cursor: pointer;\r\n                    transition: all 0.15s ease;\r\n                    text-align: left;\r\n                    font-family: inherit;\r\n                }\r\n                \r\n                .menu-item:hover {\r\n                    background: #f3f4f6;\r\n                    color: #111827;\r\n                    transform: translateY(-1px);\r\n                }\r\n                \r\n                .menu-item.danger {\r\n                    color: #dc2626;\r\n                }\r\n                \r\n                .menu-item.danger:hover {\r\n                    background: #fef2f2;\r\n                    color: #991b1b;\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.05);\r\n                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2), 0 2px 8px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .badge:active {\r\n                    transform: scale(0.95);\r\n                }\r\n                \r\n                .badge.checking {\r\n                    background: linear-gradient(135deg, #6b7280 0%, #9ca3af 100%);\r\n                    color: white;\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                \r\n                .badge.ok {\r\n                    background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.warning {\r\n                    background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.danger {\r\n                    background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; }\r\n                    50% { opacity: 0.7; }\r\n                }\r\n                \r\n                .badge:focus {\r\n                    outline: 3px solid #3b82f6;\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .badge.hidden {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            \r\n            <div class=\"badge checking\" \r\n                 role=\"button\" \r\n                 tabindex=\"0\"\r\n                 aria-label=\"SafeSignal security indicator\"\r\n                 aria-live=\"polite\"\r\n                 title=\"SafeSignal - Checking page safety\">\r\n                <span class=\"badge-icon\">S</span>\r\n                <div class=\"badge-status\" role=\"status\" aria-live=\"polite\">Checking...</div>\r\n                \r\n                <button class=\"menu-button\" \r\n                        type=\"button\"\r\n                        title=\"Badge options\"\r\n                        aria-label=\"Open badge options menu\"\r\n                        aria-expanded=\"false\">⋯</button>\r\n                \r\n                <div class=\"badge-menu\" role=\"menu\" aria-label=\"Badge options\">\r\n                    <div class=\"menu-section\">\r\n                        <div class=\"menu-label\">Position</div>\r\n                        <div class=\"position-grid\" role=\"group\" aria-label=\"Badge position options\">\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"top-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Top Left\"\r\n                                    aria-label=\"Move badge to top left\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"top-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Top Right\"\r\n                                    aria-label=\"Move badge to top right\"></button>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"mid-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Middle Left\"\r\n                                    aria-label=\"Move badge to middle left\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"mid-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Middle Right\"\r\n                                    aria-label=\"Move badge to middle right\"></button>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"bottom-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Bottom Left\"\r\n                                    aria-label=\"Move badge to bottom left\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option active\" \r\n                                    data-position=\"bottom-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Bottom Right\"\r\n                                    aria-label=\"Move badge to bottom right\"></button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"menu-section\">\r\n                        <button class=\"menu-item danger\" \r\n                                type=\"button\"\r\n                                role=\"menuitem\"\r\n                                data-action=\"hide-site\">Hide on this site</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(this.badgeContainer);\r\n    }\r\n\r\n    attachEventListeners() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        \r\n        // Badge interactions\r\n        badge.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            if (!this.isMenuOpen) {\r\n                this.handleBadgeClick();\r\n            }\r\n        });\r\n        \r\n        // Keyboard navigation\r\n        badge.addEventListener('keydown', (e) => {\r\n            this.handleKeyboardNavigation(e);\r\n        });\r\n        \r\n        // Menu button\r\n        menuButton.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.toggleMenu();\r\n        });\r\n        \r\n        // Position options\r\n        const positionOptions = this.shadowRoot.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n                const anchor = option.dataset.position;\r\n                this.handlePositionSelect(anchor);\r\n            });\r\n        });\r\n        \r\n        // Menu actions\r\n        const hideSiteButton = this.shadowRoot.querySelector('[data-action=\"hide-site\"]');\r\n        hideSiteButton.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleSiteVisibility();\r\n        });\r\n        \r\n        // Close menu when clicking outside\r\n        document.addEventListener('click', () => {\r\n            this.closeMenu();\r\n        });\r\n        \r\n        // Prevent menu clicks from closing menu\r\n        menu.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n        });\r\n        \r\n        // Window resize handler with throttling\r\n        let resizeRaf = null;\r\n        const onResize = () => {\r\n            if (resizeRaf) return;\r\n            resizeRaf = requestAnimationFrame(() => {\r\n                resizeRaf = null;\r\n                this.applyPositioning(this.positioning);\r\n                this.updateStatusBubblePosition(); // Check if we need to flip status bubble\r\n            });\r\n        };\r\n        window.addEventListener('resize', onResize);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('resize', onResize));\r\n        \r\n        // Input proximity detection with proper cleanup tracking\r\n        this.proximityCheckInterval = setInterval(() => {\r\n            this.checkInputProximity();\r\n        }, 2000); // Reduced frequency\r\n        this.cleanupHandlers.push(() => clearInterval(this.proximityCheckInterval));\r\n    }\r\n\r\n    checkInputProximity() {\r\n        if (!this.shadowRoot || this.isMenuOpen) return;\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const rect = badge.getBoundingClientRect();\r\n        \r\n        // Check if badge overlaps with any input elements\r\n        const elementsNearby = document.elementsFromPoint(\r\n            rect.left + rect.width / 2,\r\n            rect.top + rect.height / 2\r\n        );\r\n        \r\n        const nearInput = elementsNearby.some(el => {\r\n            return el.tagName === 'INPUT' || \r\n                   el.tagName === 'TEXTAREA' || \r\n                   el.isContentEditable;\r\n        });\r\n        \r\n        // For now, just log this - in the future could show hint in menu\r\n        if (nearInput) {\r\n            console.log('SafeSignal: Badge near input field');\r\n        }\r\n    }\r\n\r\n    updateStatusBubblePosition() {\r\n        const badge = this.shadowRoot?.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const rect = badge.getBoundingClientRect();\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        // Remove existing positioning classes\r\n        badge.classList.remove('bottom-positioned', 'top-positioned');\r\n        \r\n        // If badge is in bottom half of screen, show status above\r\n        if (rect.bottom > viewportHeight * 0.6) {\r\n            badge.classList.add('bottom-positioned');\r\n        } else {\r\n            badge.classList.add('top-positioned');\r\n        }\r\n    }\r\n\r\n    handleBadgeClick() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        const stateMessages = {\r\n            checking: 'Analyzing page...',\r\n            ok: 'Page appears safe ✅',\r\n            warning: 'Exercise caution ⚠️',\r\n            danger: 'Risk signals detected ❌'\r\n        };\r\n        \r\n        const message = stateMessages[this.currentState] || 'SafeSignal active';\r\n        statusEl.textContent = message;\r\n        \r\n        // Update status bubble position before showing\r\n        this.updateStatusBubblePosition();\r\n        \r\n        badge.classList.add('show-status');\r\n        \r\n        setTimeout(() => {\r\n            badge.classList.remove('show-status');\r\n        }, 3000);\r\n        \r\n        console.log('SafeSignal: Badge clicked, current state:', this.currentState);\r\n    }\r\n\r\n    setState(newState, options = {}) {\r\n        if (!['checking', 'ok', 'warning', 'danger'].includes(newState)) {\r\n            console.warn('SafeSignal: Invalid state:', newState);\r\n            return;\r\n        }\r\n\r\n        this.currentState = newState;\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const icon = this.shadowRoot.querySelector('.badge-icon');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        badge.classList.remove('checking', 'ok', 'warning', 'danger');\r\n        badge.classList.add(newState);\r\n        \r\n        const stateConfig = {\r\n            checking: { \r\n                icon: 'S', \r\n                label: 'SafeSignal - Checking page safety', \r\n                title: 'SafeSignal - Checking page safety',\r\n                status: 'Checking...'\r\n            },\r\n            ok: { \r\n                icon: '✓', \r\n                label: 'SafeSignal - Page appears safe', \r\n                title: 'SafeSignal - Page appears safe',\r\n                status: 'Safe'\r\n            },\r\n            warning: { \r\n                icon: '⚠', \r\n                label: 'SafeSignal - Exercise caution', \r\n                title: 'SafeSignal - Exercise caution',\r\n                status: 'Caution'\r\n            },\r\n            danger: { \r\n                icon: '⚠', \r\n                label: 'SafeSignal - Risk signals detected', \r\n                title: 'SafeSignal - Risk signals detected',\r\n                status: 'Risk detected'\r\n            }\r\n        };\r\n        \r\n        const config = stateConfig[newState];\r\n        icon.textContent = config.icon;\r\n        badge.setAttribute('aria-label', config.label);\r\n        badge.setAttribute('title', config.title);\r\n        statusEl.textContent = config.status;\r\n        \r\n        console.log('SafeSignal: State changed to:', newState);\r\n    }\r\n\r\n    // === KEYBOARD NAVIGATION ===\r\n\r\n    handleKeyboardNavigation(e) {\r\n        if (!this.isVisible) return;\r\n        \r\n        switch (e.key) {\r\n            case 'Enter':\r\n            case ' ':\r\n                if (!this.isMenuOpen) {\r\n                    this.toggleMenu();\r\n                }\r\n                e.preventDefault();\r\n                return;\r\n            case 'Escape':\r\n                this.closeMenu();\r\n                e.preventDefault();\r\n                return;\r\n        }\r\n    }\r\n\r\n    // === MENU SYSTEM ===\r\n\r\n    toggleMenu() {\r\n        this.isMenuOpen = !this.isMenuOpen;\r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n        \r\n        if (this.isMenuOpen) {\r\n            const badgeRect = badge.getBoundingClientRect();\r\n            \r\n            // Apply smart positioning\r\n            const positionedMenu = this.positioning.applyMenuPosition(menu, badgeRect);\r\n            \r\n            positionedMenu.classList.add('open');\r\n            badge.classList.add('menu-open');\r\n            menuButton.setAttribute('aria-expanded', 'true');\r\n            \r\n            // Focus first interactive element\r\n            const firstButton = positionedMenu.querySelector('.menu-item, .position-option');\r\n            if (firstButton) firstButton.focus();\r\n            \r\n            // Self-check after layout\r\n            requestAnimationFrame(() => {\r\n                const menuRect = positionedMenu.getBoundingClientRect();\r\n                const vw = window.innerWidth;\r\n                const vh = window.innerHeight;\r\n                \r\n                // Final bounds check and adjustment\r\n                if (menuRect.right > vw - this.positioning.SAFE_MARGIN ||\r\n                    menuRect.bottom > vh - this.positioning.SAFE_MARGIN) {\r\n                    console.log('SafeSignal: Menu overflow detected, adjusting...');\r\n                    this.positioning.applyMenuPosition(positionedMenu, badgeRect);\r\n                }\r\n            });\r\n        } else {\r\n            menu.classList.remove('open');\r\n            badge.classList.remove('menu-open');\r\n            menuButton.setAttribute('aria-expanded', 'false');\r\n            menuButton.focus();\r\n        }\r\n    }\r\n\r\n\r\n    closeMenu() {\r\n        if (this.isMenuOpen) {\r\n            this.isMenuOpen = false;\r\n            const menu = this.shadowRoot.querySelector('.badge-menu');\r\n            const badge = this.shadowRoot.querySelector('.badge');\r\n            const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n            \r\n            menu.classList.remove('open');\r\n            badge.classList.remove('menu-open');\r\n            menuButton.setAttribute('aria-expanded', 'false');\r\n        }\r\n    }\r\n\r\n    handlePositionSelect(anchor) {\r\n        const newPositioning = { anchor, offsetX: 0, offsetY: 0 };\r\n        this.applyPositioning(newPositioning);\r\n        this.savePositioningPreference(newPositioning);\r\n        this.closeMenu();\r\n        this.showPositionConfirmation(anchor);\r\n    }\r\n\r\n    showPositionConfirmation(anchor) {\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        const friendlyNames = {\r\n            'bottom-right': 'Bottom Right',\r\n            'bottom-left': 'Bottom Left', \r\n            'top-right': 'Top Right',\r\n            'top-left': 'Top Left',\r\n            'mid-right': 'Middle Right',\r\n            'mid-left': 'Middle Left'\r\n        };\r\n        \r\n        statusEl.textContent = `Moved to ${friendlyNames[anchor]}`;\r\n        \r\n        // Update status bubble position before showing\r\n        this.updateStatusBubblePosition();\r\n        \r\n        badge.classList.add('show-status');\r\n        \r\n        setTimeout(() => {\r\n            badge.classList.remove('show-status');\r\n        }, 2000);\r\n    }\r\n\r\n    hide() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.add('hidden');\r\n        this.isVisible = false;\r\n    }\r\n\r\n    show() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.remove('hidden');\r\n        this.isVisible = true;\r\n    }\r\n\r\n    // === SIMPLIFIED SPA DETECTION ===\r\n\r\n    setupSPADetection() {\r\n        this.patchHistoryAPI();\r\n        \r\n        const popstateHandler = () => this.handleURLChange('popstate');\r\n        window.addEventListener('popstate', popstateHandler);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('popstate', popstateHandler));\r\n        \r\n        const hashchangeHandler = () => this.handleURLChange('hashchange');\r\n        window.addEventListener('hashchange', hashchangeHandler);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('hashchange', hashchangeHandler));\r\n        \r\n        const pageshowHandler = (e) => {\r\n            if (e.persisted) {\r\n                console.log('SafeSignal: Page restored from BFCache, re-initializing');\r\n                this.checkIfPageChanged('bfcache_restore');\r\n            }\r\n        };\r\n        const pagehideHandler = () => this.destroy();\r\n        \r\n        window.addEventListener('pageshow', pageshowHandler);\r\n        window.addEventListener('pagehide', pagehideHandler);\r\n        this.cleanupHandlers.push(() => {\r\n            window.removeEventListener('pageshow', pageshowHandler);\r\n            window.removeEventListener('pagehide', pagehideHandler);\r\n        });\r\n        \r\n        // Simplified: No mutation observer for now to reduce complexity\r\n        console.log('SafeSignal: Simplified SPA detection active (history changes only)');\r\n    }\r\n\r\n    patchHistoryAPI() {\r\n        const originalPushState = history.pushState;\r\n        const originalReplaceState = history.replaceState;\r\n        \r\n        history.pushState = (...args) => {\r\n            originalPushState.apply(history, args);\r\n            this.handleURLChange('pushState');\r\n        };\r\n        \r\n        history.replaceState = (...args) => {\r\n            originalReplaceState.apply(history, args);\r\n            this.handleURLChange('replaceState');\r\n        };\r\n        \r\n        this.cleanupHandlers.push(() => {\r\n            history.pushState = originalPushState;\r\n            history.replaceState = originalReplaceState;\r\n        });\r\n        \r\n        console.log('SafeSignal: History API patched for SPA detection');\r\n    }\r\n\r\n    handleURLChange(source) {\r\n        const newUrl = window.location.href;\r\n        if (newUrl !== this.currentUrl) {\r\n            console.log(`SafeSignal: URL changed (${source}):`, this.currentUrl, '→', newUrl);\r\n            this.currentUrl = newUrl;\r\n            this.debouncedPageCheck('url_change');\r\n        }\r\n    }\r\n\r\n    debouncedPageCheck(reason) {\r\n        clearTimeout(this.pageDebounceTimer);\r\n        this.pageDebounceTimer = setTimeout(() => {\r\n            this.checkIfPageChanged(reason);\r\n        }, 800);\r\n    }\r\n\r\n    async checkIfPageChanged(reason) {\r\n        console.log(`SafeSignal: Checking page change (${reason})`);\r\n        \r\n        const now = Date.now();\r\n        const timeSinceLastCheck = now - this.lastCheck;\r\n        \r\n        // Always allow initial load and URL changes\r\n        if (reason === 'url_change' || reason === 'initial_load') {\r\n            await this.performPageAnalysis(reason);\r\n            return;\r\n        }\r\n        \r\n        if (timeSinceLastCheck < this.checkCooldown) {\r\n            console.log(`SafeSignal: Skipping check, cooldown active (${Math.round((this.checkCooldown - timeSinceLastCheck) / 1000)}s remaining)`);\r\n            return;\r\n        }\r\n        \r\n        await this.performPageAnalysis(reason);\r\n    }\r\n\r\n    async performPageAnalysis(reason) {\r\n        this.lastCheck = Date.now();\r\n        console.log(`SafeSignal: Performing page analysis (${reason})`);\r\n        \r\n        this.setState('checking');\r\n        await this.simulateAnalysis();\r\n        this.determinePageState();\r\n    }\r\n\r\n    async simulateAnalysis() {\r\n        const delay = Math.random() * 1000 + 500;\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n\r\n    determinePageState() {\r\n        const url = window.location.href.toLowerCase();\r\n        const hostname = window.location.hostname.toLowerCase();\r\n        const path = window.location.pathname.toLowerCase();\r\n        \r\n        if (hostname.includes('google') || hostname.includes('wikipedia') || hostname.includes('github')) {\r\n            this.setState('ok');\r\n        } else if (path.includes('/login') || path.includes('/signin') || path.includes('/payment')) {\r\n            this.setState('warning');\r\n        } else if (url.includes('?utm_') || path.includes('/ad/') || hostname.includes('doubleclick')) {\r\n            this.setState('warning');\r\n        } else if (hostname.includes('malware') || hostname.includes('phishing') || path.includes('/scam')) {\r\n            this.setState('danger');\r\n        } else {\r\n            const states = ['ok', 'warning', 'danger'];\r\n            const weights = [0.7, 0.25, 0.05];\r\n            const randomState = this.weightedRandomChoice(states, weights);\r\n            this.setState(randomState);\r\n        }\r\n    }\r\n\r\n    weightedRandomChoice(choices, weights) {\r\n        const random = Math.random();\r\n        let weightSum = 0;\r\n        \r\n        for (let i = 0; i < choices.length; i++) {\r\n            weightSum += weights[i];\r\n            if (random <= weightSum) {\r\n                return choices[i];\r\n            }\r\n        }\r\n        \r\n        return choices[choices.length - 1];\r\n    }\r\n\r\n    destroy() {\r\n        // Clear all timers\r\n        [this.pageDebounceTimer, this.proximityCheckInterval].forEach(timer => {\r\n            if (timer) clearTimeout(timer);\r\n        });\r\n        \r\n        // Clear the proximity check interval specifically\r\n        if (this.proximityCheckInterval) {\r\n            clearInterval(this.proximityCheckInterval);\r\n            this.proximityCheckInterval = null;\r\n        }\r\n        \r\n        // Run all cleanup handlers\r\n        this.cleanupHandlers.forEach(cleanup => {\r\n            try {\r\n                cleanup();\r\n            } catch (e) {\r\n                console.warn('SafeSignal: Cleanup error:', e);\r\n            }\r\n        });\r\n        this.cleanupHandlers = [];\r\n        \r\n        // Remove the badge from DOM\r\n        if (this.badgeContainer && this.badgeContainer.parentNode) {\r\n            this.badgeContainer.parentNode.removeChild(this.badgeContainer);\r\n        }\r\n        \r\n        console.log('SafeSignal: Badge destroyed and cleaned up');\r\n    }\r\n}\r\n\r\n// Initialize badge when DOM is ready\r\nlet safesignalBadge = null;\r\n\r\nasync function initializeBadge() {\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n    \r\n    safesignalBadge = new SafeSignalBadge();\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeBadge);\r\n} else {\r\n    initializeBadge();\r\n}\r\n\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n});\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.SafeSignalBadge = SafeSignalBadge;\r\n}"],"names":[],"sourceRoot":""}