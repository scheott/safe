{"version":3,"file":"content.js","mappingssources":["webpack://safesignal-extension/./src/content/content.js"],"sourcesContent":["// SafeSignal Content Script - Elder-First Edition\r\n// Version with all bug fixes applied\r\n\r\nconst SAFESIGNAL_BUILD = 'content-2025-09-28-v3.0-elder';\r\nconsole.info('[SafeSignal] build:', SAFESIGNAL_BUILD);\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        // Fixed: Separate host from shadow root\r\n        this.host = null;\r\n        this.root = null;\r\n        this.currentState = 'checking';\r\n        this.positionState = { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n        \r\n        // Shape and size settings\r\n        this.sizeMode = 'normal'; // 'normal' | 'large' | 'xl'\r\n        this.shape = 'pill'; // Always pill for elders\r\n        \r\n        // SPA Detection\r\n        this.currentUrl = window.location.href;\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.lastCheckByUrl = new Map();\r\n        this.checkCooldown = 30 * 60 * 1000;\r\n        this.cleanupHandlers = [];\r\n        \r\n        // UI state\r\n        this.isMenuOpen = false;\r\n        this.activeModal = null;\r\n        this.longPressTimer = null;\r\n        \r\n        // Context detection\r\n        this.contextProbe = new SafeSignalContextProbe();\r\n        this.contextData = null;\r\n        \r\n        this.userPreferences = {\r\n            positioning: { anchor: 'bottom-right', offsetX: 0, offsetY: 0 },\r\n            sizeMode: 'normal',\r\n            shape: 'pill'\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        if (this.shouldSkipInjection()) return;\r\n        \r\n        await this.loadUserPreferences();\r\n\r\n        this.createShadowDOMBadge();\r\n        this.initMenu();\r\n        this.initSpaDetection();\r\n        this.setupKeyboardShortcuts();\r\n        this.setupResizeHandler();\r\n        this.showActionChips(); // Show placeholders immediately\r\n        \r\n        this.setShape('pill');\r\n        this.setSizeMode(this.userPreferences.sizeMode || 'normal');\r\n        this.applyPositioning(this.userPreferences.positioning);\r\n        \r\n        console.log('SafeSignal: Badge active');\r\n        this.checkIfPageChanged('initial_load');\r\n    }\r\n\r\n    shouldSkipInjection() {\r\n        // Guard against double injection\r\n        if (document.getElementById('safesignal-badge-host')) {\r\n            console.log('SafeSignal: Badge already exists, skipping injection');\r\n            return true;\r\n        }\r\n        \r\n        const protocol = window.location.protocol;\r\n        if (protocol === 'chrome:' || protocol === 'chrome-extension:' || \r\n            protocol === 'moz-extension:' || protocol === 'about:') {\r\n            return true;\r\n        }\r\n        if (window.top !== window) {\r\n            console.log('SafeSignal: Skipping injection in frame');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isSiteHidden() {\r\n        return false; // Feature removed\r\n    }\r\n\r\n    getOriginKey() {\r\n        return `${window.location.protocol}//${window.location.host}`;\r\n    }\r\n\r\n    // ==================== SHADOW DOM CREATION ====================\r\n    \r\n    getSizeConfig() {\r\n        const configs = {\r\n            'normal': { height: 56, font: 18, button: 14, label: 'Normal' },\r\n            'large':  { height: 64, font: 20, button: 16, label: 'Large' },\r\n            'xl':     { height: 72, font: 22, button: 18, label: 'Extra Large' }\r\n        };\r\n        return configs[this.sizeMode] || configs['normal'];\r\n    }\r\n\r\n    createShadowDOMBadge() {\r\n        this.host = document.createElement('div');\r\n        this.host.setAttribute('id', 'safesignal-badge-host');\r\n        this.root = this.host.attachShadow({ mode: 'open' });\r\n        \r\n        const config = this.getSizeConfig();\r\n        \r\n        this.root.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    /* Isolate from page cascades */\r\n                    all: initial;\r\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n                    \r\n                    --ss-h: ${config.height}px;\r\n                    --ss-font: ${config.font}px;\r\n                    --ss-button: ${config.button}px;\r\n                    --ss-radius: 24px;\r\n                    --ss-pad-x: 14px;\r\n                    \r\n                    /* Spacing scale */\r\n                    --space-2: 8px;\r\n                    --space-3: 12px;\r\n                    --space-4: 16px;\r\n                    \r\n                    /* Semantic colors */\r\n                    --color-safe: #10B881;\r\n                    --color-warning: #F5A623;\r\n                    --color-danger: #EF4444;\r\n                    --color-checking: #64748b;\r\n                    --ink-on-dark: #FFFFFF;\r\n                    \r\n                    /* Chip colors - elder-friendly contrast */\r\n                    --chip-product: #7c3aed;\r\n                    --chip-product-hover: #6d28d9;\r\n                    --chip-health: #2563EB;\r\n                    --chip-health-hover: #1D4ED8;\r\n                }\r\n                \r\n                * { box-sizing: border-box; }\r\n                \r\n                .badge {\r\n                    position: fixed;\r\n                    height: var(--ss-h);\r\n                    min-width: var(--ss-h);\r\n                    border-radius: var(--ss-radius);\r\n                    display: inline-flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    gap: 8px;\r\n                    padding: 0 var(--ss-pad-x);\r\n                    padding-right: calc(var(--ss-pad-x) + 36px); /* Extra space so ⋯ never crowds label */\r\n                    font-size: var(--ss-font);\r\n                    font-weight: 700;\r\n                    cursor: pointer;\r\n                    z-index: 2147483647;\r\n                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n                    border: 2px solid rgba(255,255,255,0.2);\r\n                    transition: all 0.2s ease;\r\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n                    user-select: none;\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.02);\r\n                    box-shadow: 0 6px 16px rgba(0,0,0,0.2);\r\n                }\r\n                \r\n                .badge:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .badge-icon {\r\n                    font-size: 1.1em;\r\n                    line-height: 1;\r\n                }\r\n                \r\n                .badge-label {\r\n                    font-size: 0.85em;\r\n                    font-weight: 600;\r\n                    letter-spacing: 0.02em;\r\n                    white-space: nowrap;\r\n                }\r\n                \r\n                .badge.state-ok {\r\n                    background: var(--color-safe);\r\n                    color: var(--ink-on-dark);\r\n                }\r\n                \r\n                .badge.state-warning {\r\n                    background: var(--color-warning);\r\n                    color: var(--ink-on-dark);\r\n                }\r\n                \r\n                .badge.state-danger {\r\n                    background: var(--color-danger);\r\n                    color: var(--ink-on-dark);\r\n                }\r\n                \r\n                .badge.state-checking {\r\n                    background: var(--color-checking);\r\n                    color: var(--ink-on-dark);\r\n                }\r\n                \r\n                /* Menu button - positioned dynamically to avoid text */\r\n                .menu-button {\r\n                    position: absolute;\r\n                    width: 28px;\r\n                    height: 28px;\r\n                    background: rgba(0,0,0,0.7);\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 50%;\r\n                    font-size: 14px;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    z-index: 1;\r\n                    transition: all 0.15s ease;\r\n                    padding: 0;\r\n                }\r\n                \r\n                .menu-button:hover {\r\n                    background: rgba(0,0,0,0.85);\r\n                    transform: scale(1.08);\r\n                }\r\n                \r\n                .menu-button:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                /* Size controls - always visible */\r\n                .size-controls {\r\n                    position: fixed;\r\n                    display: flex;\r\n                    gap: 4px;\r\n                    z-index: 2147483647;\r\n                    opacity: 0.9;\r\n                    transition: opacity 0.2s ease;\r\n                }\r\n                \r\n                .size-controls:hover {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .size-button {\r\n                    width: 44px;\r\n                    height: 44px;\r\n                    background: rgba(0,0,0,0.8);\r\n                    color: white;\r\n                    border: 2px solid rgba(255,255,255,0.2);\r\n                    border-radius: 8px;\r\n                    font-size: 24px;\r\n                    font-weight: 700;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    transition: all 0.15s ease;\r\n                }\r\n                \r\n                .size-button:hover {\r\n                    background: rgba(0,0,0,0.9);\r\n                    transform: scale(1.05);\r\n                }\r\n                \r\n                .size-button:disabled {\r\n                    opacity: 0.4;\r\n                    cursor: not-allowed;\r\n                }\r\n                \r\n                .size-button:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                /* Action chips - mini-badges above main badge */\r\n                .action-chip {\r\n                    position: absolute;\r\n                    z-index: 10;\r\n                    color: white;\r\n                    height: 36px;\r\n                    padding: 0 12px;\r\n                    border-radius: 18px;\r\n                    font-size: 14px;\r\n                    font-weight: 600;\r\n                    white-space: nowrap;\r\n                    cursor: pointer;\r\n                    border: 1px solid rgba(255,255,255,0.2);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 6px;\r\n                    transition: all 0.2s ease;\r\n                    box-shadow: 0 2px 8px rgba(0,0,0,0.12);\r\n                    pointer-events: auto;\r\n                    opacity: 0.95;\r\n                }\r\n                \r\n                .action-chip-product {\r\n                    background: var(--chip-product);\r\n                }\r\n                \r\n                .action-chip-product:hover {\r\n                    background: var(--chip-product-hover);\r\n                    transform: translateY(-2px);\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .action-chip-health {\r\n                    background: var(--chip-health);\r\n                }\r\n                \r\n                .action-chip-health:hover {\r\n                    background: var(--chip-health-hover);\r\n                    transform: translateY(-2px);\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .action-chip:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                /* Menu */\r\n                .badge-menu {\r\n                    position: fixed;\r\n                    background: white;\r\n                    border-radius: 12px;\r\n                    box-shadow: 0 8px 32px rgba(0,0,0,0.12);\r\n                    border: 1px solid #e5e7eb;\r\n                    padding: 16px;\r\n                    min-width: 220px;\r\n                    z-index: 2147483647;\r\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n                    display: none;\r\n                }\r\n                \r\n                .menu-section {\r\n                    margin-bottom: 16px;\r\n                }\r\n                \r\n                .menu-section:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n                \r\n                .menu-label {\r\n                    font-size: 14px;\r\n                    font-weight: 600;\r\n                    color: #374151;\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                .position-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr);\r\n                    gap: 6px;\r\n                    width: 90px;\r\n                    height: 72px;\r\n                }\r\n                \r\n                .position-option {\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    border: 2px solid #d1d5db;\r\n                    border-radius: 4px;\r\n                    background: #f9fafb;\r\n                    cursor: pointer;\r\n                    transition: all 0.15s ease;\r\n                }\r\n                \r\n                .position-option:hover {\r\n                    background: #e5e7eb;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .position-option.active {\r\n                    background: #3b82f6;\r\n                    border-color: #2563eb;\r\n                }\r\n                \r\n                .position-option:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .menu-option-group {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    gap: 6px;\r\n                }\r\n                \r\n                .menu-option {\r\n                    padding: 10px 12px;\r\n                    border: 2px solid #d1d5db;\r\n                    border-radius: 6px;\r\n                    background: white;\r\n                    cursor: pointer;\r\n                    font-size: 14px;\r\n                    transition: all 0.15s ease;\r\n                    text-align: center;\r\n                    font-weight: 500;\r\n                }\r\n                \r\n                .menu-option:hover {\r\n                    background: #f3f4f6;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .menu-option:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .menu-option.active {\r\n                    background: #3b82f6;\r\n                    color: white;\r\n                    border-color: #3b82f6;\r\n                    font-weight: 600;\r\n                }\r\n                \r\n                /* Modal */\r\n                .modal-overlay {\r\n                    position: fixed;\r\n                    top: 0;\r\n                    left: 0;\r\n                    right: 0;\r\n                    bottom: 0;\r\n                    background: rgba(0,0,0,0.8);\r\n                    z-index: 2147483646;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    padding: 20px;\r\n                }\r\n                \r\n                .modal-content {\r\n                    background: white;\r\n                    border-radius: 16px;\r\n                    max-width: 600px;\r\n                    width: 100%;\r\n                    max-height: 80vh;\r\n                    overflow-y: auto;\r\n                    padding: 32px;\r\n                    box-shadow: 0 20px 60px rgba(0,0,0,0.3);\r\n                }\r\n                \r\n                .modal-header {\r\n                    font-size: 28px;\r\n                    font-weight: 700;\r\n                    color: #1f2937;\r\n                    margin-bottom: 20px;\r\n                }\r\n                \r\n                .modal-body {\r\n                    font-size: 18px;\r\n                    line-height: 1.6;\r\n                    color: #374151;\r\n                    margin-bottom: 24px;\r\n                }\r\n                \r\n                .modal-close {\r\n                    width: 100%;\r\n                    padding: 16px;\r\n                    background: #3b82f6;\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 8px;\r\n                    font-size: 18px;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    transition: background 0.2s ease;\r\n                }\r\n                \r\n                .modal-close:hover {\r\n                    background: #2563eb;\r\n                }\r\n                \r\n                .modal-close:focus-visible {\r\n                    outline: 3px solid rgba(59,130,246,0.6);\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                @media (prefers-contrast: high) {\r\n                    .badge {\r\n                        border-width: 3px;\r\n                        border-color: currentColor;\r\n                    }\r\n                    \r\n                    .badge.state-ok { background: #0f5132; }\r\n                    .badge.state-warning { background: #8b5a00; }\r\n                    .badge.state-danger { background: #7c1d20; }\r\n                    .menu-option.active { outline: 2px solid #000; }\r\n                }\r\n                \r\n                @media (prefers-reduced-motion: reduce) {\r\n                    .badge, .menu-button, .menu-option, .action-chip,\r\n                    .size-button, .size-controls {\r\n                        transition: none !important;\r\n                        animation: none !important;\r\n                    }\r\n                }\r\n            </style>\r\n            \r\n            <div class=\"badge state-checking\" role=\"button\" tabindex=\"0\" aria-live=\"polite\" aria-label=\"SafeSignal: Checking\">\r\n                <span class=\"badge-icon\">⧗</span>\r\n                <span class=\"badge-label\">Checking</span>\r\n                <button class=\"menu-button\" title=\"SafeSignal Settings\" aria-label=\"SafeSignal Settings\" aria-expanded=\"false\">⋯</button>\r\n            </div>\r\n            \r\n            <div class=\"size-controls\">\r\n                <button class=\"size-button size-minus\" title=\"Smaller\" aria-label=\"Make badge smaller\">−</button>\r\n                <button class=\"size-button size-plus\" title=\"Larger\" aria-label=\"Make badge larger\">+</button>\r\n            </div>\r\n            \r\n            <div class=\"badge-menu\" role=\"dialog\" aria-label=\"SafeSignal Settings\">\r\n                <div class=\"menu-section\">\r\n                    <div class=\"menu-label\">Move Badge</div>\r\n                    <div class=\"position-grid\" role=\"group\" aria-label=\"Position options\">\r\n                        <button class=\"position-option\" data-position=\"top-left\" title=\"Top Left\" aria-label=\"Top left corner\"></button>\r\n                        <div></div>\r\n                        <button class=\"position-option\" data-position=\"top-right\" title=\"Top Right\" aria-label=\"Top right corner\"></button>\r\n                        <button class=\"position-option\" data-position=\"mid-left\" title=\"Middle Left\" aria-label=\"Middle left side\"></button>\r\n                        <div></div>\r\n                        <button class=\"position-option\" data-position=\"mid-right\" title=\"Middle Right\" aria-label=\"Middle right side\"></button>\r\n                        <button class=\"position-option\" data-position=\"bottom-left\" title=\"Bottom Left\" aria-label=\"Bottom left corner\"></button>\r\n                        <div></div>\r\n                        <button class=\"position-option active\" data-position=\"bottom-right\" title=\"Bottom Right\" aria-label=\"Bottom right corner\"></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        document.documentElement.appendChild(this.host);\r\n    }\r\n\r\n    // ==================== MENU ====================\r\n    \r\n    initMenu() {\r\n        const menuBtn = this.root.querySelector('.menu-button');\r\n        const menu = this.root.querySelector('.badge-menu');\r\n        let lastFocus = null;\r\n        \r\n        const openMenu = () => {\r\n            lastFocus = document.activeElement;\r\n            \r\n            // Put in flow, measure, then position\r\n            menu.style.visibility = 'hidden';\r\n            menu.style.display = 'block';\r\n            \r\n            const { width: mw, height: mh } = menu.getBoundingClientRect();\r\n            const br = this.root.querySelector('.badge').getBoundingClientRect();\r\n            \r\n            let left = br.right + 10;\r\n            if (left + mw > window.innerWidth - 16) {\r\n                left = Math.max(16, br.left - mw - 10);\r\n            }\r\n            let top = Math.min(Math.max(16, br.top), window.innerHeight - mh - 16);\r\n            \r\n            menu.style.left = `${left}px`;\r\n            menu.style.top = `${top}px`;\r\n            menu.style.visibility = 'visible';\r\n            \r\n            menu.setAttribute('tabindex', '-1');\r\n            menuBtn.setAttribute('aria-expanded', 'true');\r\n            this.isMenuOpen = true;\r\n            \r\n            requestAnimationFrame(() => menu.focus());\r\n        };\r\n        \r\n        const closeMenu = () => {\r\n            menu.style.display = 'none';\r\n            menuBtn.setAttribute('aria-expanded', 'false');\r\n            this.isMenuOpen = false;\r\n            (lastFocus || menuBtn).focus();\r\n        };\r\n        \r\n        menuBtn.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.isMenuOpen ? closeMenu() : openMenu();\r\n        });\r\n        \r\n        // Bubble phase to avoid race with button click\r\n        this._docClickHandler = (e) => {\r\n            if (!this.isMenuOpen) return;\r\n            const path = e.composedPath();\r\n            if (!path.includes(menu) && !path.includes(menuBtn)) closeMenu();\r\n        };\r\n        document.addEventListener('click', this._docClickHandler); // bubble phase\r\n        \r\n        menu.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape') {\r\n                e.stopPropagation();\r\n                closeMenu();\r\n            }\r\n            \r\n            if (e.key === 'Tab') {\r\n                const focusables = [...menu.querySelectorAll('button')];\r\n                if (!focusables.length) return;\r\n                \r\n                const currentIndex = focusables.indexOf(this.root.activeElement);\r\n                let nextIndex;\r\n                \r\n                if (e.shiftKey) {\r\n                    nextIndex = currentIndex <= 0 ? focusables.length - 1 : currentIndex - 1;\r\n                } else {\r\n                    nextIndex = currentIndex === focusables.length - 1 ? 0 : currentIndex + 1;\r\n                }\r\n                \r\n                if (currentIndex === -1 || \r\n                    (e.shiftKey && currentIndex === 0) || \r\n                    (!e.shiftKey && currentIndex === focusables.length - 1)) {\r\n                    e.preventDefault();\r\n                    focusables[nextIndex].focus();\r\n                }\r\n            }\r\n        });\r\n        \r\n        window.addEventListener('scroll', () => {\r\n            if (this.isMenuOpen) closeMenu();\r\n        }, { passive: true });\r\n        \r\n        this.attachMenuEventListeners();\r\n    }\r\n\r\n    attachMenuEventListeners() {\r\n        // Size controls\r\n        const minusBtn = this.root.querySelector('.size-minus');\r\n        const plusBtn = this.root.querySelector('.size-plus');\r\n        \r\n        minusBtn?.addEventListener('click', () => this.cycleSizeDown());\r\n        plusBtn?.addEventListener('click', () => this.cycleSizeUp());\r\n        \r\n        // Position options\r\n        const positionOptions = this.root.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n                const anchor = option.dataset.position;\r\n                this.handlePositionSelect(anchor);\r\n            });\r\n        });\r\n    }\r\n\r\n    handlePositionSelect(anchor) {\r\n        const newPositioning = { anchor, offsetX: 0, offsetY: 0 };\r\n        this.applyPositioning(newPositioning);\r\n        this.userPreferences.positioning = newPositioning;\r\n        this.saveUserPreferences();\r\n        this.updatePositionGridUI(anchor);\r\n        \r\n        console.log('SafeSignal: Position selected:', anchor);\r\n    }\r\n\r\n    updatePositionGridUI(activeAnchor) {\r\n        if (!this.root) return;\r\n        \r\n        const positionOptions = this.root.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.classList.remove('active');\r\n            if (option.dataset.position === activeAnchor) {\r\n                option.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    // ==================== SIZE MANAGEMENT ====================\r\n    \r\n    setSizeMode(mode) {\r\n        if (!['normal', 'large', 'xl'].includes(mode)) return;\r\n        \r\n        this.sizeMode = mode;\r\n        const config = this.getSizeConfig();\r\n        \r\n        this.host.style.setProperty('--ss-h', `${config.height}px`);\r\n        this.host.style.setProperty('--ss-font', `${config.font}px`);\r\n        this.host.style.setProperty('--ss-button', `${config.button}px`);\r\n        \r\n        const pos = this.positionState || { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n        this.applyPositioning(pos);\r\n        this.positionSizeControls();\r\n        \r\n        this.userPreferences.sizeMode = mode;\r\n        this.saveUserPreferences();\r\n        this.updateSizeControlsUI();\r\n        \r\n        console.log(`SafeSignal: Size set to ${config.label}`);\r\n    }\r\n\r\n    setShape(shape) {\r\n        this.shape = shape;\r\n        const badge = this.root.querySelector('.badge');\r\n        \r\n        this.host.style.setProperty('--ss-radius', '24px');\r\n        this.host.style.setProperty('--ss-pad-x', '14px');\r\n        badge?.classList.remove('compact');\r\n        \r\n        this.userPreferences.shape = shape;\r\n        this.saveUserPreferences();\r\n        \r\n        const pos = this.positionState || { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n        this.applyPositioning(pos);\r\n    }\r\n\r\n    cycleSizeUp() {\r\n        const order = ['normal', 'large', 'xl'];\r\n        const current = order.indexOf(this.sizeMode);\r\n        const next = (current + 1) % order.length;\r\n        this.setSizeMode(order[next]);\r\n    }\r\n\r\n    cycleSizeDown() {\r\n        const order = ['normal', 'large', 'xl'];\r\n        const current = order.indexOf(this.sizeMode);\r\n        const prev = current === 0 ? order.length - 1 : current - 1;\r\n        this.setSizeMode(order[prev]);\r\n    }\r\n\r\n    updateSizeControlsUI() {\r\n        const minusBtn = this.root.querySelector('.size-minus');\r\n        const plusBtn = this.root.querySelector('.size-plus');\r\n        \r\n        minusBtn.disabled = this.sizeMode === 'normal';\r\n        plusBtn.disabled = this.sizeMode === 'xl';\r\n    }\r\n\r\n    // ==================== POSITIONING ====================\r\n    \r\n    getAnchorPositions() {\r\n        const padding = 20;\r\n        const systemBarHeight = 100;\r\n        const viewportWidth = window.innerWidth;\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        return {\r\n            'top-left': { x: padding, y: padding },\r\n            'top-right': { x: viewportWidth - padding, y: padding },\r\n            'mid-left': { x: padding, y: viewportHeight / 2 },\r\n            'mid-right': { x: viewportWidth - padding, y: viewportHeight / 2 },\r\n            'bottom-left': { x: padding, y: viewportHeight - systemBarHeight },\r\n            'bottom-right': { x: viewportWidth - padding, y: viewportHeight - systemBarHeight }\r\n        };\r\n    }\r\n\r\n    applyPositioning(positioning) {\r\n        if (!this.root) return;\r\n        \r\n        const { anchor, offsetX = 0, offsetY = 0 } = positioning;\r\n        const anchorPositions = this.getAnchorPositions();\r\n        const anchorPos = anchorPositions[anchor] || anchorPositions['bottom-right'];\r\n        \r\n        const badge = this.root.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const badgeRect = badge.getBoundingClientRect();\r\n        const badgeW = badgeRect.width || 56;\r\n        const badgeH = badgeRect.height || 56;\r\n        \r\n        let finalX = anchorPos.x + offsetX;\r\n        let finalY = anchorPos.y + offsetY;\r\n        \r\n        if (anchor.includes('right')) finalX -= badgeW;\r\n        if (anchor.includes('bottom')) finalY -= badgeH;\r\n        if (anchor.includes('mid')) {\r\n            if (anchor.includes('left') || anchor.includes('right')) {\r\n                finalY -= badgeH / 2;\r\n            }\r\n        }\r\n        \r\n        const margin = 16;\r\n        finalX = Math.max(margin, Math.min(finalX, window.innerWidth - badgeW - margin));\r\n        finalY = Math.max(margin, Math.min(finalY, window.innerHeight - badgeH - margin));\r\n        \r\n        badge.style.position = 'fixed';\r\n        badge.style.left = `${finalX}px`;\r\n        badge.style.top = `${finalY}px`;\r\n        badge.style.right = 'auto';\r\n        badge.style.bottom = 'auto';\r\n        \r\n        this.positionState = { anchor, offsetX, offsetY };\r\n        \r\n        // Position size controls\r\n        this.positionSizeControls();\r\n        \r\n        // Position menu button using geometry\r\n        this.positionMenuButton();\r\n        \r\n        // Reposition action chips\r\n        this.repositionActionChips();\r\n        \r\n        // Update position grid UI\r\n        this.updatePositionGridUI(anchor);\r\n        \r\n        console.log('SafeSignal: Positioned at', { anchor, finalX, finalY });\r\n    }\r\n\r\n    positionSizeControls() {\r\n        const badge = this.root.querySelector('.badge');\r\n        const controls = this.root.querySelector('.size-controls');\r\n        if (!badge || !controls) return;\r\n        \r\n        const br = badge.getBoundingClientRect();\r\n        const DOCK_W = 48 + 8 + 48; // 2 buttons + gap (104px total)\r\n        const GAP = 12;\r\n        \r\n        let left, top;\r\n        if (this.positionState.anchor.includes('left')) {\r\n            left = br.right + GAP;\r\n        } else {\r\n            left = br.left - DOCK_W - GAP;\r\n        }\r\n        top = br.top + (br.height - 48) / 2;\r\n        \r\n        left = Math.max(16, Math.min(left, window.innerWidth - DOCK_W - 16));\r\n        top = Math.max(16, Math.min(top, window.innerHeight - 48 - 16));\r\n        \r\n        controls.style.left = `${left}px`;\r\n        controls.style.top = `${top}px`;\r\n    }\r\n\r\n    positionMenuButton() {\r\n        const btn = this.root.querySelector('.menu-button');\r\n        const badge = this.root.querySelector('.badge');\r\n        if (!btn || !badge) return;\r\n        \r\n        // Position menu button outside the badge, above it\r\n        const br = badge.getBoundingClientRect();\r\n        \r\n        // Center horizontally on badge\r\n        const btnLeft = (br.width / 2) - 14; // 14 = half of button width\r\n        \r\n        btn.style.position = 'absolute';\r\n        btn.style.left = `${btnLeft}px`;\r\n        btn.style.top = '-34px'; // Place above badge\r\n        btn.style.right = 'auto';\r\n        btn.style.bottom = 'auto';\r\n    }\r\n\r\n    // ==================== ACTION CHIPS ====================\r\n    \r\n    showActionChips() {\r\n        this.clearActionChips();\r\n        \r\n        // Always show both chips (placeholder mode)\r\n        this.addActionChip('product', 'Product Scan', '#3b82f6');\r\n        this.addActionChip('health', 'Health Scan', '#10B881');\r\n    }\r\n\r\n    clearActionChips() {\r\n        this.root.querySelectorAll('.action-chip').forEach(chip => chip.remove());\r\n    }\r\n\r\n    addActionChip(type, text, color) {\r\n        const badge = this.root.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const badgeRect = badge.getBoundingClientRect();\r\n        const chip = document.createElement('button');\r\n        chip.className = `action-chip action-chip-${type}`;\r\n        chip.textContent = text;\r\n        chip.style.background = color;\r\n        chip.dataset.chipType = type;\r\n        \r\n        // Position below badge\r\n        this.root.appendChild(chip);\r\n        this.positionActionChip(chip);\r\n        \r\n        chip.addEventListener('click', () => this.showModal(type));\r\n    }\r\n\r\n    positionActionChip(chip) {\r\n        const badge = this.root.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const badgeRect = badge.getBoundingClientRect();\r\n        const chipRect = chip.getBoundingClientRect();\r\n        \r\n        // Get index for stacking\r\n        const chips = [...this.root.querySelectorAll('.action-chip')];\r\n        const index = chips.indexOf(chip);\r\n        \r\n        let left = badgeRect.left + (badgeRect.width / 2);\r\n        let top = badgeRect.bottom + 8 + (index * 48); // Stack with gap\r\n        \r\n        left -= chipRect.width / 2;\r\n        left = Math.max(16, Math.min(left, window.innerWidth - chipRect.width - 16));\r\n        top = Math.min(top, window.innerHeight - chipRect.height - 16);\r\n        \r\n        chip.style.left = `${left}px`;\r\n        chip.style.top = `${top}px`;\r\n    }\r\n\r\n    repositionActionChips() {\r\n        this.root.querySelectorAll('.action-chip').forEach(chip => {\r\n            this.positionActionChip(chip);\r\n        });\r\n    }\r\n\r\n    // ==================== MODAL ====================\r\n    \r\n    showModal(type) {\r\n        if (this.activeModal) return;\r\n        \r\n        const overlay = document.createElement('div');\r\n        overlay.className = 'modal-overlay';\r\n        overlay.setAttribute('role', 'dialog');\r\n        overlay.setAttribute('aria-modal', 'true');\r\n        overlay.setAttribute('aria-labelledby', 'modal-title');\r\n        \r\n        const content = {\r\n            'health': {\r\n                title: 'Health Scan',\r\n                body: 'This feature will verify health claims and provide trusted medical information. Coming soon!'\r\n            },\r\n            'product': {\r\n                title: 'Product Scan',\r\n                body: 'This feature will compare prices and safety ratings across trusted retailers. Coming soon!'\r\n            }\r\n        };\r\n        \r\n        const modalData = content[type] || content['product'];\r\n        \r\n        overlay.innerHTML = `\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\" id=\"modal-title\">${modalData.title}</div>\r\n                <div class=\"modal-body\">${modalData.body}</div>\r\n                <button class=\"modal-close\">Close</button>\r\n            </div>\r\n        `;\r\n        \r\n        this.root.appendChild(overlay);\r\n        this.activeModal = overlay;\r\n        \r\n        const closeBtn = overlay.querySelector('.modal-close');\r\n        const modalContent = overlay.querySelector('.modal-content');\r\n        \r\n        const closeModal = () => {\r\n            if (this.activeModal) {\r\n                this.activeModal.remove();\r\n                this.activeModal = null;\r\n                document.removeEventListener('keydown', this._modalEscapeHandler);\r\n                this._modalEscapeHandler = null;\r\n            }\r\n        };\r\n        \r\n        // Focus trap\r\n        const focusableElements = modalContent.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n        const firstFocusable = focusableElements[0];\r\n        const lastFocusable = focusableElements[focusableElements.length - 1];\r\n        \r\n        this._modalEscapeHandler = (e) => {\r\n            if (e.key === 'Escape') closeModal();\r\n            \r\n            if (e.key === 'Tab') {\r\n                if (e.shiftKey) {\r\n                    if (document.activeElement === firstFocusable) {\r\n                        e.preventDefault();\r\n                        lastFocusable.focus();\r\n                    }\r\n                } else {\r\n                    if (document.activeElement === lastFocusable) {\r\n                        e.preventDefault();\r\n                        firstFocusable.focus();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        \r\n        document.addEventListener('keydown', this._modalEscapeHandler);\r\n        \r\n        closeBtn.addEventListener('click', closeModal);\r\n        overlay.addEventListener('click', (e) => {\r\n            if (e.target === overlay) closeModal();\r\n        });\r\n        \r\n        // Focus first element\r\n        requestAnimationFrame(() => closeBtn.focus());\r\n    }\r\n\r\n    // ==================== KEYBOARD SHORTCUTS ====================\r\n    \r\n    setupKeyboardShortcuts() {\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.altKey && !e.shiftKey && !e.ctrlKey && !e.metaKey) {\r\n                if (e.key === '=' || e.key === '+') {\r\n                    this.cycleSizeUp();\r\n                    e.preventDefault();\r\n                }\r\n                if (e.key === '-' || e.key === '_') {\r\n                    this.cycleSizeDown();\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // ==================== RESIZE HANDLER ====================\r\n    \r\n    setupResizeHandler() {\r\n        let resizeTimer;\r\n        const rebalance = () => {\r\n            clearTimeout(resizeTimer);\r\n            resizeTimer = setTimeout(() => {\r\n                const pos = this.positionState || { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n                this.applyPositioning(pos);\r\n                this.positionSizeControls();\r\n            }, 100);\r\n        };\r\n        \r\n        window.addEventListener('resize', rebalance, { passive: true });\r\n        window.addEventListener('scroll', rebalance, { passive: true });\r\n        \r\n        // Support mobile keyboards/zoom\r\n        if (window.visualViewport) {\r\n            window.visualViewport.addEventListener('resize', rebalance);\r\n            window.visualViewport.addEventListener('scroll', rebalance);\r\n        }\r\n    }\r\n\r\n    // ==================== SPA DETECTION ====================\r\n    \r\n    initSpaDetection() {\r\n        // Guard against double-patching\r\n        if (window._safesignalHistoryPatched) {\r\n            console.log('SafeSignal: History already patched, skipping');\r\n            return;\r\n        }\r\n        \r\n        const fire = (reason) => {\r\n            requestAnimationFrame(() => this.checkIfPageChanged(reason));\r\n        };\r\n        \r\n        const origPush = history.pushState;\r\n        const origReplace = history.replaceState;\r\n        \r\n        history.pushState = function(...args) {\r\n            const result = origPush.apply(history, args);\r\n            fire('pushState');\r\n            return result;\r\n        };\r\n        \r\n        history.replaceState = function(...args) {\r\n            const result = origReplace.apply(history, args);\r\n            fire('replaceState');\r\n            return result;\r\n        };\r\n        \r\n        window._safesignalHistoryPatched = true;\r\n        \r\n        window.addEventListener('popstate', () => fire('popstate'));\r\n        \r\n        const mo = new MutationObserver(() => {\r\n            clearTimeout(this.pageDebounceTimer);\r\n            this.pageDebounceTimer = setTimeout(() => {\r\n                fire('mutation');\r\n            }, 500);\r\n        });\r\n        \r\n        mo.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        \r\n        this.mutationObserver = mo;\r\n        \r\n        console.log('SafeSignal: SPA detection initialized');\r\n    }\r\n\r\n    checkIfPageChanged(trigger) {\r\n        const newUrl = window.location.href;\r\n        \r\n        const now = Date.now();\r\n        const lastCheck = this.lastCheckByUrl.get(newUrl) || 0;\r\n        \r\n        if (now - lastCheck < this.checkCooldown && trigger !== 'initial_load') {\r\n            console.log('SafeSignal: Skipping check (cooldown)');\r\n            return;\r\n        }\r\n        \r\n        console.log(`SafeSignal: Page changed (${trigger})`);\r\n        \r\n        this.currentUrl = newUrl;\r\n        this.lastCheckByUrl.set(newUrl, now);\r\n        \r\n        this.performSafetyCheck(newUrl);\r\n        this.performContextScan();\r\n    }\r\n\r\n    async performSafetyCheck(url) {\r\n        this.updateBadgeState('checking');\r\n        \r\n        try {\r\n            const response = await chrome.runtime.sendMessage({\r\n                action: 'check_url',\r\n                url: url\r\n            });\r\n            \r\n            if (response && response.verdict) {\r\n                this.updateBadgeState(response.verdict, response);\r\n            } else {\r\n                this.updateBadgeState('ok');\r\n            }\r\n        } catch (error) {\r\n            console.warn('SafeSignal: Check failed:', error);\r\n            this.updateBadgeState('checking');\r\n        }\r\n    }\r\n\r\n    performContextScan() {\r\n        this.contextData = this.contextProbe.quickContextProbe();\r\n        this.showActionChips();\r\n    }\r\n\r\n    updateBadgeState(state, data = {}) {\r\n        const badge = this.root?.querySelector('.badge');\r\n        const icon = this.root?.querySelector('.badge-icon');\r\n        const label = this.root?.querySelector('.badge-label');\r\n        \r\n        if (!badge || !icon || !label) return;\r\n\r\n        badge.className = badge.className.replace(/state-\\w+/g, '');\r\n        badge.classList.add(`state-${state}`);\r\n        \r\n        const stateConfig = {\r\n            'ok': { icon: '✓', text: 'Safe' },\r\n            'warning': { icon: '!', text: 'Caution' },\r\n            'danger': { icon: '✗', text: 'High Risk' },\r\n            'checking': { icon: '⧗', text: 'Checking' }\r\n        };\r\n        \r\n        const config = stateConfig[state] || stateConfig['checking'];\r\n        icon.textContent = config.icon;\r\n        label.textContent = config.text;\r\n        \r\n        badge.setAttribute('aria-label', `SafeSignal: ${config.text}`);\r\n        \r\n        this.currentState = state;\r\n        console.log(`SafeSignal: Badge state updated to ${state}`);\r\n    }\r\n\r\n    // ==================== USER PREFERENCES ====================\r\n    \r\n    async loadUserPreferences() {\r\n        try {\r\n            const result = await chrome.storage.sync.get([\r\n                'positioning', \r\n                'sizeMode',\r\n                'shape'\r\n            ]);\r\n            \r\n            if (result.positioning) {\r\n                this.userPreferences.positioning = result.positioning;\r\n            }\r\n            \r\n            if (result.sizeMode) {\r\n                this.userPreferences.sizeMode = result.sizeMode;\r\n                this.sizeMode = result.sizeMode;\r\n            }\r\n            \r\n            if (result.shape) {\r\n                this.userPreferences.shape = result.shape;\r\n                this.shape = result.shape;\r\n            }\r\n            \r\n            console.log('SafeSignal: Loaded preferences');\r\n        } catch (error) {\r\n            console.warn('SafeSignal: Could not load preferences:', error);\r\n        }\r\n    }\r\n\r\n    async saveUserPreferences() {\r\n        try {\r\n            await chrome.storage.sync.set({\r\n                positioning: this.userPreferences.positioning,\r\n                sizeMode: this.userPreferences.sizeMode,\r\n                shape: this.userPreferences.shape\r\n            });\r\n            console.log('SafeSignal: Saved preferences');\r\n        } catch (error) {\r\n            console.warn('SafeSignal: Could not save preferences:', error);\r\n        }\r\n    }\r\n\r\n    // ==================== CLEANUP ====================\r\n    \r\n    destroy() {\r\n        if (this._docClickHandler) {\r\n            document.removeEventListener('click', this._docClickHandler, { capture: true });\r\n        }\r\n        \r\n        if (this.longPressTimer) {\r\n            clearTimeout(this.longPressTimer);\r\n        }\r\n        \r\n        if (this.pageDebounceTimer) {\r\n            clearTimeout(this.pageDebounceTimer);\r\n        }\r\n        \r\n        if (this.mutationObserver) {\r\n            this.mutationObserver.disconnect();\r\n        }\r\n        \r\n        if (this.host && this.host.parentNode) {\r\n            this.host.parentNode.removeChild(this.host);\r\n        }\r\n        \r\n        console.log('SafeSignal: Badge destroyed');\r\n    }\r\n}\r\n\r\n// ==================== CONTEXT PROBE ====================\r\n\r\nclass SafeSignalContextProbe {\r\n    constructor() {\r\n        this.productIndicators = {\r\n            shoppingTerms: [\r\n                'add to cart', 'buy now', 'purchase', 'checkout', 'order now',\r\n                'price', 'sale', 'discount', 'shipping', 'delivery',\r\n                'add to bag', 'cart', 'basket', 'subscribe & save'\r\n            ]\r\n        };\r\n\r\n        this.healthIndicators = {\r\n            healthTerms: [\r\n                'supplement', 'vitamin', 'health', 'medicine', 'treatment',\r\n                'cure', 'heal', 'therapy', 'clinical', 'medical',\r\n                'dosage', 'side effects', 'contraindications'\r\n            ],\r\n            suspiciousHealth: [\r\n                'miracle cure', 'instant relief', 'guaranteed results',\r\n                'doctors hate this', 'secret remedy', 'breakthrough'\r\n            ]\r\n        };\r\n    }\r\n\r\n    quickContextProbe() {\r\n        const pageText = document.body.textContent.toLowerCase();\r\n        \r\n        const productScore = this.calculateProductScore(pageText);\r\n        const isProduct = productScore > 0.6;\r\n        \r\n        const healthScore = this.calculateHealthScore(pageText);\r\n        const isHealth = healthScore > 0.6;\r\n        \r\n        return {\r\n            isProduct,\r\n            productConfidence: productScore,\r\n            isHealth,\r\n            healthConfidence: healthScore\r\n        };\r\n    }\r\n\r\n    calculateProductScore(pageText) {\r\n        let score = 0;\r\n        \r\n        const priceRegex = /\\$\\d+|\\$\\d+\\.\\d+|price.*\\$|\\d+\\.\\d+.*usd/gi;\r\n        const priceMatches = pageText.match(priceRegex);\r\n        if (priceMatches && priceMatches.length > 0) {\r\n            score += Math.min(priceMatches.length * 0.2, 0.5);\r\n        }\r\n        \r\n        let termMatches = 0;\r\n        this.productIndicators.shoppingTerms.forEach(term => {\r\n            if (pageText.includes(term)) termMatches++;\r\n        });\r\n        score += Math.min(termMatches * 0.1, 0.4);\r\n        \r\n        return Math.min(score, 1.0);\r\n    }\r\n\r\n    calculateHealthScore(pageText) {\r\n        let score = 0;\r\n        \r\n        let healthTerms = 0;\r\n        this.healthIndicators.healthTerms.forEach(term => {\r\n            if (pageText.includes(term)) healthTerms++;\r\n        });\r\n        score += Math.min(healthTerms * 0.1, 0.5);\r\n        \r\n        let suspiciousTerms = 0;\r\n        this.healthIndicators.suspiciousHealth.forEach(term => {\r\n            if (pageText.includes(term)) suspiciousTerms++;\r\n        });\r\n        score += Math.min(suspiciousTerms * 0.2, 0.4);\r\n        \r\n        return Math.min(score, 1.0);\r\n    }\r\n}\r\n\r\n// ==================== INITIALIZATION ====================\r\n\r\nfunction initializeBadge() {\r\n    if (window.safesignalBadgeInstance) {\r\n        window.safesignalBadgeInstance.destroy();\r\n        window.safesignalBadgeInstance = null;\r\n    }\r\n    \r\n    window.safesignalBadgeInstance = new SafeSignalBadge();\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.SafeSignalBadge = SafeSignalBadge;\r\n    window.SafeSignalContextProbe = SafeSignalContextProbe;\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeBadge);\r\n} else {\r\n    initializeBadge();\r\n}\r\n\r\nconsole.log('[SafeSignal] Content script loaded');"],"names":[],"sourceRoot":""}