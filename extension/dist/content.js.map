{"version":3,"file":"content.js","mappingssources":["webpack://safesignal-extension/./src/content/content.js"],"sourcesContent":["class SafeSignalBadge {\r\n    constructor() {\r\n        this.shadowRoot = null;\r\n        this.badgeContainer = null;\r\n        this.currentState = 'checking';\r\n        this.isVisible = true;\r\n        this.position = 'bottom-right';\r\n        \r\n        // SPA Detection properties\r\n        this.currentUrl = window.location.href;\r\n        this.currentSignature = null;\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.contentDebounceTimer = null;\r\n        this.lastCheck = 0;\r\n        this.checkCooldown = 30 * 60 * 1000; // 30 minutes\r\n        this.sessionUpdateCounts = new Map(); // Track noisy DOM updates\r\n        this.cleanupHandlers = []; // Track cleanup functions\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        if (this.shouldSkipInjection()) {\r\n            return;\r\n        }\r\n\r\n        this.createShadowDOMBadge();\r\n        this.attachEventListeners();\r\n        this.setupSPADetection();\r\n        \r\n        // Initial page check - FIXED: use correct method name\r\n        this.checkIfPageChanged('initial_load');\r\n        \r\n        console.log('SafeSignal: Phase 1.3 SPA detection system active');\r\n    }\r\n\r\n    shouldSkipInjection() {\r\n        const protocol = window.location.protocol;\r\n        \r\n        // Skip extension pages and non-web protocols\r\n        if (protocol === 'chrome:' || \r\n            protocol === 'chrome-extension:' ||\r\n            protocol === 'moz-extension:' ||\r\n            protocol === 'about:') {\r\n            return true;\r\n        }\r\n        \r\n        // Skip if we're in an embedded frame (security consideration)\r\n        if (window.top !== window) {\r\n            console.log('SafeSignal: Skipping injection in embedded frame');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    // === SPA DETECTION SYSTEM ===\r\n    \r\n    setupSPADetection() {\r\n        // 1. Patch history API to detect URL changes\r\n        this.patchHistoryAPI();\r\n        \r\n        // 2. Listen for popstate events (back/forward)\r\n        const popstateHandler = () => this.handleURLChange('popstate');\r\n        window.addEventListener('popstate', popstateHandler);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('popstate', popstateHandler));\r\n        \r\n        // 3. Listen for hash changes (hash-only SPAs)\r\n        const hashchangeHandler = () => this.handleURLChange('hashchange');\r\n        window.addEventListener('hashchange', hashchangeHandler);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('hashchange', hashchangeHandler));\r\n        \r\n        // 4. Listen for page show/hide for BFCache handling\r\n        const pageshowHandler = (e) => {\r\n            if (e.persisted) {\r\n                console.log('SafeSignal: Page restored from BFCache, re-initializing');\r\n                this.checkIfPageChanged('bfcache_restore');\r\n            }\r\n        };\r\n        const pagehideHandler = () => this.destroy();\r\n        \r\n        window.addEventListener('pageshow', pageshowHandler);\r\n        window.addEventListener('pagehide', pagehideHandler);\r\n        this.cleanupHandlers.push(() => {\r\n            window.removeEventListener('pageshow', pageshowHandler);\r\n            window.removeEventListener('pagehide', pagehideHandler);\r\n        });\r\n        \r\n        // 5. Setup MutationObserver (with safety check)\r\n        this.setupMutationObserver();\r\n        \r\n        // 6. Generate initial content signature\r\n        this.updateContentSignature();\r\n    }\r\n\r\n    patchHistoryAPI() {\r\n        // Monkey patch pushState and replaceState\r\n        const originalPushState = history.pushState;\r\n        const originalReplaceState = history.replaceState;\r\n        \r\n        history.pushState = (...args) => {\r\n            originalPushState.apply(history, args);\r\n            this.handleURLChange('pushState');\r\n            // Emit custom event for other parts of the system\r\n            window.dispatchEvent(new CustomEvent('safesignal:navigate', {\r\n                detail: { source: 'pushState', url: window.location.href }\r\n            }));\r\n        };\r\n        \r\n        history.replaceState = (...args) => {\r\n            originalReplaceState.apply(history, args);\r\n            this.handleURLChange('replaceState');\r\n            // Emit custom event for other parts of the system\r\n            window.dispatchEvent(new CustomEvent('safesignal:navigate', {\r\n                detail: { source: 'replaceState', url: window.location.href }\r\n            }));\r\n        };\r\n        \r\n        // Store original functions for cleanup\r\n        this.cleanupHandlers.push(() => {\r\n            history.pushState = originalPushState;\r\n            history.replaceState = originalReplaceState;\r\n        });\r\n        \r\n        console.log('SafeSignal: History API patched for SPA detection');\r\n    }\r\n\r\n    handleURLChange(source) {\r\n        const newUrl = window.location.href;\r\n        if (newUrl !== this.currentUrl) {\r\n            console.log(`SafeSignal: URL changed (${source}):`, this.currentUrl, '→', newUrl);\r\n            this.currentUrl = newUrl;\r\n            \r\n            // Reset signature since we're on a new URL\r\n            this.currentSignature = null;\r\n            this.sessionUpdateCounts.clear();\r\n            \r\n            // Trigger page check with debounce\r\n            this.debouncedPageCheck('url_change');\r\n        }\r\n    }\r\n\r\n    setupMutationObserver() {\r\n        // Safety check: ensure document.body exists\r\n        if (!document.body) {\r\n            console.log('SafeSignal: document.body not ready, will retry after DOMContentLoaded');\r\n            const retryHandler = () => {\r\n                if (document.body) {\r\n                    this.setupMutationObserver();\r\n                }\r\n            };\r\n            document.addEventListener('DOMContentLoaded', retryHandler, { once: true });\r\n            return;\r\n        }\r\n\r\n        // Watch for DOM changes that might indicate content updates\r\n        this.mutationObserver = new MutationObserver((mutations) => {\r\n            this.handleDOMChanges(mutations);\r\n        });\r\n\r\n        // Start observing - FIXED: removed characterData to reduce chattiness\r\n        this.mutationObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributes: false // Skip attribute changes to reduce noise\r\n            // Removed characterData: true to reduce performance impact\r\n        });\r\n        \r\n        console.log('SafeSignal: MutationObserver active');\r\n    }\r\n\r\n    handleDOMChanges(mutations) {\r\n        // Filter out obviously noisy changes\r\n        const significantMutations = mutations.filter(mutation => {\r\n            const target = mutation.target;\r\n            \r\n            // Skip changes in known noisy elements\r\n            if (this.isNoisyElement(target)) {\r\n                this.trackNoisyUpdate(target);\r\n                return false;\r\n            }\r\n            \r\n            // Skip changes in form inputs (contenteditable, textarea, input)\r\n            if (target.isContentEditable || \r\n                target.tagName === 'TEXTAREA' || \r\n                target.tagName === 'INPUT') {\r\n                return false;\r\n            }\r\n            \r\n            // Skip very small additions (likely insignificant)\r\n            if (mutation.type === 'childList' && \r\n                mutation.addedNodes.length === 1 &&\r\n                mutation.addedNodes[0].nodeType === Node.TEXT_NODE &&\r\n                mutation.addedNodes[0].textContent.trim().length < 20) {\r\n                return false;\r\n            }\r\n            \r\n            return true;\r\n        });\r\n\r\n        if (significantMutations.length > 0) {\r\n            // Debounced content change check - FIXED: separate timer\r\n            this.debouncedContentCheck();\r\n        }\r\n    }\r\n\r\n    isNoisyElement(element) {\r\n        if (!element || !element.closest) return false;\r\n        \r\n        // FIXED: Use curated token list instead of overbroad substring matching\r\n        const noisyTokens = new Set([\r\n            'ad', 'ads', 'advert', 'advertisement', 'sponsored', 'sponsor',\r\n            'promo', 'promotion', 'banner', 'popup', 'modal', 'overlay',\r\n            'carousel', 'slider', 'ticker', 'widget', 'sidebar',\r\n            'chat', 'live-chat', 'notification', 'toast', 'snackbar'\r\n        ]);\r\n        \r\n        // Check element's own classes\r\n        if (element.classList) {\r\n            for (const className of element.classList) {\r\n                if (noisyTokens.has(className.toLowerCase())) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Check element's ID\r\n        if (element.id) {\r\n            const id = element.id.toLowerCase();\r\n            if (noisyTokens.has(id) || id.includes('google_ads') || id.includes('adsystem')) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        // Check parent elements for noisy containers\r\n        try {\r\n            const noisySelectors = [\r\n                '[class*=\"google_ads\"]', '[id*=\"google_ads\"]',\r\n                '[class*=\"adsystem\"]', '[id*=\"adsystem\"]',\r\n                'iframe[src*=\"doubleclick\"]', 'iframe[src*=\"googlesyndication\"]'\r\n            ];\r\n            \r\n            return noisySelectors.some(selector => {\r\n                try {\r\n                    return element.closest(selector) !== null;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n            });\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    trackNoisyUpdate(element) {\r\n        // Track updates per element to identify truly noisy ones\r\n        const elementKey = this.getElementKey(element);\r\n        const count = this.sessionUpdateCounts.get(elementKey) || 0;\r\n        this.sessionUpdateCounts.set(elementKey, count + 1);\r\n        \r\n        // Log elements that update more than 5 times per minute\r\n        if (count > 5) {\r\n            console.log('SafeSignal: Ignoring noisy element:', elementKey, 'updates:', count);\r\n        }\r\n    }\r\n\r\n    getElementKey(element) {\r\n        // Create a simple key for tracking element updates\r\n        const tag = element.tagName || 'TEXT';\r\n        const id = element.id || '';\r\n        const className = element.className || '';\r\n        return `${tag}#${id}.${className}`.substring(0, 50);\r\n    }\r\n\r\n    debouncedPageCheck(reason) {\r\n        // FIXED: Use separate timer for page checks\r\n        clearTimeout(this.pageDebounceTimer);\r\n        this.pageDebounceTimer = setTimeout(() => {\r\n            this.checkIfPageChanged(reason);\r\n        }, 800); // 800ms debounce\r\n    }\r\n\r\n    debouncedContentCheck() {\r\n        // FIXED: Use separate timer for content checks\r\n        clearTimeout(this.contentDebounceTimer);\r\n        this.contentDebounceTimer = setTimeout(() => {\r\n            this.checkIfContentChanged('content_mutation');\r\n        }, 500); // 500ms debounce for content\r\n    }\r\n\r\n    async checkIfPageChanged(reason) {\r\n        console.log(`SafeSignal: Checking page change (${reason})`);\r\n        \r\n        // Always recheck on URL changes\r\n        if (reason === 'url_change' || reason === 'initial_load') {\r\n            this.updateContentSignature();\r\n            await this.performPageAnalysis(reason);\r\n            return;\r\n        }\r\n        \r\n        // For other reasons, check cooldown\r\n        const now = Date.now();\r\n        const timeSinceLastCheck = now - this.lastCheck;\r\n        const origin = this.getOriginKey();\r\n        \r\n        if (timeSinceLastCheck < this.checkCooldown) {\r\n            console.log(`SafeSignal: Skipping check, cooldown active (${Math.round((this.checkCooldown - timeSinceLastCheck) / 1000)}s remaining)`);\r\n            return;\r\n        }\r\n        \r\n        this.updateContentSignature();\r\n        await this.performPageAnalysis(reason);\r\n    }\r\n\r\n    async checkIfContentChanged(reason) {\r\n        const newSignature = this.generateContentSignature();\r\n        \r\n        if (newSignature !== this.currentSignature) {\r\n            console.log('SafeSignal: Content signature changed:', this.currentSignature, '→', newSignature);\r\n            this.currentSignature = newSignature;\r\n            \r\n            // Check cooldown before analysis\r\n            const now = Date.now();\r\n            const timeSinceLastCheck = now - this.lastCheck;\r\n            \r\n            if (timeSinceLastCheck >= this.checkCooldown) {\r\n                await this.performPageAnalysis(reason);\r\n            } else {\r\n                console.log('SafeSignal: Content changed but cooldown active');\r\n            }\r\n        }\r\n    }\r\n\r\n    generateContentSignature() {\r\n        // Find main content area\r\n        const mainContentEl = this.findMainContentElement();\r\n        if (!mainContentEl) {\r\n            return 'no-content';\r\n        }\r\n\r\n        const text = mainContentEl.textContent || '';\r\n        const len = text.length;\r\n        \r\n        // Skip if content is too small\r\n        if (len < 800) {\r\n            return 'content-too-small';\r\n        }\r\n\r\n        // PERFORMANCE: Check if length changed significantly before expensive operations\r\n        if (this.currentSignature) {\r\n            const prevLen = parseInt(this.currentSignature.split('|')[0], 10);\r\n            if (Math.abs(len - prevLen) < 50) { // Less than 50 chars changed, probably not significant\r\n                return this.currentSignature;\r\n            }\r\n        }\r\n\r\n        // Create signature from content characteristics\r\n        const first1000 = text.substring(0, 1000);\r\n        const last1000 = text.substring(Math.max(0, len - 1000));\r\n        \r\n        // PERFORMANCE: Cap link count to avoid expensive queries on huge DOMs\r\n        const linkCount = Math.min(mainContentEl.querySelectorAll('a').length, 500);\r\n        \r\n        // Simple hash function (CRC32 would be better but this works for demo)\r\n        const h1 = this.simpleHash(first1000);\r\n        const h2 = this.simpleHash(last1000);\r\n        \r\n        const signature = `${len}|${h1}|${h2}|${linkCount}`;\r\n        return signature;\r\n    }\r\n\r\n    findMainContentElement() {\r\n        // Try to find the main content area using common selectors\r\n        const selectors = [\r\n            '[role=\"main\"]',\r\n            'main',\r\n            'article',\r\n            '.main-content',\r\n            '#main-content',\r\n            '.content',\r\n            '#content'\r\n        ];\r\n\r\n        for (const selector of selectors) {\r\n            const el = document.querySelector(selector);\r\n            if (el && el.textContent.length >= 800) {\r\n                return el;\r\n            }\r\n        }\r\n\r\n        // Fallback: find largest text container\r\n        const candidates = Array.from(document.querySelectorAll('div')).filter(div => {\r\n            const textLen = div.textContent.length;\r\n            return textLen >= 800 && !this.isNoisyElement(div);\r\n        });\r\n\r\n        if (candidates.length === 0) return document.body;\r\n\r\n        // Return the element with the most text content\r\n        return candidates.reduce((largest, current) => {\r\n            return current.textContent.length > largest.textContent.length ? current : largest;\r\n        });\r\n    }\r\n\r\n    simpleHash(str) {\r\n        let hash = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const char = str.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + char;\r\n            hash = hash & hash; // Convert to 32-bit integer\r\n        }\r\n        return Math.abs(hash);\r\n    }\r\n\r\n    updateContentSignature() {\r\n        this.currentSignature = this.generateContentSignature();\r\n        console.log('SafeSignal: Content signature updated:', this.currentSignature);\r\n    }\r\n\r\n    getOriginKey() {\r\n        return `${window.location.protocol}//${window.location.host}`;\r\n    }\r\n\r\n    async performPageAnalysis(reason) {\r\n        this.lastCheck = Date.now();\r\n        console.log(`SafeSignal: Performing page analysis (${reason})`);\r\n        \r\n        // Set to checking state\r\n        this.setState('checking');\r\n        \r\n        // Simulate analysis delay\r\n        await this.simulateAnalysis();\r\n        \r\n        // For demo: different outcomes based on URL path and content\r\n        this.determinePageState();\r\n    }\r\n\r\n    async simulateAnalysis() {\r\n        // Simulate network call delay\r\n        const delay = Math.random() * 1000 + 500; // 500-1500ms\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n\r\n    determinePageState() {\r\n        const url = window.location.href.toLowerCase();\r\n        const hostname = window.location.hostname.toLowerCase();\r\n        const path = window.location.pathname.toLowerCase();\r\n        \r\n        // Demo logic based on URL characteristics\r\n        if (hostname.includes('google') || hostname.includes('wikipedia') || hostname.includes('github')) {\r\n            this.setState('ok');\r\n        } else if (path.includes('/login') || path.includes('/signin') || path.includes('/payment')) {\r\n            this.setState('warning');\r\n        } else if (url.includes('?utm_') || path.includes('/ad/') || hostname.includes('doubleclick')) {\r\n            this.setState('warning');\r\n        } else if (hostname.includes('malware') || hostname.includes('phishing') || path.includes('/scam')) {\r\n            this.setState('danger');\r\n        } else {\r\n            // Random for demo\r\n            const states = ['ok', 'warning', 'danger'];\r\n            const weights = [0.7, 0.25, 0.05]; // Mostly OK, some warnings, few dangers\r\n            const randomState = this.weightedRandomChoice(states, weights);\r\n            this.setState(randomState);\r\n        }\r\n    }\r\n\r\n    weightedRandomChoice(choices, weights) {\r\n        const random = Math.random();\r\n        let weightSum = 0;\r\n        \r\n        for (let i = 0; i < choices.length; i++) {\r\n            weightSum += weights[i];\r\n            if (random <= weightSum) {\r\n                return choices[i];\r\n            }\r\n        }\r\n        \r\n        return choices[choices.length - 1];\r\n    }\r\n\r\n    // === EXISTING BADGE CODE (unchanged) ===\r\n\r\n    createShadowDOMBadge() {\r\n        this.badgeContainer = document.createElement('div');\r\n        this.badgeContainer.id = 'safesignal-badge-container';\r\n        this.shadowRoot = this.badgeContainer.attachShadow({ mode: 'closed' });\r\n        \r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    all: initial;\r\n                }\r\n                \r\n                .badge {\r\n                    position: fixed;\r\n                    width: 3rem;\r\n                    height: 3rem;\r\n                    border-radius: 50%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\r\n                    font-size: 1.25rem;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    user-select: none;\r\n                    z-index: 2147483647;\r\n                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n                    transition: all 0.2s ease;\r\n                    transform: scale(1);\r\n                    backdrop-filter: blur(8px);\r\n                }\r\n                \r\n                .badge-status {\r\n                    position: absolute;\r\n                    bottom: -40px;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    background: rgba(0, 0, 0, 0.9);\r\n                    color: white;\r\n                    padding: 8px 12px;\r\n                    border-radius: 6px;\r\n                    font-size: 0.75rem;\r\n                    white-space: nowrap;\r\n                    pointer-events: none;\r\n                    opacity: 0;\r\n                    transition: opacity 0.2s ease;\r\n                    z-index: 2147483648;\r\n                }\r\n                \r\n                .badge.show-status .badge-status {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.05);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 2px 6px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .badge:active {\r\n                    transform: scale(0.95);\r\n                }\r\n                \r\n                .badge.checking {\r\n                    background: linear-gradient(135deg, #6b7280 0%, #9ca3af 100%);\r\n                    color: white;\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                \r\n                .badge.ok {\r\n                    background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.warning {\r\n                    background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.danger {\r\n                    background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .position-bottom-right {\r\n                    bottom: 1.25rem;\r\n                    right: 1.25rem;\r\n                }\r\n                \r\n                .position-bottom-left {\r\n                    bottom: 1.25rem;\r\n                    left: 1.25rem;\r\n                }\r\n                \r\n                .position-top-right {\r\n                    top: 1.25rem;\r\n                    right: 1.25rem;\r\n                }\r\n                \r\n                .position-top-left {\r\n                    top: 1.25rem;\r\n                    left: 1.25rem;\r\n                }\r\n                \r\n                .position-mid-right {\r\n                    top: 50%;\r\n                    right: 1.25rem;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-mid-left {\r\n                    top: 50%;\r\n                    left: 1.25rem;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-mid-right:hover,\r\n                .position-mid-left:hover {\r\n                    transform: translateY(-50%) scale(1.05);\r\n                }\r\n                \r\n                .position-mid-right:active,\r\n                .position-mid-left:active {\r\n                    transform: translateY(-50%) scale(0.95);\r\n                }\r\n                \r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; }\r\n                    50% { opacity: 0.7; }\r\n                }\r\n                \r\n                .nudged {\r\n                    transform: translate(-16px, -16px);\r\n                }\r\n                \r\n                .position-mid-right.nudged,\r\n                .position-mid-left.nudged {\r\n                    transform: translateY(-50%) translate(-16px, -16px);\r\n                }\r\n                \r\n                .badge:focus {\r\n                    outline: 2px solid #3b82f6;\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .badge.hidden {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            \r\n            <div class=\"badge checking position-bottom-right\" \r\n                 role=\"button\" \r\n                 tabindex=\"0\"\r\n                 aria-label=\"SafeSignal security indicator\"\r\n                 aria-live=\"polite\"\r\n                 title=\"SafeSignal - Checking page safety\">\r\n                <span class=\"badge-icon\">S</span>\r\n                <div class=\"badge-status\" role=\"status\" aria-live=\"polite\">Checking...</div>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(this.badgeContainer);\r\n        this.handleCollisionDetection();\r\n    }\r\n\r\n    attachEventListeners() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        badge.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.handleBadgeClick();\r\n        });\r\n        \r\n        badge.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.handleBadgeClick();\r\n            }\r\n        });\r\n        \r\n        window.addEventListener('resize', () => {\r\n            this.handleCollisionDetection();\r\n        });\r\n    }\r\n\r\n    handleBadgeClick() {\r\n        // FIXED: Use non-blocking status display instead of alert()\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        const stateMessages = {\r\n            checking: 'Analyzing page...',\r\n            ok: 'Page appears safe ✅',\r\n            warning: 'Exercise caution ⚠️',\r\n            danger: 'Risk signals detected ❌'\r\n        };\r\n        \r\n        const message = stateMessages[this.currentState] || 'SafeSignal active';\r\n        const details = `\\nURL: ${this.currentUrl.substring(0, 50)}...\\nLast check: ${new Date(this.lastCheck).toLocaleTimeString()}`;\r\n        \r\n        statusEl.textContent = message;\r\n        badge.classList.add('show-status');\r\n        \r\n        // Hide status after 3 seconds\r\n        setTimeout(() => {\r\n            badge.classList.remove('show-status');\r\n        }, 3000);\r\n        \r\n        console.log('SafeSignal: Badge clicked, current state:', this.currentState, details);\r\n    }\r\n\r\n    setState(newState, options = {}) {\r\n        if (!['checking', 'ok', 'warning', 'danger'].includes(newState)) {\r\n            console.warn('SafeSignal: Invalid state:', newState);\r\n            return;\r\n        }\r\n\r\n        this.currentState = newState;\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const icon = this.shadowRoot.querySelector('.badge-icon');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        badge.classList.remove('checking', 'ok', 'warning', 'danger');\r\n        badge.classList.add(newState);\r\n        \r\n        const stateConfig = {\r\n            checking: { \r\n                icon: 'S', \r\n                label: 'SafeSignal - Checking page safety', \r\n                title: 'SafeSignal - Checking page safety',\r\n                status: 'Checking...'\r\n            },\r\n            ok: { \r\n                icon: '✓', \r\n                label: 'SafeSignal - Page appears safe', \r\n                title: 'SafeSignal - Page appears safe',\r\n                status: 'Safe'\r\n            },\r\n            warning: { \r\n                icon: '⚠', \r\n                label: 'SafeSignal - Exercise caution', \r\n                title: 'SafeSignal - Exercise caution',\r\n                status: 'Caution'\r\n            },\r\n            danger: { \r\n                icon: '⚠', \r\n                label: 'SafeSignal - Risk signals detected', \r\n                title: 'SafeSignal - Risk signals detected',\r\n                status: 'Risk detected'\r\n            }\r\n        };\r\n        \r\n        const config = stateConfig[newState];\r\n        icon.textContent = config.icon;\r\n        badge.setAttribute('aria-label', config.label);\r\n        badge.setAttribute('title', config.title);\r\n        statusEl.textContent = config.status;\r\n        \r\n        console.log('SafeSignal: State changed to:', newState);\r\n    }\r\n\r\n    setPosition(position) {\r\n        const validPositions = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'mid-right', 'mid-left'];\r\n        \r\n        if (!validPositions.includes(position)) {\r\n            console.warn('SafeSignal: Invalid position:', position);\r\n            return;\r\n        }\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        validPositions.forEach(pos => {\r\n            badge.classList.remove(`position-${pos}`);\r\n        });\r\n        \r\n        badge.classList.add(`position-${position}`);\r\n        this.position = position;\r\n        this.handleCollisionDetection();\r\n        \r\n        console.log('SafeSignal: Position changed to:', position);\r\n    }\r\n\r\n    hide() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.add('hidden');\r\n        this.isVisible = false;\r\n    }\r\n\r\n    show() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.remove('hidden');\r\n        this.isVisible = true;\r\n    }\r\n\r\n    handleCollisionDetection() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const rect = badge.getBoundingClientRect();\r\n        \r\n        const elementsAtPosition = document.elementsFromPoint(\r\n            rect.left + rect.width / 2, \r\n            rect.top + rect.height / 2\r\n        ).filter(el => el !== this.badgeContainer);\r\n        \r\n        const hasCollision = elementsAtPosition.some(el => {\r\n            const style = window.getComputedStyle(el);\r\n            return style.position === 'fixed' && \r\n                   style.zIndex !== 'auto' && \r\n                   parseInt(style.zIndex) > 1000;\r\n        });\r\n        \r\n        if (hasCollision) {\r\n            badge.classList.add('nudged');\r\n            console.log('SafeSignal: Collision detected, badge nudged');\r\n        } else {\r\n            badge.classList.remove('nudged');\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        // Clean up SPA detection\r\n        if (this.mutationObserver) {\r\n            this.mutationObserver.disconnect();\r\n            this.mutationObserver = null;\r\n        }\r\n        \r\n        // FIXED: Clean up both timers\r\n        if (this.pageDebounceTimer) {\r\n            clearTimeout(this.pageDebounceTimer);\r\n            this.pageDebounceTimer = null;\r\n        }\r\n        \r\n        if (this.contentDebounceTimer) {\r\n            clearTimeout(this.contentDebounceTimer);\r\n            this.contentDebounceTimer = null;\r\n        }\r\n        \r\n        // Clean up all event listeners and patches\r\n        this.cleanupHandlers.forEach(cleanup => {\r\n            try {\r\n                cleanup();\r\n            } catch (e) {\r\n                console.warn('SafeSignal: Cleanup error:', e);\r\n            }\r\n        });\r\n        this.cleanupHandlers = [];\r\n        \r\n        // Clean up badge\r\n        if (this.badgeContainer && this.badgeContainer.parentNode) {\r\n            this.badgeContainer.parentNode.removeChild(this.badgeContainer);\r\n        }\r\n        \r\n        console.log('SafeSignal: Badge destroyed, SPA detection cleaned up');\r\n    }\r\n}\r\n\r\n// Initialize badge when DOM is ready\r\nlet safesignalBadge = null;\r\n\r\nfunction initializeBadge() {\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n    \r\n    safesignalBadge = new SafeSignalBadge();\r\n}\r\n\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeBadge);\r\n} else {\r\n    initializeBadge();\r\n}\r\n\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n});\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.SafeSignalBadge = SafeSignalBadge;\r\n}"],"names":[],"sourceRoot":""}