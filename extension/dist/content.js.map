{"version":3,"file":"content.js","mappingssources":["webpack://safesignal-extension/./src/content/content.js"],"sourcesContent":["// SafeSignal Content Script - Enhanced Badge Implementation\r\n// Injects a floating badge on web pages to show safety status\r\n\r\n// ---- VERSION STAMP FOR DEBUGGING ----\r\nconst SAFESIGNAL_BUILD = 'content-2025-09-28-16:45'; // bump each build\r\nconsole.info('[SafeSignal] build:', SAFESIGNAL_BUILD);\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        this.shadowRoot = null;\r\n        this.badgeContainer = null;\r\n        this.currentState = 'checking';\r\n        this.positionState = { anchor: 'bottom-right', offsetX: 0, offsetY: 0 };\r\n        \r\n        // Positioning helper (will be initialized after shadow root)\r\n        this.positioning = null;\r\n        \r\n        // SPA Detection properties\r\n        this.currentUrl = window.location.href;\r\n        this.currentSignature = null;\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.lastCheckByUrl = new Map(); // Per-URL cooldown tracking\r\n        this.checkCooldown = 30 * 60 * 1000; // 30 minutes\r\n        this.cleanupHandlers = [];\r\n        this.pageHidden = false;\r\n        \r\n        // UI state\r\n        this.isMenuOpen = false;\r\n        this.proximityCheckInterval = null;\r\n        this.userPreferences = {\r\n            positioning: { anchor: 'bottom-right', offsetX: 0, offsetY: 0 },\r\n            hiddenSites: new Set()\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        if (this.shouldSkipInjection()) {\r\n            return;\r\n        }\r\n\r\n        await this.loadUserPreferences();\r\n        \r\n        if (this.isSiteHidden()) {\r\n            console.log('SafeSignal: Badge hidden on this site per user preference');\r\n            return;\r\n        }\r\n\r\n        this.createShadowDOMBadge();\r\n        this.attachEventListeners();\r\n        \r\n        // Initialize positioning helper after shadow root AND event listeners are created\r\n        this.positioning = new SafeSignalBadgePositioning(this.shadowRoot);\r\n        this.setupSPADetection();\r\n        \r\n        // Apply saved positioning\r\n        this.applyPositioning(this.userPreferences.positioning);\r\n        \r\n        // Position status bubble correctly on first paint\r\n        this.updateStatusBubblePosition();\r\n        \r\n        this.checkIfPageChanged('initial_load');\r\n        \r\n        console.log('SafeSignal: Badge active');\r\n    }\r\n\r\n    shouldSkipInjection() {\r\n        const protocol = window.location.protocol;\r\n        \r\n        if (protocol === 'chrome:' || \r\n            protocol === 'chrome-extension:' ||\r\n            protocol === 'moz-extension:' ||\r\n            protocol === 'about:') {\r\n            return true;\r\n        }\r\n        \r\n        if (window.top !== window) {\r\n            console.log('SafeSignal: Skipping injection in embedded frame');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    // === UTILITY METHODS ===\r\n    \r\n    getOriginKey() {\r\n        return `${window.location.protocol}//${window.location.host}`;\r\n    }\r\n\r\n    // === ENHANCED POSITIONING SYSTEM ===\r\n    \r\n    getBadgeRect() {\r\n        const el = this.shadowRoot?.querySelector('.badge');\r\n        return el ? el.getBoundingClientRect() : { width: 48, height: 48, left: 0, top: 0 };\r\n    }\r\n    \r\n    getAnchorPositions() {\r\n        const padding = 20;\r\n        const systemBarHeight = 100;\r\n        const viewportWidth = window.innerWidth;\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        return {\r\n            'top-left': { x: padding, y: padding },\r\n            'top-right': { x: viewportWidth - padding, y: padding },\r\n            'mid-left': { x: padding, y: viewportHeight / 2 },\r\n            'mid-right': { x: viewportWidth - padding, y: viewportHeight / 2 },\r\n            'bottom-left': { x: padding, y: viewportHeight - systemBarHeight },\r\n            'bottom-right': { x: viewportWidth - padding, y: viewportHeight - systemBarHeight }\r\n        };\r\n    }\r\n\r\n    applyPositioning(positioning) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const { anchor, offsetX = 0, offsetY = 0 } = positioning;\r\n        const anchorPositions = this.getAnchorPositions();\r\n        const anchorPos = anchorPositions[anchor] || anchorPositions['bottom-right'];\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const { width: badgeW, height: badgeH } = this.getBadgeRect();\r\n        \r\n        // Calculate final position\r\n        let finalX = anchorPos.x + offsetX;\r\n        let finalY = anchorPos.y + offsetY;\r\n        \r\n        // Adjust for badge size based on anchor\r\n        if (anchor.includes('right')) finalX -= badgeW;\r\n        if (anchor.includes('bottom')) finalY -= badgeH;\r\n        if (anchor.includes('mid')) {\r\n            if (anchor.includes('left') || anchor.includes('right')) {\r\n                finalY -= badgeH / 2;\r\n            }\r\n        }\r\n        \r\n        // Apply safe bounds with more margin\r\n        finalX = Math.max(16, Math.min(finalX, window.innerWidth - badgeW - 16));\r\n        finalY = Math.max(16, Math.min(finalY, window.innerHeight - badgeH - 16));\r\n        \r\n        // Apply position\r\n        badge.style.position = 'fixed';\r\n        badge.style.left = `${finalX}px`;\r\n        badge.style.top = `${finalY}px`;\r\n        badge.style.right = 'auto';\r\n        badge.style.bottom = 'auto';\r\n        \r\n        // Update internal state\r\n        this.positionState = { anchor, offsetX, offsetY };\r\n        \r\n        // Update active state in UI\r\n        this.updatePositionGridUI(anchor);\r\n        \r\n        console.log('SafeSignal: Applied positioning:', { anchor, offsetX, offsetY, finalX, finalY });\r\n    }\r\n\r\n    updatePositionGridUI(activeAnchor) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const positionOptions = this.shadowRoot.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.classList.remove('active');\r\n            if (option.dataset.position === activeAnchor) {\r\n                option.classList.add('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    // === STORAGE & PREFERENCES ===\r\n\r\n    async loadUserPreferences() {\r\n        try {\r\n            const origin = this.getOriginKey();\r\n            \r\n            // Safe cross-browser storage check with runtime validation\r\n            const storage =\r\n                (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.id && chrome.storage?.sync) ||\r\n                (typeof browser !== 'undefined' && browser.storage?.sync);\r\n            \r\n            if (!storage) {\r\n                console.warn('SafeSignal: Browser storage not available or extension context invalidated');\r\n                return;\r\n            }\r\n            \r\n            const result = await storage.get(['safesignal_positioning', 'safesignal_hidden_sites']);\r\n            \r\n            const positioningData = result.safesignal_positioning || {};\r\n            if (positioningData[origin]) {\r\n                this.userPreferences.positioning = positioningData[origin];\r\n            }\r\n            \r\n            const hiddenSites = new Set(result.safesignal_hidden_sites || []);\r\n            this.userPreferences.hiddenSites = hiddenSites;\r\n            \r\n            console.log('SafeSignal: Loaded preferences:', this.userPreferences);\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not load preferences (extension context may be invalidated):', e);\r\n        }\r\n    }\r\n\r\n    async savePositioningPreference(positioning) {\r\n        try {\r\n            // Safe cross-browser storage check with runtime validation\r\n            const storage =\r\n                (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.id && chrome.storage?.sync) ||\r\n                (typeof browser !== 'undefined' && browser.storage?.sync);\r\n            \r\n            if (!storage) {\r\n                console.warn('SafeSignal: Browser storage not available or extension context invalidated');\r\n                return;\r\n            }\r\n            \r\n            const result = await storage.get(['safesignal_positioning']);\r\n            const positioningData = result.safesignal_positioning || {};\r\n            \r\n            const origin = this.getOriginKey();\r\n            positioningData[origin] = positioning;\r\n            \r\n            await storage.set({\r\n                safesignal_positioning: positioningData\r\n            });\r\n            \r\n            this.userPreferences.positioning = positioning;\r\n            console.log('SafeSignal: Saved positioning preference:', positioning, 'for', origin);\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not save positioning preference (extension context may be invalidated):', e);\r\n        }\r\n    }\r\n\r\n    isSiteHidden() {\r\n        const origin = this.getOriginKey();\r\n        return this.userPreferences.hiddenSites.has(origin);\r\n    }\r\n\r\n    // === BADGE CREATION ===\r\n\r\n    createShadowDOMBadge() {\r\n        // Mount to documentElement to avoid body transform issues\r\n        this.badgeContainer = document.createElement('div');\r\n        this.badgeContainer.id = 'safesignal-badge-container';\r\n        this.badgeContainer.setAttribute('data-safesignal-build', SAFESIGNAL_BUILD); // Debug stamp\r\n        this.shadowRoot = this.badgeContainer.attachShadow({ mode: 'open' });\r\n        \r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    all: initial;\r\n                }\r\n                \r\n                .badge {\r\n                    position: fixed;\r\n                    width: 3rem;\r\n                    height: 3rem;\r\n                    border-radius: 50%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\r\n                    font-size: 1.25rem;\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    user-select: none;\r\n                    z-index: 999999;\r\n                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n                    transition: all 0.2s ease;\r\n                    transform: scale(1);\r\n                    touch-action: manipulation;\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.05);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 2px 6px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .badge.checking {\r\n                    background: linear-gradient(135deg, #6b7280 0%, #9ca3af 100%);\r\n                    color: white;\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                \r\n                .badge.ok {\r\n                    background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.warning {\r\n                    background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.danger {\r\n                    background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; }\r\n                    50% { opacity: 0.7; }\r\n                }\r\n                \r\n                .badge:focus {\r\n                    outline: 3px solid #3b82f6;\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                .badge.hidden {\r\n                    display: none;\r\n                }\r\n                \r\n                @media (prefers-reduced-motion: reduce) {\r\n                    .badge {\r\n                        transition: none;\r\n                        animation: none !important;\r\n                    }\r\n                }\r\n                \r\n                .badge-status {\r\n                    position: absolute;\r\n                    left: 50%;\r\n                    transform: translateX(-50%);\r\n                    background: rgba(0, 0, 0, 0.9);\r\n                    color: white;\r\n                    padding: 8px 12px;\r\n                    border-radius: 8px;\r\n                    font-size: 0.75rem;\r\n                    pointer-events: none;\r\n                    opacity: 0;\r\n                    transition: opacity 0.2s ease;\r\n                    z-index: 1000000;\r\n                    max-width: 200px;\r\n                    word-wrap: break-word;\r\n                    white-space: normal;\r\n                    text-align: center;\r\n                    line-height: 1.2;\r\n                }\r\n                \r\n                .badge.bottom-positioned .badge-status {\r\n                    bottom: 100%;\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                .badge.top-positioned .badge-status {\r\n                    top: 100%;\r\n                    margin-top: 8px;\r\n                }\r\n                \r\n                .badge.show-status .badge-status {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .menu-button {\r\n                    position: absolute;\r\n                    top: -8px;\r\n                    right: -8px;\r\n                    width: 20px;\r\n                    height: 20px;\r\n                    border-radius: 50%;\r\n                    background: rgba(0, 0, 0, 0.7);\r\n                    color: white;\r\n                    border: none;\r\n                    font-size: 12px;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    opacity: 0;\r\n                    transition: opacity 0.2s ease;\r\n                    z-index: 1000001;\r\n                }\r\n                \r\n                .badge:hover .menu-button,\r\n                .badge:focus .menu-button {\r\n                    opacity: 1;\r\n                }\r\n                \r\n                .menu-button:hover {\r\n                    background: rgba(0, 0, 0, 0.9);\r\n                    transform: scale(1.1);\r\n                }\r\n                \r\n                .badge-menu {\r\n                    position: fixed;\r\n                    background: white;\r\n                    border: 1px solid #e1e5e9;\r\n                    border-radius: 8px;\r\n                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n                    padding: 12px;\r\n                    min-width: 140px;\r\n                    z-index: 2147483646;\r\n                    contain: paint;\r\n                    opacity: 0;\r\n                    visibility: hidden;\r\n                    transition: opacity 0.2s ease, visibility 0.2s ease;\r\n                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\r\n                }\r\n                \r\n                .badge-menu.show {\r\n                    opacity: 1;\r\n                    visibility: visible;\r\n                }\r\n                \r\n                .menu-section {\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                .menu-section:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n                \r\n                .menu-label {\r\n                    font-size: 0.75rem;\r\n                    font-weight: 600;\r\n                    color: #6b7280;\r\n                    margin-bottom: 6px;\r\n                    text-transform: uppercase;\r\n                    letter-spacing: 0.025em;\r\n                }\r\n                \r\n                .position-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr);\r\n                    gap: 4px;\r\n                    width: 60px;\r\n                    height: 48px;\r\n                }\r\n                \r\n                .position-option {\r\n                    width: 16px;\r\n                    height: 12px;\r\n                    border: 1px solid #d1d5db;\r\n                    border-radius: 2px;\r\n                    background: #f9fafb;\r\n                    cursor: pointer;\r\n                    transition: all 0.1s ease;\r\n                }\r\n                \r\n                .position-option:hover {\r\n                    background: #e5e7eb;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .position-option.active {\r\n                    background: #3b82f6;\r\n                    border-color: #2563eb;\r\n                }\r\n                \r\n                .menu-item {\r\n                    width: 100%;\r\n                    padding: 8px 12px;\r\n                    border: none;\r\n                    background: none;\r\n                    text-align: left;\r\n                    font-size: 0.875rem;\r\n                    color: #374151;\r\n                    cursor: pointer;\r\n                    border-radius: 4px;\r\n                    transition: background-color 0.1s ease;\r\n                }\r\n                \r\n                .menu-item:hover {\r\n                    background: #f3f4f6;\r\n                }\r\n                \r\n                .menu-item.danger {\r\n                    color: #dc2626;\r\n                }\r\n                \r\n                .menu-item.danger:hover {\r\n                    background: #fef2f2;\r\n                }\r\n            </style>\r\n            \r\n            <div class=\"badge\" role=\"button\" tabindex=\"0\" aria-label=\"SafeSignal - Page safety indicator\">\r\n                <span class=\"badge-icon\">S</span>\r\n                <div class=\"badge-status\" role=\"status\" aria-live=\"polite\">Checking...</div>\r\n                \r\n                <button class=\"menu-button\" \r\n                        type=\"button\"\r\n                        title=\"Move badge\"\r\n                        aria-label=\"Move badge to different position\"\r\n                        aria-expanded=\"false\">⋯</button>\r\n                \r\n                <div class=\"badge-menu\" role=\"menu\" aria-label=\"Badge position options\">\r\n                    <div class=\"menu-section\">\r\n                        <div class=\"menu-label\">Move Badge</div>\r\n                        <div class=\"position-grid\" role=\"group\" aria-label=\"Position options\">\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"top-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Top Left\"\r\n                                    aria-label=\"Top left corner\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"top-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Top Right\"\r\n                                    aria-label=\"Top right corner\"></button>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"mid-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Middle Left\"\r\n                                    aria-label=\"Middle left side\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"mid-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Middle Right\"\r\n                                    aria-label=\"Middle right side\"></button>\r\n                            <button class=\"position-option\" \r\n                                    data-position=\"bottom-left\" \r\n                                    type=\"button\"\r\n                                    title=\"Bottom Left\"\r\n                                    aria-label=\"Bottom left corner\"></button>\r\n                            <div></div>\r\n                            <button class=\"position-option active\" \r\n                                    data-position=\"bottom-right\" \r\n                                    type=\"button\"\r\n                                    title=\"Bottom Right\"\r\n                                    aria-label=\"Move badge to bottom right\"></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        // Mount to documentElement to avoid body transform issues\r\n        document.documentElement.appendChild(this.badgeContainer);\r\n    }\r\n\r\n    attachEventListeners() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        \r\n        // Badge interactions\r\n        badge.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            if (!this.isMenuOpen) {\r\n                this.handleBadgeClick();\r\n            }\r\n        });\r\n        \r\n        // Keyboard navigation\r\n        badge.addEventListener('keydown', (e) => {\r\n            this.handleKeyboardNavigation(e);\r\n        });\r\n        \r\n        // Menu button\r\n        menuButton.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.toggleMenu();\r\n        });\r\n        \r\n        // Position options\r\n        const positionOptions = this.shadowRoot.querySelectorAll('.position-option');\r\n        positionOptions.forEach(option => {\r\n            option.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n                const anchor = option.dataset.position;\r\n                this.handlePositionSelect(anchor);\r\n            });\r\n        });\r\n        \r\n        // Close menu when clicking outside\r\n        const onDocClick = () => { \r\n            if (this.isMenuOpen) this.closeMenu(); \r\n        };\r\n        document.addEventListener('click', onDocClick);\r\n        this.cleanupHandlers.push(() => document.removeEventListener('click', onDocClick));\r\n        \r\n        // Prevent menu clicks from closing menu\r\n        menu.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n        });\r\n        \r\n        // Listen for custom events from portaled menu\r\n        document.addEventListener('safesignal-position-select', (e) => {\r\n            this.handlePositionSelect(e.detail.anchor);\r\n        });\r\n        \r\n        // Window resize handler with throttling\r\n        let resizeRaf = null;\r\n        const onResize = () => {\r\n            if (resizeRaf) return;\r\n            resizeRaf = requestAnimationFrame(() => {\r\n                resizeRaf = null;\r\n                this.applyPositioning(this.positionState);\r\n                this.updateStatusBubblePosition();\r\n                \r\n                // Reposition context buttons on resize\r\n                if (this.contextButtons.length > 0) {\r\n                    this.updateContextButtons();\r\n                }\r\n                \r\n                // Reposition menu if open\r\n                if (this.isMenuOpen) {\r\n                    this.positionMenu();\r\n                }\r\n            });\r\n        };\r\n        window.addEventListener('resize', onResize);\r\n        this.cleanupHandlers.push(() => window.removeEventListener('resize', onResize));\r\n        \r\n        // Listen to visual viewport changes (mobile keyboard)\r\n        if (window.visualViewport) {\r\n            const onViewportChange = () => {\r\n                if (this.isMenuOpen) {\r\n                    this.positionMenu();\r\n                }\r\n            };\r\n            window.visualViewport.addEventListener('resize', onViewportChange);\r\n            this.cleanupHandlers.push(() => \r\n                window.visualViewport?.removeEventListener('resize', onViewportChange)\r\n            );\r\n        }\r\n        \r\n        // Visibility change handler for performance\r\n        const onVisibilityChange = () => {\r\n            this.pageHidden = document.hidden;\r\n        };\r\n        document.addEventListener('visibilitychange', onVisibilityChange);\r\n        this.cleanupHandlers.push(() => document.removeEventListener('visibilitychange', onVisibilityChange));\r\n        \r\n        // Input proximity detection with proper cleanup tracking\r\n        this.proximityCheckInterval = setInterval(() => {\r\n            this.checkInputProximity();\r\n        }, 2000);\r\n        this.cleanupHandlers.push(() => {\r\n            if (this.proximityCheckInterval) {\r\n                clearInterval(this.proximityCheckInterval);\r\n                this.proximityCheckInterval = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    checkInputProximity() {\r\n        if (!this.shadowRoot || this.isMenuOpen) return;\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const rect = badge.getBoundingClientRect();\r\n        \r\n        // Check if badge overlaps with any input elements\r\n        const elementsNearby = document.elementsFromPoint(\r\n            rect.left + rect.width / 2,\r\n            rect.top + rect.height / 2\r\n        );\r\n        \r\n        const nearInput = elementsNearby.some(el => {\r\n            return el.tagName === 'INPUT' || \r\n                   el.tagName === 'TEXTAREA' || \r\n                   el.isContentEditable;\r\n        });\r\n        \r\n        if (nearInput) {\r\n            console.log('SafeSignal: Badge near input field');\r\n        }\r\n    }\r\n\r\n    updateStatusBubblePosition() {\r\n        const badge = this.shadowRoot?.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        const rect = badge.getBoundingClientRect();\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        // Remove existing positioning classes\r\n        badge.classList.remove('bottom-positioned', 'top-positioned');\r\n        \r\n        // If badge is in bottom half of screen, show status above\r\n        if (rect.bottom > viewportHeight * 0.6) {\r\n            badge.classList.add('bottom-positioned');\r\n        } else {\r\n            badge.classList.add('top-positioned');\r\n        }\r\n    }\r\n\r\n    handleBadgeClick() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        const stateMessages = {\r\n            checking: 'Analyzing page...',\r\n            ok: 'Page appears safe ✅',\r\n            warning: 'Exercise caution ⚠️',\r\n            danger: 'Risk signals detected ❌'\r\n        };\r\n        \r\n        const message = stateMessages[this.currentState] || 'SafeSignal active';\r\n        statusEl.textContent = message;\r\n        \r\n        // Update status bubble position before showing\r\n        this.updateStatusBubblePosition();\r\n        \r\n        badge.classList.add('show-status');\r\n        \r\n        setTimeout(() => {\r\n            badge.classList.remove('show-status');\r\n        }, 3000);\r\n        \r\n        console.log('SafeSignal: Badge clicked, current state:', this.currentState);\r\n    }\r\n\r\n    setState(newState, options = {}) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const icon = this.shadowRoot.querySelector('.badge-icon');\r\n        \r\n        // Remove existing state classes\r\n        badge.classList.remove('checking', 'ok', 'warning', 'danger');\r\n        \r\n        // Add new state\r\n        badge.classList.add(newState);\r\n        this.currentState = newState;\r\n        \r\n        // Update icon and aria-label\r\n        const states = {\r\n            checking: { icon: 'S', label: 'SafeSignal - Checking page safety' },\r\n            ok: { icon: '✓', label: 'SafeSignal - Page appears safe' },\r\n            warning: { icon: '⚠', label: 'SafeSignal - Exercise caution on this page' },\r\n            danger: { icon: '✗', label: 'SafeSignal - Risk signals detected on this page' }\r\n        };\r\n        \r\n        if (states[newState]) {\r\n            icon.textContent = states[newState].icon;\r\n            badge.setAttribute('aria-label', states[newState].label);\r\n        }\r\n        \r\n        console.log('SafeSignal: State changed to:', newState);\r\n    }\r\n\r\n    handleKeyboardNavigation(e) {\r\n        if (e.key === 'Enter' || e.key === ' ') {\r\n            e.preventDefault();\r\n            this.handleBadgeClick();\r\n        } else if (e.key === 'Escape' && this.isMenuOpen) {\r\n            this.closeMenu();\r\n        }\r\n    }\r\n\r\n    // === MENU SYSTEM ===\r\n\r\n    toggleMenu() {\r\n        if (this.isMenuOpen) {\r\n            this.closeMenu();\r\n        } else {\r\n            this.openMenu();\r\n        }\r\n    }\r\n\r\n    openMenu() {\r\n        if (!this.shadowRoot || this.isMenuOpen) return;\r\n        \r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n        \r\n        if (!menu) return;\r\n        \r\n        menu.classList.add('show');\r\n        menuButton.setAttribute('aria-expanded', 'true');\r\n        this.isMenuOpen = true;\r\n        this.positioning.activeMenuEl = menu; // Track active menu\r\n        \r\n        // Position menu relative to badge\r\n        this.positionMenu();\r\n        \r\n        console.log('SafeSignal: Menu opened');\r\n    }\r\n\r\n    closeMenu() {\r\n        if (!this.shadowRoot || !this.isMenuOpen) return;\r\n        \r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        const menuButton = this.shadowRoot.querySelector('.menu-button');\r\n        \r\n        if (!menu) return;\r\n        \r\n        menu.classList.remove('show');\r\n        menuButton.setAttribute('aria-expanded', 'false');\r\n        this.isMenuOpen = false;\r\n        this.positioning.activeMenuEl = null; // Clear active menu reference\r\n        \r\n        console.log('SafeSignal: Menu closed');\r\n    }\r\n\r\n    positionMenu() {\r\n        const menu = this.shadowRoot.querySelector('.badge-menu');\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        if (!menu || !badge) return;\r\n        \r\n        const badgeRect = badge.getBoundingClientRect();\r\n        const menuRect = menu.getBoundingClientRect();\r\n        const viewportWidth = window.innerWidth;\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        // Calculate preferred position (to the right of badge)\r\n        let left = badgeRect.right + 8;\r\n        let top = badgeRect.top;\r\n        \r\n        // Adjust if menu would go off-screen\r\n        if (left + menuRect.width > viewportWidth - 16) {\r\n            // Position to the left instead\r\n            left = badgeRect.left - menuRect.width - 8;\r\n        }\r\n        \r\n        if (top + menuRect.height > viewportHeight - 16) {\r\n            // Position above badge\r\n            top = badgeRect.bottom - menuRect.height;\r\n        }\r\n        \r\n        // Ensure menu stays within viewport\r\n        left = Math.max(16, Math.min(left, viewportWidth - menuRect.width - 16));\r\n        top = Math.max(16, Math.min(top, viewportHeight - menuRect.height - 16));\r\n        \r\n        menu.style.left = `${left}px`;\r\n        menu.style.top = `${top}px`;\r\n    }\r\n\r\n    handlePositionSelect(anchor) {\r\n        const newPositioning = { anchor, offsetX: 0, offsetY: 0 };\r\n        this.applyPositioning(newPositioning);\r\n        this.savePositioningPreference(newPositioning);\r\n        this.closeMenu();\r\n        \r\n        console.log('SafeSignal: Position selected:', anchor);\r\n    }\r\n\r\n    // === SPA DETECTION ===\r\n\r\n    setupSPADetection() {\r\n        // Patch history methods with error handling\r\n        try {\r\n            const originalPushState = history.pushState;\r\n            const originalReplaceState = history.replaceState;\r\n            \r\n            history.pushState = (...args) => {\r\n                originalPushState.apply(history, args);\r\n                this.checkIfPageChanged('url_change');\r\n            };\r\n            \r\n            history.replaceState = (...args) => {\r\n                originalReplaceState.apply(history, args);\r\n                this.checkIfPageChanged('url_change');\r\n            };\r\n            \r\n            // Listen for popstate events\r\n            const onPopState = () => {\r\n                this.checkIfPageChanged('url_change');\r\n            };\r\n            window.addEventListener('popstate', onPopState);\r\n            \r\n            // Cleanup\r\n            this.cleanupHandlers.push(() => {\r\n                history.pushState = originalPushState;\r\n                history.replaceState = originalReplaceState;\r\n                window.removeEventListener('popstate', onPopState);\r\n            });\r\n            \r\n            console.log('SafeSignal: SPA detection enabled');\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Could not patch history methods:', e);\r\n        }\r\n    }\r\n\r\n    generateContentSignature() {\r\n        try {\r\n            // Find main content areas\r\n            const mainSelectors = ['[role=\"main\"]', 'main', 'article', '#main', '.main-content'];\r\n            let mainElement = null;\r\n            \r\n            for (const selector of mainSelectors) {\r\n                mainElement = document.querySelector(selector);\r\n                if (mainElement) break;\r\n            }\r\n            \r\n            // Fallback to largest text container\r\n            if (!mainElement) {\r\n                const candidates = document.querySelectorAll('div, section, article');\r\n                let maxLength = 0;\r\n                for (const el of candidates) {\r\n                    const textLength = (el.textContent || '').length;\r\n                    if (textLength > maxLength) {\r\n                        maxLength = textLength;\r\n                        mainElement = el;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (!mainElement) return 'no-content';\r\n            \r\n            const text = mainElement.textContent || '';\r\n            const len = text.length;\r\n            \r\n            if (len === 0) return 'empty';\r\n            \r\n            // Simple hash of first/last 1000 chars + link count\r\n            const first1k = text.substring(0, 1000);\r\n            const last1k = text.substring(Math.max(0, len - 1000));\r\n            const linkCount = mainElement.querySelectorAll('a').length;\r\n            \r\n            // Simple hash function\r\n            const hash = (str) => {\r\n                let hash = 0;\r\n                for (let i = 0; i < str.length; i++) {\r\n                    const char = str.charCodeAt(i);\r\n                    hash = ((hash << 5) - hash) + char;\r\n                    hash = hash & hash; // Convert to 32-bit integer\r\n                }\r\n                return hash;\r\n            };\r\n            \r\n            const h1 = hash(first1k);\r\n            const h2 = hash(last1k);\r\n            \r\n            return `${len}|${h1}|${h2}|${linkCount}`;\r\n        } catch (e) {\r\n            console.warn('SafeSignal: Error generating content signature:', e);\r\n            return 'error';\r\n        }\r\n    }\r\n\r\n    checkIfPageChanged(trigger) {\r\n        // Skip checks when tab is hidden (save CPU)\r\n        if (this.pageHidden && trigger !== 'initial_load') {\r\n            console.log('SafeSignal: Skipping check - tab hidden');\r\n            return;\r\n        }\r\n        \r\n        const newUrl = window.location.href;\r\n        const newSignature = this.generateContentSignature();\r\n        \r\n        let hasChanged = false;\r\n        \r\n        // Check URL change\r\n        if (newUrl !== this.currentUrl) {\r\n            console.log('SafeSignal: URL changed:', this.currentUrl, '→', newUrl);\r\n            this.currentUrl = newUrl;\r\n            hasChanged = true;\r\n        }\r\n        \r\n        // Check content change\r\n        if (newSignature !== this.currentSignature) {\r\n            console.log('SafeSignal: Content signature changed:', this.currentSignature, '→', newSignature);\r\n            this.currentSignature = newSignature;\r\n            hasChanged = true;\r\n        }\r\n        \r\n        // Per-URL cooldown check\r\n        const now = Date.now();\r\n        const urlKey = newUrl; // Include fragment for SPA state tracking\r\n        const lastCheck = this.lastCheckByUrl.get(urlKey) || 0;\r\n        \r\n        if (hasChanged || trigger === 'initial_load') {\r\n            if (now - lastCheck < this.checkCooldown && trigger !== 'initial_load') {\r\n                console.log('SafeSignal: Skipping check due to cooldown for URL:', urlKey);\r\n                return;\r\n            }\r\n            \r\n            this.lastCheckByUrl.set(urlKey, now);\r\n            this.performSecurityCheck(trigger);\r\n        }\r\n    }\r\n\r\n    async performSecurityCheck(trigger) {\r\n        console.log('SafeSignal: Performing security check, trigger:', trigger);\r\n        \r\n        // Set checking state\r\n        this.setState('checking');\r\n        \r\n        try {\r\n            // Placeholder for API call\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            \r\n            // Simulate different outcomes based on domain (for testing)\r\n            const hostname = window.location.hostname.toLowerCase();\r\n            let newState = 'ok';\r\n            \r\n            // Simple demo logic - replace with actual API call\r\n            if (hostname.includes('phishing') || hostname.includes('scam')) {\r\n                newState = 'danger';\r\n            } else if (hostname.includes('suspicious') || hostname.includes('warning')) {\r\n                newState = 'warning';\r\n            }\r\n            \r\n            // Kill demo randomness behind a flag\r\n            const DEV_DEMO = false;\r\n            if (DEV_DEMO && Math.random() > 0.8) {\r\n                newState = 'warning';\r\n            }\r\n            \r\n            this.setState(newState);\r\n            \r\n        } catch (error) {\r\n            console.error('SafeSignal: Security check failed:', error);\r\n            this.setState('warning');\r\n        }\r\n    }\r\n\r\n    // === UTILITY METHODS ===\r\n\r\n    show() {\r\n        if (this.shadowRoot) {\r\n            const badge = this.shadowRoot.querySelector('.badge');\r\n            if (badge) {\r\n                badge.classList.remove('hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if (this.shadowRoot) {\r\n            const badge = this.shadowRoot.querySelector('.badge');\r\n            if (badge) {\r\n                badge.classList.add('hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        console.log('SafeSignal: Destroying badge instance');\r\n        \r\n        // Clean up all event listeners and intervals\r\n        this.cleanupHandlers.forEach(cleanup => {\r\n            try {\r\n                cleanup();\r\n            } catch (e) {\r\n                console.warn('SafeSignal: Error during cleanup:', e);\r\n            }\r\n        });\r\n        \r\n        // Clear timers\r\n        if (this.pageDebounceTimer) {\r\n            clearTimeout(this.pageDebounceTimer);\r\n            this.pageDebounceTimer = null;\r\n        }\r\n        \r\n        if (this.proximityCheckInterval) {\r\n            clearInterval(this.proximityCheckInterval);\r\n            this.proximityCheckInterval = null;\r\n        }\r\n        \r\n        // Disconnect mutation observer\r\n        if (this.mutationObserver) {\r\n            this.mutationObserver.disconnect();\r\n            this.mutationObserver = null;\r\n        }\r\n        \r\n        // Remove DOM elements\r\n        if (this.badgeContainer && this.badgeContainer.parentNode) {\r\n            this.badgeContainer.parentNode.removeChild(this.badgeContainer);\r\n        }\r\n        \r\n        // Clear references\r\n        this.shadowRoot = null;\r\n        this.badgeContainer = null;\r\n        this.positioning = null;\r\n    }\r\n}\r\n\r\n// Enhanced Badge with Context Detection\r\nclass SafeSignalBadgeEnhanced extends SafeSignalBadge {\r\n    constructor() {\r\n        super();\r\n        \r\n        // Context detection\r\n        this.contextProbe = new SafeSignalContextProbe();\r\n        this.contextData = null;\r\n        this.contextButtons = [];\r\n        this._lastProbeTs = 0; // Throttle context probes\r\n    }\r\n\r\n    async init() {\r\n        if (this.shouldSkipInjection()) {\r\n            return;\r\n        }\r\n\r\n        await this.loadUserPreferences();\r\n        \r\n        if (this.isSiteHidden()) {\r\n            console.log('SafeSignal: Badge hidden on this site per user preference');\r\n            return;\r\n        }\r\n\r\n        this.createShadowDOMBadge();\r\n        this.attachEventListeners();\r\n        \r\n        // Initialize positioning helper after shadow root AND event listeners are created\r\n        this.positioning = new SafeSignalBadgePositioning(this.shadowRoot);\r\n        this.setupSPADetection();\r\n        this.setupContentObserver();\r\n        \r\n        // Apply saved positioning\r\n        this.applyPositioning(this.userPreferences.positioning);\r\n        \r\n        this.checkIfPageChanged('initial_load');\r\n        \r\n        console.log('SafeSignal: Enhanced badge active - Build:', SAFESIGNAL_BUILD);\r\n    }\r\n\r\n    setupContentObserver() {\r\n        if (this.mutationObserver) return;\r\n        \r\n        const target = document.body;\r\n        const isInteresting = (node) => {\r\n            if (!node || node.nodeType !== Node.ELEMENT_NODE) return false;\r\n            const text = (node.textContent || '').toLowerCase();\r\n            // Enhanced scan for commerce/health terms\r\n            return /\\$\\d|add to cart|buy now|checkout|supplement|treats|prevents|miracle|dosage|clinical|bag|basket|subscribe & save|side effects|contraindications/.test(text);\r\n        };\r\n\r\n        this.mutationObserver = new MutationObserver((mutations) => {\r\n            for (const mutation of mutations) {\r\n                if ([...mutation.addedNodes].some(isInteresting)) {\r\n                    this.checkIfPageChanged('content_mutation');\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.mutationObserver.observe(target, { childList: true, subtree: true });\r\n        this.cleanupHandlers.push(() => { \r\n            if (this.mutationObserver) {\r\n                this.mutationObserver.disconnect(); \r\n                this.mutationObserver = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    checkIfPageChanged(trigger) {\r\n        // Debounce content mutations\r\n        if (trigger === 'content_mutation') {\r\n            if (this.pageDebounceTimer) {\r\n                clearTimeout(this.pageDebounceTimer);\r\n            }\r\n            this.pageDebounceTimer = setTimeout(() => {\r\n                this.pageDebounceTimer = null;\r\n                super.checkIfPageChanged(trigger);\r\n                this.updateContextButtons();\r\n            }, 800);\r\n            return;\r\n        }\r\n        \r\n        super.checkIfPageChanged(trigger);\r\n        this.updateContextButtons();\r\n        \r\n        // Delayed re-probe for initial load (SPA content often loads later)\r\n        if (trigger === 'initial_load') {\r\n            setTimeout(() => {\r\n                this.contextData = this.contextProbe.quickContextProbe();\r\n                this.updateContextButtons();\r\n            }, 1500);\r\n        }\r\n    }\r\n\r\n    updateContextButtons() {\r\n        if (!this.contextProbe) return;\r\n        \r\n        // Throttle heavy context scans\r\n        const now = Date.now();\r\n        if (now - this._lastProbeTs < 1500) return; // throttle ~1.5s\r\n        this._lastProbeTs = now;\r\n        \r\n        this.contextData = this.contextProbe.quickContextProbe();\r\n        \r\n        // Clear existing context buttons\r\n        this.clearContextButtons();\r\n        \r\n        const { isProduct, productConfidence, isHealth, healthConfidence } = this.contextData;\r\n        \r\n        // Lower thresholds as suggested\r\n        if (isProduct && productConfidence >= 0.6) {\r\n            this.addContextButton('safer-deals', 'Find Safer Deals', '#10b981');\r\n        }\r\n        \r\n        if (isHealth && healthConfidence >= 0.6) {\r\n            this.addContextButton('health-scan', 'Health Fact Scan', '#3b82f6');\r\n        }\r\n    }\r\n\r\n    clearContextButtons() {\r\n        this.contextButtons.forEach(button => {\r\n            if (button.parentNode) {\r\n                button.parentNode.removeChild(button);\r\n            }\r\n        });\r\n        this.contextButtons = [];\r\n    }\r\n\r\n    addContextButton(type, text, color) {\r\n        if (!this.shadowRoot) return;\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        if (!badge) return;\r\n        \r\n        // Check if badge is in lower half to avoid off-screen buttons\r\n        const badgeRect = this.getBadgeRect();\r\n        const placeAbove = (badgeRect.bottom > window.innerHeight * 0.6);\r\n        \r\n        // Stack multiple buttons with small gap\r\n        const buttonIndex = this.contextButtons.length;\r\n        const stackOffset = buttonIndex * 28;\r\n        \r\n        const button = document.createElement('div');\r\n        button.className = `context-button context-button-${type}`;\r\n        button.textContent = text;\r\n        button.setAttribute('role', 'button');\r\n        button.setAttribute('tabindex', '0');\r\n        button.style.cssText = `\r\n            position: absolute;\r\n            ${placeAbove ? 'bottom: calc(100% + 8px);' : 'top: calc(100% + 8px);'}\r\n            left: 50%;\r\n            transform: translateX(-50%) translateY(${placeAbove ? -stackOffset : stackOffset}px);\r\n            background: ${color};\r\n            color: white;\r\n            padding: 6px 12px;\r\n            border-radius: 16px;\r\n            font-size: 0.75rem;\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n            white-space: nowrap;\r\n            opacity: 0;\r\n            transition: opacity 0.2s ease, transform 0.2s ease;\r\n            z-index: 1000000;\r\n            pointer-events: auto;\r\n        `;\r\n        \r\n        const handleClick = (e) => {\r\n            e.stopPropagation();\r\n            this.handleContextButtonClick(type);\r\n        };\r\n        \r\n        const handleKeydown = (e) => {\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.handleContextButtonClick(type);\r\n            }\r\n        };\r\n        \r\n        button.addEventListener('click', handleClick);\r\n        button.addEventListener('keydown', handleKeydown);\r\n        \r\n        button.addEventListener('mouseenter', () => {\r\n            button.style.opacity = '1';\r\n        });\r\n        \r\n        button.addEventListener('mouseleave', () => {\r\n            button.style.opacity = '0.9';\r\n        });\r\n        \r\n        badge.appendChild(button);\r\n        this.contextButtons.push(button);\r\n        \r\n        // Light fade-in for discoverability\r\n        requestAnimationFrame(() => {\r\n            button.style.opacity = '0.9';\r\n        });\r\n    }\r\n\r\n    handleContextButtonClick(type) {\r\n        console.log('SafeSignal: Context button clicked:', type);\r\n        \r\n        // Show coming soon message for now\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const statusEl = this.shadowRoot.querySelector('.badge-status');\r\n        \r\n        const messages = {\r\n            'safer-deals': 'Coming soon: Price comparison & safety scores',\r\n            'health-scan': 'Coming soon: Health claim verification'\r\n        };\r\n        \r\n        statusEl.textContent = messages[type] || 'Feature coming soon';\r\n        this.updateStatusBubblePosition();\r\n        \r\n        badge.classList.add('show-status');\r\n        \r\n        setTimeout(() => {\r\n            badge.classList.remove('show-status');\r\n        }, 4000);\r\n    }\r\n}\r\n\r\n// Context Detection Utility\r\nclass SafeSignalContextProbe {\r\n    constructor() {\r\n        this.productIndicators = {\r\n            priceSelectors: [\r\n                '[class*=\"price\"]', '[id*=\"price\"]', '.cost', '.amount',\r\n                '[class*=\"dollar\"]', '[class*=\"currency\"]'\r\n            ],\r\n            actionSelectors: [\r\n                '[class*=\"cart\"]', '[class*=\"buy\"]', '[class*=\"purchase\"]',\r\n                '[class*=\"checkout\"]', '[class*=\"order\"]'\r\n            ],\r\n            shoppingTerms: [\r\n                'add to cart', 'buy now', 'purchase', 'checkout', 'order now',\r\n                'price', 'sale', 'discount', 'shipping', 'delivery',\r\n                'add to bag', 'cart', 'basket', 'subscribe & save', 'bag'\r\n            ],\r\n            productCategories: [\r\n                'clothing', 'electronics', 'books', 'home', 'garden',\r\n                'appliance', 'phone', 'laptop', 'tv', 'printer', 'wearable'\r\n            ]\r\n        };\r\n\r\n        this.healthIndicators = {\r\n            healthSelectors: [\r\n                '[class*=\"supplement\"]', '[class*=\"vitamin\"]', '[class*=\"health\"]',\r\n                '[class*=\"medical\"]', '[class*=\"medicine\"]'\r\n            ],\r\n            healthTerms: [\r\n                'supplement', 'vitamin', 'health', 'medicine', 'treatment',\r\n                'cure', 'heal', 'therapy', 'clinical', 'medical',\r\n                'clinical trial', 'randomized', 'placebo', 'dosage', 'side effects',\r\n                'contraindications'\r\n            ],\r\n            suspiciousHealth: [\r\n                'miracle cure', 'instant relief', 'guaranteed results',\r\n                'doctors hate this', 'secret remedy', 'breakthrough',\r\n                'ancient remedy', 'one weird trick', 'miracle pill'\r\n            ]\r\n        };\r\n    }\r\n\r\n    quickContextProbe() {\r\n        const pageText = document.body.textContent.toLowerCase();\r\n        const pageHTML = document.body.innerHTML.toLowerCase();\r\n        \r\n        // Product detection\r\n        const productScore = this.calculateProductScore(pageText, pageHTML);\r\n        const isProduct = productScore > 0.6;\r\n        \r\n        // Health detection  \r\n        const healthScore = this.calculateHealthScore(pageText, pageHTML);\r\n        const isHealth = healthScore > 0.6;\r\n        \r\n        return {\r\n            isProduct,\r\n            productConfidence: productScore,\r\n            isHealth,\r\n            healthConfidence: healthScore,\r\n            pageType: this.determinePageType(isProduct, isHealth, productScore, healthScore)\r\n        };\r\n    }\r\n\r\n    calculateProductScore(pageText, pageHTML) {\r\n        let score = 0;\r\n        \r\n        // Check for price indicators\r\n        const priceRegex = /\\$\\d+|\\$\\d+\\.\\d+|price.*\\$|\\d+\\.\\d+.*usd/gi;\r\n        const priceMatches = pageText.match(priceRegex);\r\n        if (priceMatches && priceMatches.length > 0) {\r\n            score += Math.min(priceMatches.length * 0.2, 0.5);\r\n        }\r\n        \r\n        // Check for shopping terms\r\n        let termMatches = 0;\r\n        this.productIndicators.shoppingTerms.forEach(term => {\r\n            if (pageText.includes(term)) termMatches++;\r\n        });\r\n        score += Math.min(termMatches * 0.1, 0.4);\r\n        \r\n        // Check for shopping action elements\r\n        let actionElements = 0;\r\n        this.productIndicators.actionSelectors.forEach(selector => {\r\n            actionElements += document.querySelectorAll(selector).length;\r\n        });\r\n        score += Math.min(actionElements * 0.1, 0.3);\r\n        \r\n        return Math.min(score, 1.0);\r\n    }\r\n\r\n    calculateHealthScore(pageText, pageHTML) {\r\n        let score = 0;\r\n        \r\n        // Check for health terms\r\n        let healthTerms = 0;\r\n        this.healthIndicators.healthTerms.forEach(term => {\r\n            if (pageText.includes(term)) healthTerms++;\r\n        });\r\n        score += Math.min(healthTerms * 0.1, 0.5);\r\n        \r\n        // Check for suspicious health claims\r\n        let suspiciousTerms = 0;\r\n        this.healthIndicators.suspiciousHealth.forEach(term => {\r\n            if (pageText.includes(term)) suspiciousTerms++;\r\n        });\r\n        score += Math.min(suspiciousTerms * 0.2, 0.4);\r\n        \r\n        // Check for health-related elements\r\n        let healthElements = 0;\r\n        this.healthIndicators.healthSelectors.forEach(selector => {\r\n            healthElements += document.querySelectorAll(selector).length;\r\n        });\r\n        score += Math.min(healthElements * 0.1, 0.3);\r\n        \r\n        return Math.min(score, 1.0);\r\n    }\r\n\r\n    determinePageType(isProduct, isHealth, productScore, healthScore) {\r\n        if (isProduct && isHealth) return 'health-product';\r\n        if (isProduct) return 'product';\r\n        if (isHealth) return 'health';\r\n        return 'general';\r\n    }\r\n}\r\n\r\n// Badge Positioning Helper (simplified version)\r\nclass SafeSignalBadgePositioning {\r\n    constructor(shadowRoot) {\r\n        this.shadowRoot = shadowRoot;\r\n        this.activeMenuEl = null;\r\n    }\r\n\r\n    applyMenuPosition(menuEl, badgeRect) {\r\n        // Simple menu positioning - you can expand this later\r\n        const viewportWidth = window.innerWidth;\r\n        const viewportHeight = window.innerHeight;\r\n        \r\n        let left = badgeRect.right + 8;\r\n        let top = badgeRect.top;\r\n        \r\n        // Keep menu in viewport\r\n        if (left + 200 > viewportWidth) {\r\n            left = badgeRect.left - 200 - 8;\r\n        }\r\n        \r\n        if (top + 150 > viewportHeight) {\r\n            top = badgeRect.bottom - 150;\r\n        }\r\n        \r\n        left = Math.max(16, left);\r\n        top = Math.max(16, top);\r\n        \r\n        menuEl.style.left = `${left}px`;\r\n        menuEl.style.top = `${top}px`;\r\n    }\r\n}\r\n\r\n// Initialize the badge system\r\nfunction initializeBadge() {\r\n    // Clean up any existing instances\r\n    if (window.safesignalBadgeInstance) {\r\n        window.safesignalBadgeInstance.destroy();\r\n        window.safesignalBadgeInstance = null;\r\n    }\r\n    \r\n    // Create new enhanced badge instance\r\n    window.safesignalBadgeInstance = new SafeSignalBadgeEnhanced();\r\n}\r\n\r\n// Export classes for potential external use\r\nif (typeof window !== 'undefined') {\r\n    window.SafeSignalBadge = SafeSignalBadgeEnhanced;\r\n    window.SafeSignalContextProbe = SafeSignalContextProbe;\r\n    window.SafeSignalBadgePositioning = SafeSignalBadgePositioning;\r\n}\r\n\r\n// Auto-initialize when script loads\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeBadge);\r\n} else {\r\n    initializeBadge();\r\n}"],"names":[],"sourceRoot":""}