{"version":3,"file":"content.js","mappingsprCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AEvBA;AACA;AACA;AACA","sources":["webpack://safesignal-extension/./src/content/content.js","webpack://safesignal-extension/webpack/bootstrap","webpack://safesignal-extension/webpack/before-startup","webpack://safesignal-extension/webpack/startup","webpack://safesignal-extension/webpack/after-startup"],"sourcesContent":["// SafeSignal Content Script - Fixed Visibility Edition\r\n// Version: 4.1-visibility-fix\r\n\r\nconst SAFESIGNAL_BUILD = 'content-2025-09-29-v4.1-fixed';\r\nconsole.info('[SafeSignal] Build:', SAFESIGNAL_BUILD);\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        // Core elements\r\n        this.host = null;\r\n        this.root = null;\r\n        \r\n        // State management\r\n        this.currentState = 'checking';\r\n        this.contextData = null;\r\n        this.isMenuOpen = false;\r\n        this.activeModal = null;\r\n        \r\n        // Positioning\r\n        this.position = 'bottom-right';\r\n        \r\n        // Size mode (elder-friendly defaults)\r\n        this.sizeMode = 'large';\r\n        \r\n        // SPA detection\r\n        this.currentUrl = null; // Start as null so first check always runs\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.lastCheckByUrl = new Map();\r\n        this.checkCooldown = 30 * 60 * 1000;\r\n        \r\n        // Context detection\r\n        this.contextProbe = new SafeSignalContextProbe();\r\n        \r\n        // User preferences\r\n        this.userPreferences = {\r\n            position: 'bottom-right',\r\n            sizeMode: 'large',\r\n            miniChipsEnabled: true\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    async init() {\r\n        if (this.shouldSkipInjection()) return;\r\n        \r\n        await this.loadUserPreferences();\r\n        this.createBadge();\r\n        this.initSpaDetection();\r\n        this.setupKeyboardShortcuts();\r\n        this.setupResizeHandler();\r\n        \r\n        console.log('[SafeSignal] Badge initialized and visible');\r\n        this.checkIfPageChanged('initial_load');\r\n    }\r\n    \r\n    shouldSkipInjection() {\r\n        if (document.getElementById('safesignal-host')) {\r\n            console.log('[SafeSignal] Badge already exists');\r\n            return true;\r\n        }\r\n        \r\n        const protocol = window.location.protocol;\r\n        if (['chrome:', 'chrome-extension:', 'moz-extension:', 'about:'].includes(protocol)) {\r\n            return true;\r\n        }\r\n        \r\n        if (window.top !== window) {\r\n            console.log('[SafeSignal] Skipping iframe');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // ==================== BADGE CREATION ====================\r\n    \r\n    createBadge() {\r\n        // Create host container\r\n        this.host = document.createElement('div');\r\n        this.host.setAttribute('id', 'safesignal-host');\r\n        this.root = this.host.attachShadow({ mode: 'open' });\r\n        \r\n        // Get size configuration\r\n        const sizes = {\r\n            normal: { badge: 56, font: 18, chip: 32, chipFont: 14 },\r\n            large: { badge: 64, font: 20, chip: 36, chipFont: 15 },\r\n            xl: { badge: 72, font: 22, chip: 40, chipFont: 16 }\r\n        };\r\n        const config = sizes[this.sizeMode] || sizes.large;\r\n        \r\n        // Create Shadow DOM structure with FIXED positioning\r\n        this.root.innerHTML = `\r\n            <style>\r\n                * {\r\n                    margin: 0;\r\n                    padding: 0;\r\n                    box-sizing: border-box;\r\n                }\r\n                \r\n                /* Main container - FIXED positioning */\r\n                .safesignal-container {\r\n                    position: fixed !important;\r\n                    z-index: 2147483647 !important;\r\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif !important;\r\n                    pointer-events: auto !important;\r\n                    display: flex !important;\r\n                    flex-direction: column !important;\r\n                    align-items: center !important;\r\n                    gap: 8px !important;\r\n                }\r\n                \r\n                /* Position classes */\r\n                .pos-top-left { top: 20px !important; left: 20px !important; }\r\n                .pos-top-right { top: 20px !important; right: 20px !important; }\r\n                .pos-bottom-left { bottom: 20px !important; left: 20px !important; }\r\n                .pos-bottom-right { bottom: 20px !important; right: 20px !important; }\r\n                .pos-mid-left { top: 50% !important; left: 20px !important; transform: translateY(-50%) !important; }\r\n                .pos-mid-right { top: 50% !important; right: 20px !important; transform: translateY(-50%) !important; }\r\n                \r\n                /* Mini chips container */\r\n                .chips-wrapper {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    gap: 6px;\r\n                    align-items: center;\r\n                    order: -1; /* Always above badge */\r\n                }\r\n                \r\n                /* Mini chip */\r\n                .mini-chip {\r\n                    height: ${config.chip}px;\r\n                    padding: 0 14px;\r\n                    border-radius: ${config.chip / 2}px;\r\n                    font-size: ${config.chipFont}px;\r\n                    font-weight: 600;\r\n                    color: white;\r\n                    border: 1px solid rgba(255, 255, 255, 0.3);\r\n                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 6px;\r\n                    white-space: nowrap;\r\n                    transition: all 0.2s ease;\r\n                    opacity: 0;\r\n                    transform: translateY(10px);\r\n                    animation: chipFadeIn 0.3s ease forwards;\r\n                    background: #2563eb; /* Default blue */\r\n                }\r\n                \r\n                @keyframes chipFadeIn {\r\n                    to {\r\n                        opacity: 0.95;\r\n                        transform: translateY(0);\r\n                    }\r\n                }\r\n                \r\n                .mini-chip:hover {\r\n                    opacity: 1;\r\n                    transform: translateY(-2px);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n                }\r\n                \r\n                .mini-chip.product {\r\n                    background: #7c3aed;\r\n                }\r\n                \r\n                .mini-chip.health {\r\n                    background: #059669;\r\n                }\r\n                \r\n                /* Main badge wrapper */\r\n                .badge-wrapper {\r\n                    position: relative;\r\n                    display: flex;\r\n                    align-items: center;\r\n                }\r\n                \r\n                /* Main badge */\r\n                .badge {\r\n                    height: ${config.badge}px;\r\n                    min-width: ${config.badge}px;\r\n                    padding: 0 20px;\r\n                    padding-right: 48px; /* Space for menu button */\r\n                    border-radius: ${config.badge / 2}px;\r\n                    font-size: ${config.font}px;\r\n                    font-weight: 700;\r\n                    color: white;\r\n                    border: 2px solid rgba(255, 255, 255, 0.3);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 10px;\r\n                    transition: all 0.2s ease;\r\n                    position: relative;\r\n                    background: #6b7280; /* Default gray */\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.05);\r\n                    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n                }\r\n                \r\n                .badge.state-ok {\r\n                    background: #059669;\r\n                }\r\n                \r\n                .badge.state-warning {\r\n                    background: #d97706;\r\n                }\r\n                \r\n                .badge.state-danger {\r\n                    background: #dc2626;\r\n                }\r\n                \r\n                .badge.state-checking {\r\n                    background: #6b7280;\r\n                }\r\n                \r\n                .badge-icon {\r\n                    font-size: 1.2em;\r\n                    line-height: 1;\r\n                }\r\n                \r\n                .badge-label {\r\n                    font-size: 0.9em;\r\n                    white-space: nowrap;\r\n                }\r\n                \r\n                /* Menu button - inside badge */\r\n                .menu-btn {\r\n                    position: absolute;\r\n                    right: 10px;\r\n                    top: 50%;\r\n                    transform: translateY(-50%);\r\n                    width: 32px;\r\n                    height: 32px;\r\n                    border-radius: 50%;\r\n                    background: rgba(255, 255, 255, 0.2);\r\n                    color: white;\r\n                    border: none;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    font-size: 20px;\r\n                    font-weight: bold;\r\n                    transition: all 0.2s ease;\r\n                }\r\n                \r\n                .menu-btn:hover {\r\n                    background: rgba(255, 255, 255, 0.3);\r\n                    transform: translateY(-50%) scale(1.1);\r\n                }\r\n                \r\n                /* Menu panel */\r\n                .menu {\r\n                    position: absolute;\r\n                    bottom: calc(100% + 12px);\r\n                    right: 0;\r\n                    background: white;\r\n                    border-radius: 12px;\r\n                    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\r\n                    border: 1px solid #e5e7eb;\r\n                    padding: 16px;\r\n                    min-width: 220px;\r\n                    display: none;\r\n                    z-index: 1000;\r\n                }\r\n                \r\n                .menu.open {\r\n                    display: block;\r\n                }\r\n                \r\n                /* Adjust menu position for top placements */\r\n                .pos-top-left .menu,\r\n                .pos-top-right .menu {\r\n                    bottom: auto;\r\n                    top: calc(100% + 12px);\r\n                }\r\n                \r\n                .menu-section {\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .menu-section:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n                \r\n                .menu-label {\r\n                    font-size: 11px;\r\n                    font-weight: 600;\r\n                    color: #6b7280;\r\n                    text-transform: uppercase;\r\n                    letter-spacing: 0.05em;\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                /* Position grid */\r\n                .position-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr);\r\n                    gap: 4px;\r\n                }\r\n                \r\n                .pos-btn {\r\n                    width: 32px;\r\n                    height: 32px;\r\n                    border: 1px solid #d1d5db;\r\n                    border-radius: 6px;\r\n                    background: white;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                    position: relative;\r\n                }\r\n                \r\n                .pos-btn:hover {\r\n                    background: #f3f4f6;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .pos-btn.active {\r\n                    background: #7c3aed;\r\n                    border-color: #7c3aed;\r\n                }\r\n                \r\n                .pos-btn.active::after {\r\n                    content: '•';\r\n                    position: absolute;\r\n                    inset: 0;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    color: white;\r\n                    font-size: 18px;\r\n                }\r\n                \r\n                /* Size buttons */\r\n                .size-controls {\r\n                    display: flex;\r\n                    gap: 8px;\r\n                }\r\n                \r\n                .size-btn {\r\n                    flex: 1;\r\n                    padding: 6px 10px;\r\n                    border: 1px solid #d1d5db;\r\n                    border-radius: 6px;\r\n                    background: white;\r\n                    color: #374151;\r\n                    font-size: 13px;\r\n                    font-weight: 500;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                }\r\n                \r\n                .size-btn:hover {\r\n                    background: #f3f4f6;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .size-btn.active {\r\n                    background: #7c3aed;\r\n                    color: white;\r\n                    border-color: #7c3aed;\r\n                }\r\n                \r\n                /* Modal */\r\n                .modal-overlay {\r\n                    position: fixed;\r\n                    inset: 0;\r\n                    background: rgba(0, 0, 0, 0.5);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    z-index: 2147483646;\r\n                    display: none;\r\n                }\r\n                \r\n                .modal-overlay.open {\r\n                    display: flex;\r\n                }\r\n                \r\n                .modal {\r\n                    background: white;\r\n                    border-radius: 16px;\r\n                    padding: 24px;\r\n                    max-width: 400px;\r\n                    width: 90%;\r\n                    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .modal-title {\r\n                    font-size: 20px;\r\n                    font-weight: 700;\r\n                    color: #111827;\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .modal-body {\r\n                    font-size: 16px;\r\n                    line-height: 1.5;\r\n                    color: #6b7280;\r\n                    margin-bottom: 20px;\r\n                }\r\n                \r\n                .modal-close {\r\n                    width: 100%;\r\n                    padding: 12px;\r\n                    border-radius: 8px;\r\n                    background: #7c3aed;\r\n                    color: white;\r\n                    font-size: 16px;\r\n                    font-weight: 600;\r\n                    border: none;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                }\r\n                \r\n                .modal-close:hover {\r\n                    background: #6d28d9;\r\n                }\r\n                \r\n                /* Accessibility */\r\n                @media (prefers-reduced-motion: reduce) {\r\n                    * {\r\n                        transition: none !important;\r\n                        animation: none !important;\r\n                    }\r\n                }\r\n            </style>\r\n            \r\n            <!-- Main container with position class -->\r\n            <div class=\"safesignal-container pos-bottom-right\" id=\"main-container\">\r\n                <!-- Mini chips wrapper (will be populated dynamically) -->\r\n                <div class=\"chips-wrapper\" id=\"chips-wrapper\"></div>\r\n                \r\n                <!-- Badge wrapper -->\r\n                <div class=\"badge-wrapper\">\r\n                    <div class=\"badge state-checking\" \r\n                         role=\"button\" \r\n                         tabindex=\"0\" \r\n                         aria-live=\"polite\" \r\n                         aria-label=\"SafeSignal: Checking\"\r\n                         id=\"main-badge\">\r\n                        <span class=\"badge-icon\">⧗</span>\r\n                        <span class=\"badge-label\">Checking</span>\r\n                        <button class=\"menu-btn\" \r\n                                aria-label=\"SafeSignal Menu\"\r\n                                aria-expanded=\"false\"\r\n                                id=\"menu-btn\">\r\n                            ⋯\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <!-- Menu -->\r\n                    <div class=\"menu\" id=\"menu\" role=\"dialog\">\r\n                        <div class=\"menu-section\">\r\n                            <div class=\"menu-label\">Position</div>\r\n                            <div class=\"position-grid\">\r\n                                <button class=\"pos-btn\" data-pos=\"top-left\" title=\"Top Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"top-center\" title=\"Top Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"top-right\" title=\"Top Right\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-left\" title=\"Middle Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-center\" title=\"Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-right\" title=\"Middle Right\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"bottom-left\" title=\"Bottom Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"bottom-center\" title=\"Bottom Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn active\" data-pos=\"bottom-right\" title=\"Bottom Right\"></button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div class=\"menu-section\">\r\n                            <div class=\"menu-label\">Size</div>\r\n                            <div class=\"size-controls\">\r\n                                <button class=\"size-btn\" data-size=\"normal\">Normal</button>\r\n                                <button class=\"size-btn active\" data-size=\"large\">Large</button>\r\n                                <button class=\"size-btn\" data-size=\"xl\">XL</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Modal -->\r\n            <div class=\"modal-overlay\" id=\"modal-overlay\">\r\n                <div class=\"modal\" role=\"dialog\" aria-modal=\"true\">\r\n                    <h2 class=\"modal-title\" id=\"modal-title\">Feature Coming Soon</h2>\r\n                    <div class=\"modal-body\" id=\"modal-body\">\r\n                        This feature is being developed and will be available soon.\r\n                    </div>\r\n                    <button class=\"modal-close\" id=\"modal-close\">Got it</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        // Add to page - CRITICAL: append to body\r\n        document.body.appendChild(this.host);\r\n        \r\n        // Get element references\r\n        this.container = this.root.getElementById('main-container');\r\n        this.badge = this.root.getElementById('main-badge');\r\n        this.menuBtn = this.root.getElementById('menu-btn');\r\n        this.menu = this.root.getElementById('menu');\r\n        this.chipsWrapper = this.root.getElementById('chips-wrapper');\r\n        this.modalOverlay = this.root.getElementById('modal-overlay');\r\n        \r\n        // Initialize event listeners\r\n        this.initEventListeners();\r\n        \r\n        // Apply saved position\r\n        this.setPosition(this.userPreferences.position);\r\n        \r\n        // Apply saved size\r\n        this.setSize(this.userPreferences.sizeMode);\r\n        \r\n        console.log('[SafeSignal] Badge created and should be visible');\r\n    }\r\n    \r\n    // ==================== EVENT LISTENERS ====================\r\n    \r\n    initEventListeners() {\r\n        // Badge click\r\n        this.badge.addEventListener('click', (e) => {\r\n            if (e.target === this.menuBtn || this.menuBtn.contains(e.target)) return;\r\n            console.log('[SafeSignal] Badge clicked');\r\n        });\r\n        \r\n        // Menu toggle\r\n        this.menuBtn.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleMenu();\r\n        });\r\n        \r\n        // Position buttons\r\n        this.root.querySelectorAll('.pos-btn:not([disabled])').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const position = btn.dataset.pos;\r\n                this.setPosition(position);\r\n                this.saveUserPreferences();\r\n            });\r\n        });\r\n        \r\n        // Size buttons\r\n        this.root.querySelectorAll('.size-btn').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const size = btn.dataset.size;\r\n                this.setSize(size);\r\n                this.saveUserPreferences();\r\n            });\r\n        });\r\n        \r\n        // Modal close\r\n        this.root.getElementById('modal-close').addEventListener('click', () => {\r\n            this.closeModal();\r\n        });\r\n        \r\n        // Close menu on outside click\r\n        document.addEventListener('click', (e) => {\r\n            if (this.isMenuOpen && !this.host.contains(e.target)) {\r\n                this.closeMenu();\r\n            }\r\n        });\r\n    }\r\n    \r\n    // ==================== POSITION MANAGEMENT ====================\r\n    \r\n    setPosition(position) {\r\n        const validPositions = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'mid-left', 'mid-right'];\r\n        \r\n        if (!validPositions.includes(position)) {\r\n            position = 'bottom-right';\r\n        }\r\n        \r\n        // Remove all position classes\r\n        validPositions.forEach(pos => {\r\n            this.container.classList.remove(`pos-${pos}`);\r\n        });\r\n        \r\n        // Add new position class\r\n        this.container.classList.add(`pos-${position}`);\r\n        \r\n        // Update active button\r\n        this.root.querySelectorAll('.pos-btn').forEach(btn => {\r\n            btn.classList.toggle('active', btn.dataset.pos === position);\r\n        });\r\n        \r\n        this.position = position;\r\n        this.userPreferences.position = position;\r\n        \r\n        console.log(`[SafeSignal] Position set to: ${position}`);\r\n    }\r\n    \r\n    // ==================== SIZE MANAGEMENT ====================\r\n    \r\n    setSize(size) {\r\n        const sizes = {\r\n            normal: { badge: 56, font: 18, chip: 32, chipFont: 14 },\r\n            large: { badge: 64, font: 20, chip: 36, chipFont: 15 },\r\n            xl: { badge: 72, font: 22, chip: 40, chipFont: 16 }\r\n        };\r\n        \r\n        const config = sizes[size] || sizes.large;\r\n        \r\n        // Update badge size\r\n        this.badge.style.height = `${config.badge}px`;\r\n        this.badge.style.minWidth = `${config.badge}px`;\r\n        this.badge.style.borderRadius = `${config.badge / 2}px`;\r\n        this.badge.style.fontSize = `${config.font}px`;\r\n        \r\n        // Update chips size\r\n        this.root.querySelectorAll('.mini-chip').forEach(chip => {\r\n            chip.style.height = `${config.chip}px`;\r\n            chip.style.borderRadius = `${config.chip / 2}px`;\r\n            chip.style.fontSize = `${config.chipFont}px`;\r\n        });\r\n        \r\n        // Update active button\r\n        this.root.querySelectorAll('.size-btn').forEach(btn => {\r\n            btn.classList.toggle('active', btn.dataset.size === size);\r\n        });\r\n        \r\n        this.sizeMode = size;\r\n        this.userPreferences.sizeMode = size;\r\n        \r\n        console.log(`[SafeSignal] Size set to: ${size}`);\r\n    }\r\n    \r\n    // ==================== MENU MANAGEMENT ====================\r\n    \r\n    toggleMenu() {\r\n        if (this.isMenuOpen) {\r\n            this.closeMenu();\r\n        } else {\r\n            this.openMenu();\r\n        }\r\n    }\r\n    \r\n    openMenu() {\r\n        this.menu.classList.add('open');\r\n        this.menuBtn.setAttribute('aria-expanded', 'true');\r\n        this.isMenuOpen = true;\r\n    }\r\n    \r\n    closeMenu() {\r\n        this.menu.classList.remove('open');\r\n        this.menuBtn.setAttribute('aria-expanded', 'false');\r\n        this.isMenuOpen = false;\r\n    }\r\n    \r\n    // ==================== MINI CHIPS ====================\r\n    \r\n    updateMiniChips() {\r\n        // Run context detection\r\n        this.contextData = this.contextProbe.analyze();\r\n        \r\n        // Clear existing chips\r\n        this.chipsWrapper.innerHTML = '';\r\n        \r\n        // Add chips based on confidence scores\r\n        const chips = [];\r\n        \r\n        if (this.contextData.product.confidence > 0.3) {\r\n            chips.push({\r\n                type: 'product',\r\n                label: '🛒 Better Deals',\r\n                icon: '🛒'\r\n            });\r\n        }\r\n        \r\n        if (this.contextData.health.confidence > 0.3) {\r\n            chips.push({\r\n                type: 'health',\r\n                label: '🔬 Verify Info',\r\n                icon: '🔬'\r\n            });\r\n        }\r\n        \r\n        // Create chip elements\r\n        chips.forEach((chip, index) => {\r\n            const chipEl = document.createElement('button');\r\n            chipEl.className = `mini-chip ${chip.type}`;\r\n            chipEl.innerHTML = `${chip.label}`;\r\n            chipEl.setAttribute('aria-label', chip.label);\r\n            chipEl.style.animationDelay = `${index * 0.1}s`;\r\n            \r\n            chipEl.addEventListener('click', () => this.handleChipClick(chip.type));\r\n            \r\n            this.chipsWrapper.appendChild(chipEl);\r\n        });\r\n    }\r\n    \r\n    handleChipClick(type) {\r\n        console.log(`[SafeSignal] Chip clicked: ${type}`);\r\n        this.showModal(type);\r\n    }\r\n    \r\n    // ==================== MODAL ====================\r\n    \r\n    showModal(type) {\r\n        const modalContent = {\r\n            product: {\r\n                title: '🛒 Product Price Scanner',\r\n                body: 'This feature will compare prices across trusted retailers and alert you to better deals. Coming soon!'\r\n            },\r\n            health: {\r\n                title: '🔬 Health Claim Verifier',\r\n                body: 'This feature will fact-check health claims against medical databases. Coming soon!'\r\n            }\r\n        };\r\n        \r\n        const content = modalContent[type] || modalContent.product;\r\n        \r\n        const title = this.root.getElementById('modal-title');\r\n        const body = this.root.getElementById('modal-body');\r\n        \r\n        title.textContent = content.title;\r\n        body.textContent = content.body;\r\n        \r\n        this.modalOverlay.classList.add('open');\r\n        this.activeModal = type;\r\n    }\r\n    \r\n    closeModal() {\r\n        this.modalOverlay.classList.remove('open');\r\n        this.activeModal = null;\r\n    }\r\n    \r\n    // ==================== STATE MANAGEMENT ====================\r\n    \r\n    updateBadgeState(state) {\r\n        const states = {\r\n            'ok': { icon: '✅', label: 'Safe', class: 'state-ok' },\r\n            'warning': { icon: '⚠️', label: 'Caution', class: 'state-warning' },\r\n            'danger': { icon: '❌', label: 'High Risk', class: 'state-danger' },\r\n            'checking': { icon: '⧗', label: 'Checking', class: 'state-checking' }\r\n        };\r\n        \r\n        const config = states[state] || states.checking;\r\n        \r\n        // Update badge classes\r\n        this.badge.className = `badge ${config.class}`;\r\n        \r\n        // Update content\r\n        const icon = this.badge.querySelector('.badge-icon');\r\n        const label = this.badge.querySelector('.badge-label');\r\n        \r\n        icon.textContent = config.icon;\r\n        label.textContent = config.label;\r\n        \r\n        // Update ARIA\r\n        this.badge.setAttribute('aria-label', `SafeSignal: ${config.label}`);\r\n        \r\n        this.currentState = state;\r\n        \r\n        // Update mini chips based on new state\r\n        if (state !== 'checking') {\r\n            this.updateMiniChips();\r\n        }\r\n    }\r\n    \r\n    // ==================== SPA DETECTION ====================\r\n    \r\n    initSpaDetection() {\r\n        // Monitor URL changes\r\n        const originalPushState = history.pushState;\r\n        const originalReplaceState = history.replaceState;\r\n        \r\n        history.pushState = (...args) => {\r\n            originalPushState.apply(history, args);\r\n            this.checkIfPageChanged('pushState');\r\n        };\r\n        \r\n        history.replaceState = (...args) => {\r\n            originalReplaceState.apply(history, args);\r\n            this.checkIfPageChanged('replaceState');\r\n        };\r\n        \r\n        window.addEventListener('popstate', () => {\r\n            this.checkIfPageChanged('popstate');\r\n        });\r\n        \r\n        // Monitor DOM changes\r\n        this.mutationObserver = new MutationObserver(() => {\r\n            this.debouncedPageCheck();\r\n        });\r\n        \r\n        this.mutationObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true,\r\n            attributes: false,\r\n            characterData: false\r\n        });\r\n    }\r\n    \r\n    debouncedPageCheck() {\r\n        if (this.pageDebounceTimer) {\r\n            clearTimeout(this.pageDebounceTimer);\r\n        }\r\n        \r\n        this.pageDebounceTimer = setTimeout(() => {\r\n            if (this.currentUrl !== window.location.href) {\r\n                this.checkIfPageChanged('mutation');\r\n            }\r\n        }, 800);\r\n    }\r\n    \r\n    checkIfPageChanged(trigger) {\r\n        const newUrl = window.location.href;\r\n        \r\n        // Skip if same URL (but allow initial load)\r\n        if (newUrl === this.currentUrl && trigger !== 'initial_load') {\r\n            return;\r\n        }\r\n        \r\n        console.log(`[SafeSignal] Page changed (${trigger}): ${newUrl}`);\r\n        \r\n        // Check cooldown (skip for initial load)\r\n        if (trigger !== 'initial_load') {\r\n            const lastCheck = this.lastCheckByUrl.get(newUrl);\r\n            const now = Date.now();\r\n            \r\n            if (lastCheck && (now - lastCheck) < this.checkCooldown) {\r\n                console.log('[SafeSignal] Skipping check - cooldown active');\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Update current URL\r\n        this.currentUrl = newUrl;\r\n        \r\n        // Update state to checking\r\n        this.updateBadgeState('checking');\r\n        \r\n        // Perform page analysis\r\n        this.analyzePage(newUrl);\r\n    }\r\n    \r\n    async analyzePage(url) {\r\n        try {\r\n            console.log('[SafeSignal] Analyzing page...');\r\n            \r\n            // Quick context analysis for demo\r\n            const context = this.contextProbe.analyze();\r\n            console.log('[SafeSignal] Context analysis:', context);\r\n            \r\n            // Simulate API call (replace with actual API integration)\r\n            await new Promise(resolve => setTimeout(resolve, 1500));\r\n            \r\n            // Demo: Assign states based on simple heuristics\r\n            let state = 'ok'; // Default to safe\r\n            \r\n            // Check for suspicious patterns\r\n            const pageText = document.body.innerText?.toLowerCase() || '';\r\n            const suspiciousTerms = [\r\n                'urgent', 'act now', 'limited time', 'virus detected', \r\n                'winner', 'congratulations', 'claim your', 'verify account',\r\n                'suspended', 'click here immediately', 'confirm identity'\r\n            ];\r\n            \r\n            const warningTerms = [\r\n                'sale', 'discount', 'offer', 'deal', 'subscribe',\r\n                'download', 'update required', 'install'\r\n            ];\r\n            \r\n            // Count suspicious indicators\r\n            const suspiciousCount = suspiciousTerms.filter(term => pageText.includes(term)).length;\r\n            const warningCount = warningTerms.filter(term => pageText.includes(term)).length;\r\n            \r\n            // Determine state based on indicators\r\n            if (suspiciousCount >= 3) {\r\n                state = 'danger';\r\n            } else if (suspiciousCount >= 1 || warningCount >= 3) {\r\n                state = 'warning';\r\n            } else {\r\n                // Check URL patterns\r\n                const urlLower = url.toLowerCase();\r\n                if (urlLower.includes('phishing') || urlLower.includes('suspicious')) {\r\n                    state = 'danger';\r\n                } else if (urlLower.includes('shop') || urlLower.includes('promo')) {\r\n                    state = 'warning';\r\n                }\r\n            }\r\n            \r\n            console.log(`[SafeSignal] Analysis complete: ${state}`);\r\n            this.updateBadgeState(state);\r\n            this.lastCheckByUrl.set(url, Date.now());\r\n            \r\n        } catch (error) {\r\n            console.error('[SafeSignal] Analysis failed:', error);\r\n            this.updateBadgeState('ok'); // Default to safe on error\r\n        }\r\n    }\r\n    \r\n    // ==================== KEYBOARD SHORTCUTS ====================\r\n    \r\n    setupKeyboardShortcuts() {\r\n        document.addEventListener('keydown', (e) => {\r\n            // Alt+S to toggle SafeSignal visibility\r\n            if (e.altKey && e.key === 's') {\r\n                e.preventDefault();\r\n                this.toggleVisibility();\r\n            }\r\n            \r\n            // Escape to close menu/modal\r\n            if (e.key === 'Escape') {\r\n                if (this.activeModal) {\r\n                    this.closeModal();\r\n                } else if (this.isMenuOpen) {\r\n                    this.closeMenu();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    toggleVisibility() {\r\n        if (this.host.style.display === 'none') {\r\n            this.host.style.display = '';\r\n            console.log('[SafeSignal] Badge shown');\r\n        } else {\r\n            this.host.style.display = 'none';\r\n            console.log('[SafeSignal] Badge hidden');\r\n        }\r\n    }\r\n    \r\n    // ==================== RESIZE HANDLER ====================\r\n    \r\n    setupResizeHandler() {\r\n        let resizeTimer;\r\n        \r\n        window.addEventListener('resize', () => {\r\n            if (resizeTimer) {\r\n                clearTimeout(resizeTimer);\r\n            }\r\n            \r\n            resizeTimer = setTimeout(() => {\r\n                // Ensure badge stays visible after resize\r\n                const rect = this.container.getBoundingClientRect();\r\n                if (rect.right > window.innerWidth || rect.bottom > window.innerHeight) {\r\n                    console.log('[SafeSignal] Adjusting position after resize');\r\n                    this.setPosition(this.position);\r\n                }\r\n            }, 250);\r\n        });\r\n    }\r\n    \r\n    // ==================== USER PREFERENCES ====================\r\n    \r\n    async loadUserPreferences() {\r\n        try {\r\n            const stored = await chrome.storage.sync.get([\r\n                'position',\r\n                'sizeMode',\r\n                'miniChipsEnabled'\r\n            ]);\r\n            \r\n            if (stored.position) {\r\n                this.userPreferences.position = stored.position;\r\n            }\r\n            \r\n            if (stored.sizeMode) {\r\n                this.userPreferences.sizeMode = stored.sizeMode;\r\n                this.sizeMode = stored.sizeMode;\r\n            }\r\n            \r\n            if (stored.miniChipsEnabled !== undefined) {\r\n                this.userPreferences.miniChipsEnabled = stored.miniChipsEnabled;\r\n            }\r\n            \r\n            console.log('[SafeSignal] Preferences loaded:', this.userPreferences);\r\n        } catch (error) {\r\n            console.warn('[SafeSignal] Could not load preferences:', error);\r\n            // Use defaults if storage fails\r\n        }\r\n    }\r\n    \r\n    async saveUserPreferences() {\r\n        try {\r\n            await chrome.storage.sync.set({\r\n                position: this.userPreferences.position,\r\n                sizeMode: this.userPreferences.sizeMode,\r\n                miniChipsEnabled: this.userPreferences.miniChipsEnabled\r\n            });\r\n            \r\n            console.log('[SafeSignal] Preferences saved');\r\n        } catch (error) {\r\n            console.warn('[SafeSignal] Could not save preferences:', error);\r\n        }\r\n    }\r\n    \r\n    // ==================== CLEANUP ====================\r\n    \r\n    destroy() {\r\n        // Remove event listeners\r\n        document.removeEventListener('click', this.documentClickHandler);\r\n        \r\n        // Disconnect observers\r\n        if (this.mutationObserver) {\r\n            this.mutationObserver.disconnect();\r\n        }\r\n        \r\n        // Clear timers\r\n        if (this.pageDebounceTimer) {\r\n            clearTimeout(this.pageDebounceTimer);\r\n        }\r\n        \r\n        // Remove DOM\r\n        if (this.host && this.host.parentNode) {\r\n            this.host.parentNode.removeChild(this.host);\r\n        }\r\n        \r\n        console.log('[SafeSignal] Badge destroyed');\r\n    }\r\n}\r\n\r\n// ==================== CONTEXT DETECTION ====================\r\n\r\nclass SafeSignalContextProbe {\r\n    constructor() {\r\n        this.indicators = {\r\n            product: {\r\n                terms: ['buy', 'price', 'cart', 'checkout', 'shipping', 'product', 'shop', 'store', 'deal', 'discount', 'sale', 'order', 'purchase', 'payment'],\r\n                selectors: ['[itemtype*=\"schema.org/Product\"]', '[data-price]', '.price', '.product', '.add-to-cart', '#buy-button'],\r\n                patterns: [/\\$\\d+/, /USD \\d+/, /€\\d+/, /£\\d+/]\r\n            },\r\n            health: {\r\n                terms: ['symptom', 'treatment', 'medicine', 'drug', 'cure', 'therapy', 'doctor', 'medical', 'health', 'disease', 'condition', 'diagnosis', 'prescription'],\r\n                selectors: ['[itemtype*=\"schema.org/MedicalCondition\"]', '[itemtype*=\"schema.org/Drug\"]', '.medical', '.health-info'],\r\n                suspiciousTerms: ['miracle', 'breakthrough', 'secret', 'one weird trick', 'doctors hate', 'instant relief', 'guaranteed cure']\r\n            }\r\n        };\r\n    }\r\n    \r\n    analyze() {\r\n        const results = {\r\n            product: { confidence: 0, signals: [] },\r\n            health: { confidence: 0, signals: [] }\r\n        };\r\n        \r\n        // Get page content\r\n        const pageText = this.getPageText();\r\n        const pageTitle = document.title.toLowerCase();\r\n        const pageUrl = window.location.href.toLowerCase();\r\n        \r\n        // Analyze product signals\r\n        results.product = this.analyzeProductSignals(pageText, pageTitle, pageUrl);\r\n        \r\n        // Analyze health signals\r\n        results.health = this.analyzeHealthSignals(pageText, pageTitle, pageUrl);\r\n        \r\n        return results;\r\n    }\r\n    \r\n    getPageText() {\r\n        // Get text from main content areas\r\n        const contentSelectors = ['main', 'article', '[role=\"main\"]', '#content', '.content'];\r\n        let text = '';\r\n        \r\n        for (const selector of contentSelectors) {\r\n            const element = document.querySelector(selector);\r\n            if (element) {\r\n                text += (element.innerText || element.textContent || '') + ' ';\r\n            }\r\n        }\r\n        \r\n        // Fallback to body if no main content found\r\n        if (!text.trim()) {\r\n            const bodyText = document.body.innerText || document.body.textContent || '';\r\n            text = bodyText;\r\n        }\r\n        \r\n        return text.toLowerCase().slice(0, 5000); // Limit to first 5000 chars\r\n    }\r\n    \r\n    analyzeProductSignals(pageText, pageTitle, pageUrl) {\r\n        let confidence = 0;\r\n        const signals = [];\r\n        \r\n        // Check for product terms\r\n        const termMatches = this.indicators.product.terms.filter(term => \r\n            pageText.includes(term) || pageTitle.includes(term)\r\n        );\r\n        \r\n        if (termMatches.length > 0) {\r\n            confidence += Math.min(termMatches.length * 0.1, 0.4);\r\n            signals.push(`Found ${termMatches.length} shopping terms`);\r\n        }\r\n        \r\n        // Check for product selectors\r\n        const selectorMatches = this.indicators.product.selectors.filter(selector => {\r\n            try {\r\n                return document.querySelector(selector) !== null;\r\n            } catch (e) {\r\n                return false; // Invalid selector\r\n            }\r\n        });\r\n        \r\n        if (selectorMatches.length > 0) {\r\n            confidence += Math.min(selectorMatches.length * 0.2, 0.4);\r\n            signals.push(`Found ${selectorMatches.length} product elements`);\r\n        }\r\n        \r\n        // Check for price patterns\r\n        const priceMatches = this.indicators.product.patterns.filter(pattern =>\r\n            pattern.test(pageText)\r\n        );\r\n        \r\n        if (priceMatches.length > 0) {\r\n            confidence += 0.2;\r\n            signals.push('Found price indicators');\r\n        }\r\n        \r\n        // Check URL patterns\r\n        if (/shop|store|product|cart|checkout|buy/.test(pageUrl)) {\r\n            confidence += 0.2;\r\n            signals.push('Shopping URL pattern');\r\n        }\r\n        \r\n        return { confidence: Math.min(confidence, 1), signals };\r\n    }\r\n    \r\n    analyzeHealthSignals(pageText, pageTitle, pageUrl) {\r\n        let confidence = 0;\r\n        const signals = [];\r\n        \r\n        // Check for health terms\r\n        const termMatches = this.indicators.health.terms.filter(term =>\r\n            pageText.includes(term) || pageTitle.includes(term)\r\n        );\r\n        \r\n        if (termMatches.length > 0) {\r\n            confidence += Math.min(termMatches.length * 0.1, 0.4);\r\n            signals.push(`Found ${termMatches.length} health terms`);\r\n        }\r\n        \r\n        // Check for suspicious health claims\r\n        const suspiciousMatches = this.indicators.health.suspiciousTerms.filter(term =>\r\n            pageText.includes(term)\r\n        );\r\n        \r\n        if (suspiciousMatches.length > 0) {\r\n            confidence += Math.min(suspiciousMatches.length * 0.15, 0.3);\r\n            signals.push('Detected suspicious health claims');\r\n        }\r\n        \r\n        // Check for health selectors\r\n        const selectorMatches = this.indicators.health.selectors.filter(selector => {\r\n            try {\r\n                return document.querySelector(selector) !== null;\r\n            } catch (e) {\r\n                return false; // Invalid selector\r\n            }\r\n        });\r\n        \r\n        if (selectorMatches.length > 0) {\r\n            confidence += 0.2;\r\n            signals.push('Found health-related markup');\r\n        }\r\n        \r\n        // Check URL patterns\r\n        if (/health|medical|medicine|treatment|symptom|drug/.test(pageUrl)) {\r\n            confidence += 0.2;\r\n            signals.push('Health URL pattern');\r\n        }\r\n        \r\n        return { confidence: Math.min(confidence, 1), signals };\r\n    }\r\n}\r\n\r\n// ==================== INITIALIZATION ====================\r\n\r\nfunction initializeSafeSignal() {\r\n    // Clean up any existing instance\r\n    if (window.safeSignalInstance) {\r\n        window.safeSignalInstance.destroy();\r\n        window.safeSignalInstance = null;\r\n    }\r\n    \r\n    // Create new instance\r\n    window.safeSignalInstance = new SafeSignalBadge();\r\n    \r\n    console.log('[SafeSignal] Extension initialized');\r\n}\r\n\r\n// Wait for DOM to be ready\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeSafeSignal);\r\n} else {\r\n    // DOM is already loaded, initialize immediately\r\n    initializeSafeSignal();\r\n}\r\n\r\n// Handle dynamic iframe injections\r\nif (window.self === window.top) {\r\n    // Only in main window, not iframes\r\n    console.log('[SafeSignal] Content script loaded in main window');\r\n}\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = { SafeSignalBadge, SafeSignalContextProbe };\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(611);\n",""],"names":[],"sourceRoot":""}