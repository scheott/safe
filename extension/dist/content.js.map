{"version":3,"file":"content.js","mappingshzhlrsources":["webpack://safesignal-extension/./src/content/scanners.js","webpack://safesignal-extension/./src/content/services/chipCooldown.js","webpack://safesignal-extension/./src/content/components/AssistModal.js","webpack://safesignal-extension/./src/content/services/intentScorer.js","webpack://safesignal-extension/./src/content/services/chipManager.js","webpack://safesignal-extension/./src/content/services/chipCache.js","webpack://safesignal-extension/./src/content/services/subjectExtractor.js","webpack://safesignal-extension/./src/content/content.js","webpack://safesignal-extension/./src/content/services/pageClassifier.js","webpack://safesignal-extension/webpack/bootstrap","webpack://safesignal-extension/webpack/runtime/define property getters","webpack://safesignal-extension/webpack/runtime/harmony module decorator","webpack://safesignal-extension/webpack/runtime/hasOwnProperty shorthand","webpack://safesignal-extension/webpack/before-startup","webpack://safesignal-extension/webpack/startup","webpack://safesignal-extension/webpack/after-startup"],"sourcesContent":["// extension/src/content/scanners.js\r\n// Phase 2.5 - Health & Product Scanning UI\r\n// Connects to backend scan endpoints and displays results\r\n\r\nconst API_BASE_URL = 'http://localhost:8000'; // TODO: Update to production URL\r\n\r\n// ============================================================================\r\n// API CLIENT\r\n// ============================================================================\r\n\r\nclass APIClient {\r\n  constructor(baseUrl) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n  \r\n  async post(endpoint, data) {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data)\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n      \r\n    } catch (error) {\r\n      console.error(`API call failed: ${endpoint}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// PAGE SCANNER - Detects context and calls appropriate endpoints\r\n// ============================================================================\r\n\r\nclass PageScanner {\r\n  constructor(apiClient) {\r\n    this.api = apiClient;\r\n    this.cache = new Map();\r\n    this.cacheTimeout = 30 * 60 * 1000; // 30 minutes\r\n  }\r\n  \r\n  // =========================================================================\r\n  // CONTEXT DETECTION\r\n  // =========================================================================\r\n  \r\n  detectProductContext() {\r\n    const hints = {\r\n      product_name: '',\r\n      title: ''\r\n    };\r\n    \r\n    // Try to extract product name from page\r\n    const titleEl = document.querySelector('h1, [class*=\"product-title\"], [class*=\"productTitle\"]');\r\n    if (titleEl) {\r\n      hints.product_name = titleEl.textContent.trim();\r\n    }\r\n    \r\n    // Fallback to page title\r\n    hints.title = document.title;\r\n    \r\n    // Look for product indicators\r\n    const isProduct = this._hasProductIndicators();\r\n    \r\n    return { hints, confidence: isProduct ? 0.8 : 0.3 };\r\n  }\r\n  \r\n  detectHealthContext() {\r\n    const hints = {\r\n      title: '',\r\n      claims_text: ''\r\n    };\r\n    \r\n    // Get page title\r\n    hints.title = document.title;\r\n    \r\n    // Get main content sample\r\n    const mainContent = document.querySelector('main, article, [role=\"main\"], .content');\r\n    if (mainContent) {\r\n      const text = mainContent.textContent.trim();\r\n      hints.claims_text = text.substring(0, 500);\r\n    }\r\n    \r\n    // Check for health indicators\r\n    const isHealth = this._hasHealthIndicators();\r\n    \r\n    return { hints, confidence: isHealth ? 0.8 : 0.3 };\r\n  }\r\n  \r\n  _hasProductIndicators() {\r\n    const indicators = [\r\n      document.querySelector('[class*=\"product\"]'),\r\n      document.querySelector('[class*=\"cart\"]'),\r\n      document.querySelector('[class*=\"price\"]'),\r\n      document.querySelector('[itemtype*=\"Product\"]'),\r\n      /buy|purchase|cart|price|\\$\\d+/i.test(document.body.textContent)\r\n    ];\r\n    \r\n    return indicators.filter(Boolean).length >= 2;\r\n  }\r\n  \r\n  _hasHealthIndicators() {\r\n    const indicators = [\r\n      /health|medical|symptom|disease|treatment|diagnosis/i.test(document.title),\r\n      document.querySelector('[class*=\"health\"], [class*=\"medical\"]'),\r\n      /CDC|NIH|Mayo Clinic|WebMD/i.test(document.body.textContent)\r\n    ];\r\n    \r\n    return indicators.filter(Boolean).length >= 1;\r\n  }\r\n  \r\n  // =========================================================================\r\n  // SCAN METHODS\r\n  // =========================================================================\r\n  \r\n  async scanProduct(url, mode = 'fast') {\r\n    const cacheKey = `product:${url}`;\r\n    \r\n    // Check cache\r\n    const cached = this.getCache(cacheKey);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    \r\n    // Detect product context\r\n    const { hints } = this.detectProductContext();\r\n    \r\n    try {\r\n      const response = await this.api.post('/api/scan/product', {\r\n        url,\r\n        hints,\r\n        mode\r\n      });\r\n      \r\n      // Cache successful response\r\n      this.setCache(cacheKey, response);\r\n      \r\n      return response;\r\n      \r\n    } catch (error) {\r\n      console.error('Product scan failed:', error);\r\n      \r\n      // Return error response\r\n      return {\r\n        product_name: hints.product_name,\r\n        advisory: \"Unable to check this site right now.\",\r\n        risk_signals: [],\r\n        compare_links: this._getFallbackRetailers(hints.product_name),\r\n        latency_ms: 0,\r\n        from_cache: false,\r\n        error: true\r\n      };\r\n    }\r\n  }\r\n  \r\n  async scanHealth(url, mode = 'fast') {\r\n    const cacheKey = `health:${url}`;\r\n    \r\n    // Check cache\r\n    const cached = this.getCache(cacheKey);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    \r\n    // Detect health context\r\n    const { hints } = this.detectHealthContext();\r\n    \r\n    try {\r\n      const response = await this.api.post('/api/scan/health', {\r\n        url,\r\n        hints,\r\n        mode\r\n      });\r\n      \r\n      // Cache successful response\r\n      this.setCache(cacheKey, response);\r\n      \r\n      return response;\r\n      \r\n    } catch (error) {\r\n      console.error('Health scan failed:', error);\r\n      \r\n      // Return error response with fallback links\r\n      return {\r\n        topic: hints.title || 'health information',\r\n        verdict: 'uncertain',\r\n        bullets: [\r\n          \"We couldn't check health sources right now.\",\r\n          \"Please use the trusted medical links below.\"\r\n        ],\r\n        citations: this._getFallbackHealthSources(hints.title),\r\n        latency_ms: 0,\r\n        from_cache: false,\r\n        error: true\r\n      };\r\n    }\r\n  }\r\n  \r\n  // =========================================================================\r\n  // FALLBACK HELPERS\r\n  // =========================================================================\r\n  \r\n  _getFallbackRetailers(productName) {\r\n    const query = encodeURIComponent(productName || 'product search');\r\n    return [\r\n      { retailer: 'Amazon', url: `https://www.amazon.com/s?k=${query}` },\r\n      { retailer: 'Target', url: `https://www.target.com/s?searchTerm=${query}` },\r\n      { retailer: 'Walmart', url: `https://www.walmart.com/search?q=${query}` },\r\n      { retailer: 'Google Shopping', url: `https://www.google.com/search?tbm=shop&q=${query}` }\r\n    ];\r\n  }\r\n  \r\n  _getFallbackHealthSources(topic) {\r\n    const query = encodeURIComponent(topic || 'health');\r\n    return [\r\n      { name: 'CDC', url: `https://search.cdc.gov/search/?query=${query}` },\r\n      { name: 'NIH', url: `https://search.nih.gov/search?q=${query}` },\r\n      { name: 'Mayo Clinic', url: `https://www.mayoclinic.org/search/search-results?q=${query}` },\r\n      { name: 'MedlinePlus', url: `https://medlineplus.gov/search.html?query=${query}` }\r\n    ];\r\n  }\r\n  \r\n  // =========================================================================\r\n  // CACHE MANAGEMENT\r\n  // =========================================================================\r\n  \r\n  getCache(key) {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n    \r\n    if (Date.now() > item.expires) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return item.data;\r\n  }\r\n  \r\n  setCache(key, data) {\r\n    this.cache.set(key, {\r\n      data,\r\n      expires: Date.now() + this.cacheTimeout\r\n    });\r\n    \r\n    // Cleanup if cache gets too big\r\n    if (this.cache.size > 100) {\r\n      const oldestKey = this.cache.keys().next().value;\r\n      this.cache.delete(oldestKey);\r\n    }\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// SCANNER UI - Modal rendering and interactions\r\n// ============================================================================\r\n\r\nclass ScannerUI {\r\n  constructor(scanner, shadowRoot) {\r\n    this.scanner = scanner;\r\n    this.shadowRoot = shadowRoot;\r\n    this.activeModal = null;\r\n    \r\n    this.addStyles();\r\n  }\r\n  \r\n  // =========================================================================\r\n  // BUTTON CLICK HANDLERS\r\n  // =========================================================================\r\n  \r\n  async handleHealthScan() {\r\n    this.showLoadingModal('Checking trusted medical sources...');\r\n    \r\n    try {\r\n      const response = await this.scanner.scanHealth(window.location.href, 'fast');\r\n      this.showHealthResults(response);\r\n      \r\n    } catch (error) {\r\n      this.showErrorModal('health', error);\r\n    }\r\n  }\r\n  \r\n  async handleProductScan() {\r\n    this.showLoadingModal('Finding trusted retailers...');\r\n    \r\n    try {\r\n      const response = await this.scanner.scanProduct(window.location.href, 'fast');\r\n      this.showProductResults(response);\r\n      \r\n    } catch (error) {\r\n      this.showErrorModal('product', error);\r\n    }\r\n  }\r\n  \r\n  // =========================================================================\r\n  // RESULT RENDERING\r\n  // =========================================================================\r\n  \r\n  showHealthResults(data) {\r\n    const verdictEmoji = {\r\n      'safe': '✅',\r\n      'mixed': '⚠️',\r\n      'harmful': '❌',\r\n      'uncertain': '❓'\r\n    };\r\n    \r\n    const modal = this.createModal();\r\n    modal.innerHTML = `\r\n      <div class=\"ss-modal-content ss-health\">\r\n        <div class=\"ss-modal-header\">\r\n          <h3>🩺 Health Information Check</h3>\r\n          <button class=\"ss-close-btn\" aria-label=\"Close\">×</button>\r\n        </div>\r\n        \r\n        <div class=\"ss-topic-badge\">\r\n          ${this.escapeHtml(data.topic)}\r\n        </div>\r\n        \r\n        <div class=\"ss-verdict-badge ss-verdict-${data.verdict}\">\r\n          ${verdictEmoji[data.verdict]} ${this.formatVerdict(data.verdict)}\r\n        </div>\r\n        \r\n        <div class=\"ss-summary\">\r\n          ${data.bullets.map(bullet => `\r\n            <p class=\"ss-bullet\">• ${this.escapeHtml(bullet)}</p>\r\n          `).join('')}\r\n        </div>\r\n        \r\n        <div class=\"ss-citations\">\r\n          <p class=\"ss-citations-label\">Read more from trusted sources:</p>\r\n          ${data.citations.map(citation => `\r\n            <a href=\"${citation.url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"ss-citation-link\">\r\n              <span class=\"ss-citation-name\">${this.escapeHtml(citation.name)}</span>\r\n              <span class=\"ss-arrow\">→</span>\r\n            </a>\r\n          `).join('')}\r\n        </div>\r\n        \r\n        <p class=\"ss-disclaimer\">\r\n          ⚕️ This is informational only. Always consult a healthcare provider for medical advice.\r\n        </p>\r\n        \r\n        ${data.from_cache ? '<p class=\"ss-cache-note\">Previously checked result</p>' : ''}\r\n      </div>\r\n    `;\r\n    \r\n    this.attachModalHandlers(modal);\r\n    this.showModal(modal);\r\n  }\r\n  \r\n  showProductResults(data) {\r\n    const modal = this.createModal();\r\n    \r\n    modal.innerHTML = `\r\n      <div class=\"ss-modal-content ss-product\">\r\n        <div class=\"ss-modal-header\">\r\n          <h3>🛒 Compare Before You Buy</h3>\r\n          <button class=\"ss-close-btn\" aria-label=\"Close\">×</button>\r\n        </div>\r\n        \r\n        ${data.product_name ? `\r\n          <div class=\"ss-product-name\">\r\n            ${this.escapeHtml(data.product_name)}\r\n          </div>\r\n        ` : ''}\r\n        \r\n        <p class=\"ss-advisory\">${this.escapeHtml(data.advisory)}</p>\r\n        \r\n        ${data.risk_signals.length > 0 ? `\r\n          <div class=\"ss-risk-signals\">\r\n            <p class=\"ss-risk-label\">⚠️ We noticed on this page:</p>\r\n            <div class=\"ss-risk-chips\">\r\n              ${data.risk_signals.map(signal => `\r\n                <span class=\"ss-risk-chip\">${this.escapeHtml(this.formatRiskSignal(signal))}</span>\r\n              `).join('')}\r\n            </div>\r\n          </div>\r\n        ` : ''}\r\n        \r\n        <div class=\"ss-compare-section\">\r\n          <p class=\"ss-compare-label\">Compare on trusted retailers:</p>\r\n          <div class=\"ss-retailer-buttons\">\r\n            ${data.compare_links.map(link => `\r\n              <a href=\"${link.url}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"ss-retailer-btn\">\r\n                ${this.getRetailerIcon(link.retailer)}\r\n                <span>${this.escapeHtml(link.retailer)}</span>\r\n              </a>\r\n            `).join('')}\r\n          </div>\r\n        </div>\r\n        \r\n        ${data.from_cache ? '<p class=\"ss-cache-note\">Previously checked result</p>' : ''}\r\n      </div>\r\n    `;\r\n    \r\n    this.attachModalHandlers(modal);\r\n    this.showModal(modal);\r\n  }\r\n  \r\n  showLoadingModal(message) {\r\n    const modal = this.createModal();\r\n    modal.innerHTML = `\r\n      <div class=\"ss-modal-content ss-loading\">\r\n        <div class=\"ss-spinner\"></div>\r\n        <p>${this.escapeHtml(message)}</p>\r\n      </div>\r\n    `;\r\n    \r\n    this.showModal(modal);\r\n    return modal;\r\n  }\r\n  \r\n  showErrorModal(scanType, error) {\r\n    const configs = {\r\n      'health': {\r\n        title: '🩺 Health Check Unavailable',\r\n        body: \"We couldn't check health sources right now. Please try again or check the trusted medical sites directly.\",\r\n        links: [\r\n          { name: 'CDC', url: 'https://www.cdc.gov' },\r\n          { name: 'NIH', url: 'https://www.nih.gov' },\r\n          { name: 'Mayo Clinic', url: 'https://www.mayoclinic.org' }\r\n        ]\r\n      },\r\n      'product': {\r\n        title: '🛒 Comparison Unavailable',\r\n        body: \"We couldn't generate comparison links right now. Try searching directly on trusted retailers.\",\r\n        links: [\r\n          { name: 'Amazon', url: 'https://www.amazon.com' },\r\n          { name: 'Target', url: 'https://www.target.com' },\r\n          { name: 'Walmart', url: 'https://www.walmart.com' }\r\n        ]\r\n      }\r\n    };\r\n    \r\n    const config = configs[scanType];\r\n    const modal = this.createModal();\r\n    \r\n    modal.innerHTML = `\r\n      <div class=\"ss-modal-content ss-error\">\r\n        <div class=\"ss-modal-header\">\r\n          <h3>${config.title}</h3>\r\n          <button class=\"ss-close-btn\" aria-label=\"Close\">×</button>\r\n        </div>\r\n        <p class=\"ss-error-body\">${config.body}</p>\r\n        <div class=\"ss-fallback-links\">\r\n          ${config.links.map(link => `\r\n            <a href=\"${link.url}\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              ${this.escapeHtml(link.name)} →\r\n            </a>\r\n          `).join('')}\r\n        </div>\r\n        <button class=\"ss-retry-btn\">Try Again</button>\r\n      </div>\r\n    `;\r\n    \r\n    this.attachModalHandlers(modal, scanType);\r\n    this.showModal(modal);\r\n  }\r\n  \r\n  // =========================================================================\r\n  // MODAL MANAGEMENT\r\n  // =========================================================================\r\n  \r\n  createModal() {\r\n    const modal = document.createElement('div');\r\n    modal.className = 'ss-modal-overlay';\r\n    return modal;\r\n  }\r\n  \r\n  showModal(modal) {\r\n    // Remove any existing modal\r\n    if (this.activeModal) {\r\n      this.activeModal.remove();\r\n    }\r\n    \r\n    // Add to shadow root\r\n    this.shadowRoot.appendChild(modal);\r\n    this.activeModal = modal;\r\n    \r\n    // Animate in\r\n    requestAnimationFrame(() => {\r\n      modal.classList.add('ss-visible');\r\n    });\r\n  }\r\n  \r\n  closeModal() {\r\n    if (this.activeModal) {\r\n      this.activeModal.classList.remove('ss-visible');\r\n      setTimeout(() => {\r\n        this.activeModal?.remove();\r\n        this.activeModal = null;\r\n      }, 200);\r\n    }\r\n  }\r\n  \r\n  attachModalHandlers(modal, scanType = null) {\r\n    // Close button\r\n    const closeBtn = modal.querySelector('.ss-close-btn');\r\n    if (closeBtn) {\r\n      closeBtn.addEventListener('click', () => this.closeModal());\r\n    }\r\n    \r\n    // Click outside to close\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        this.closeModal();\r\n      }\r\n    });\r\n    \r\n    // Retry button\r\n    const retryBtn = modal.querySelector('.ss-retry-btn');\r\n    if (retryBtn && scanType) {\r\n      retryBtn.addEventListener('click', () => {\r\n        if (scanType === 'health') {\r\n          this.handleHealthScan();\r\n        } else if (scanType === 'product') {\r\n          this.handleProductScan();\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Escape key to close\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape') {\r\n        this.closeModal();\r\n        document.removeEventListener('keydown', handleEscape);\r\n      }\r\n    };\r\n    document.addEventListener('keydown', handleEscape);\r\n  }\r\n  \r\n  // =========================================================================\r\n  // FORMATTING HELPERS\r\n  // =========================================================================\r\n  \r\n  formatVerdict(verdict) {\r\n    const labels = {\r\n      'safe': 'Generally Safe',\r\n      'mixed': 'Mixed Evidence',\r\n      'harmful': 'Potentially Harmful',\r\n      'uncertain': 'More Research Needed'\r\n    };\r\n    return labels[verdict] || verdict;\r\n  }\r\n  \r\n  formatRiskSignal(signal) {\r\n    const labels = {\r\n      'clickbait_headline': 'Sensational language',\r\n      'offsite_form': 'Unusual checkout',\r\n      'suspicious_domain': 'Unfamiliar website',\r\n      'aggressive_timer': 'Countdown timer',\r\n      'low_domain_rep': 'Unknown site',\r\n      'suspicious_tld': 'Suspicious domain',\r\n      'punycode_domain': 'Look-alike domain'\r\n    };\r\n    return labels[signal] || signal.replace(/_/g, ' ');\r\n  }\r\n  \r\n  getRetailerIcon(retailer) {\r\n    const icons = {\r\n      'Amazon': '📦',\r\n      'Target': '🎯',\r\n      'Walmart': '🏪',\r\n      'Google Shopping': '🔍'\r\n    };\r\n    return icons[retailer] || '🛍️';\r\n  }\r\n  \r\n  escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n  \r\n  // =========================================================================\r\n  // STYLES\r\n  // =========================================================================\r\n  \r\n  addStyles() {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      /* Modal Overlay */\r\n      .ss-modal-overlay {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        background: rgba(0, 0, 0, 0.5);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        z-index: 2147483647;\r\n        opacity: 0;\r\n        transition: opacity 0.2s ease;\r\n      }\r\n      \r\n      .ss-modal-overlay.ss-visible {\r\n        opacity: 1;\r\n      }\r\n      \r\n      /* Modal Content */\r\n      .ss-modal-content {\r\n        background: white;\r\n        border-radius: 16px;\r\n        padding: 24px;\r\n        max-width: 480px;\r\n        width: 90%;\r\n        max-height: 80vh;\r\n        overflow-y: auto;\r\n        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\r\n        transform: scale(0.9);\r\n        transition: transform 0.2s ease;\r\n      }\r\n      \r\n      .ss-visible .ss-modal-content {\r\n        transform: scale(1);\r\n      }\r\n      \r\n      /* Modal Header */\r\n      .ss-modal-header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 16px;\r\n        padding-bottom: 12px;\r\n        border-bottom: 2px solid #e0e0e0;\r\n      }\r\n      \r\n      .ss-modal-header h3 {\r\n        margin: 0;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n        color: #333;\r\n      }\r\n      \r\n      .ss-close-btn {\r\n        background: none;\r\n        border: none;\r\n        font-size: 28px;\r\n        color: #666;\r\n        cursor: pointer;\r\n        padding: 0;\r\n        width: 32px;\r\n        height: 32px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 50%;\r\n        transition: background 0.2s;\r\n      }\r\n      \r\n      .ss-close-btn:hover {\r\n        background: #f0f0f0;\r\n      }\r\n      \r\n      /* Health Results */\r\n      .ss-topic-badge {\r\n        background: #e3f2fd;\r\n        color: #1565c0;\r\n        padding: 8px 12px;\r\n        border-radius: 8px;\r\n        font-weight: 500;\r\n        margin-bottom: 12px;\r\n        font-size: 14px;\r\n      }\r\n      \r\n      .ss-verdict-badge {\r\n        padding: 10px 16px;\r\n        border-radius: 8px;\r\n        font-weight: 600;\r\n        margin-bottom: 16px;\r\n        text-align: center;\r\n        font-size: 16px;\r\n      }\r\n      \r\n      .ss-verdict-safe {\r\n        background: #e8f5e9;\r\n        color: #2e7d32;\r\n      }\r\n      \r\n      .ss-verdict-mixed {\r\n        background: #fff3e0;\r\n        color: #e65100;\r\n      }\r\n      \r\n      .ss-verdict-harmful {\r\n        background: #ffebee;\r\n        color: #c62828;\r\n      }\r\n      \r\n      .ss-verdict-uncertain {\r\n        background: #f5f5f5;\r\n        color: #616161;\r\n      }\r\n      \r\n      .ss-summary {\r\n        margin-bottom: 16px;\r\n      }\r\n      \r\n      .ss-bullet {\r\n        margin: 8px 0;\r\n        font-size: 15px;\r\n        line-height: 1.6;\r\n        color: #424242;\r\n      }\r\n      \r\n      .ss-citations {\r\n        margin-top: 20px;\r\n        padding-top: 16px;\r\n        border-top: 1px solid #e0e0e0;\r\n      }\r\n      \r\n      .ss-citations-label {\r\n        font-weight: 600;\r\n        margin-bottom: 12px;\r\n        color: #424242;\r\n        font-size: 14px;\r\n      }\r\n      \r\n      .ss-citation-link {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 10px 12px;\r\n        background: #f5f5f5;\r\n        border-radius: 8px;\r\n        margin-bottom: 8px;\r\n        text-decoration: none;\r\n        color: #1976d2;\r\n        transition: all 0.2s;\r\n      }\r\n      \r\n      .ss-citation-link:hover {\r\n        background: #e3f2fd;\r\n        transform: translateX(4px);\r\n      }\r\n      \r\n      .ss-citation-name {\r\n        font-weight: 500;\r\n      }\r\n      \r\n      .ss-arrow {\r\n        font-size: 18px;\r\n      }\r\n      \r\n      .ss-disclaimer {\r\n        margin-top: 16px;\r\n        padding: 12px;\r\n        background: #fff9c4;\r\n        border-radius: 8px;\r\n        font-size: 13px;\r\n        color: #827717;\r\n        line-height: 1.5;\r\n      }\r\n      \r\n      /* Product Results */\r\n      .ss-product-name {\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n        color: #333;\r\n        margin-bottom: 12px;\r\n        padding: 12px;\r\n        background: #f5f5f5;\r\n        border-radius: 8px;\r\n      }\r\n      \r\n      .ss-advisory {\r\n        font-size: 15px;\r\n        color: #424242;\r\n        margin-bottom: 16px;\r\n        line-height: 1.6;\r\n      }\r\n      \r\n      .ss-risk-signals {\r\n        margin-bottom: 20px;\r\n        padding: 12px;\r\n        background: #fff3e0;\r\n        border-radius: 8px;\r\n      }\r\n      \r\n      .ss-risk-label {\r\n        font-weight: 600;\r\n        color: #e65100;\r\n        margin-bottom: 8px;\r\n        font-size: 14px;\r\n      }\r\n      \r\n      .ss-risk-chips {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        gap: 6px;\r\n      }\r\n      \r\n      .ss-risk-chip {\r\n        display: inline-block;\r\n        padding: 4px 10px;\r\n        background: white;\r\n        border: 1px solid #ffb74d;\r\n        border-radius: 12px;\r\n        font-size: 12px;\r\n        color: #e65100;\r\n      }\r\n      \r\n      .ss-compare-section {\r\n        margin-top: 20px;\r\n        padding-top: 16px;\r\n        border-top: 1px solid #e0e0e0;\r\n      }\r\n      \r\n      .ss-compare-label {\r\n        font-weight: 600;\r\n        margin-bottom: 12px;\r\n        color: #424242;\r\n        font-size: 14px;\r\n      }\r\n      \r\n      .ss-retailer-buttons {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        gap: 10px;\r\n      }\r\n      \r\n      .ss-retailer-btn {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        gap: 8px;\r\n        padding: 12px;\r\n        background: white;\r\n        border: 2px solid #e0e0e0;\r\n        border-radius: 8px;\r\n        text-decoration: none;\r\n        color: #424242;\r\n        font-weight: 500;\r\n        font-size: 14px;\r\n        transition: all 0.2s;\r\n      }\r\n      \r\n      .ss-retailer-btn:hover {\r\n        border-color: #1976d2;\r\n        background: #e3f2fd;\r\n        transform: translateY(-2px);\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n      }\r\n      \r\n      /* Loading State */\r\n      .ss-loading {\r\n        text-align: center;\r\n        padding: 40px 24px;\r\n      }\r\n      \r\n      .ss-spinner {\r\n        width: 48px;\r\n        height: 48px;\r\n        border: 4px solid #e0e0e0;\r\n        border-top-color: #1976d2;\r\n        border-radius: 50%;\r\n        animation: ss-spin 0.8s linear infinite;\r\n        margin: 0 auto 16px;\r\n      }\r\n      \r\n      @keyframes ss-spin {\r\n        to { transform: rotate(360deg); }\r\n      }\r\n      \r\n      .ss-loading p {\r\n        color: #666;\r\n        font-size: 15px;\r\n      }\r\n      \r\n      /* Error State */\r\n      .ss-error-body {\r\n        font-size: 15px;\r\n        color: #424242;\r\n        line-height: 1.6;\r\n        margin-bottom: 16px;\r\n      }\r\n      \r\n      .ss-fallback-links {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 8px;\r\n        margin-bottom: 16px;\r\n      }\r\n      \r\n      .ss-fallback-links a {\r\n        padding: 10px 12px;\r\n        background: #f5f5f5;\r\n        border-radius: 8px;\r\n        text-decoration: none;\r\n        color: #1976d2;\r\n        font-weight: 500;\r\n        transition: all 0.2s;\r\n      }\r\n      \r\n      .ss-fallback-links a:hover {\r\n        background: #e3f2fd;\r\n      }\r\n      \r\n      .ss-retry-btn {\r\n        width: 100%;\r\n        padding: 12px;\r\n        background: #1976d2;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 8px;\r\n        font-weight: 600;\r\n        font-size: 15px;\r\n        cursor: pointer;\r\n        transition: background 0.2s;\r\n      }\r\n      \r\n      .ss-retry-btn:hover {\r\n        background: #1565c0;\r\n      }\r\n      \r\n      /* Cache Note */\r\n      .ss-cache-note {\r\n        margin-top: 12px;\r\n        font-size: 12px;\r\n        color: #9e9e9e;\r\n        text-align: center;\r\n      }\r\n      \r\n      /* Scrollbar Styling */\r\n      .ss-modal-content::-webkit-scrollbar {\r\n        width: 8px;\r\n      }\r\n      \r\n      .ss-modal-content::-webkit-scrollbar-track {\r\n        background: #f5f5f5;\r\n        border-radius: 4px;\r\n      }\r\n      \r\n      .ss-modal-content::-webkit-scrollbar-thumb {\r\n        background: #bdbdbd;\r\n        border-radius: 4px;\r\n      }\r\n      \r\n      .ss-modal-content::-webkit-scrollbar-thumb:hover {\r\n        background: #9e9e9e;\r\n      }\r\n    `;\r\n    \r\n    this.shadowRoot.appendChild(style);\r\n  }\r\n}\r\n\r\n// ============================================================================\r\n// EXPORTS\r\n// ============================================================================\r\n\r\nexport { PageScanner, ScannerUI, APIClient };","class ChipCooldown {\r\n  constructor() {\r\n    // Cooldown periods\r\n    this.urlCooldown = 30 * 60 * 1000;      // 30 minutes for same URL\r\n    this.originCooldown = 24 * 60 * 60 * 1000; // 24 hours for dismissed origins\r\n  }\r\n  \r\n  /**\r\n   * Check all cooldowns for a chip type\r\n   * @returns {object} { blocked: boolean, reason?: string }\r\n   */\r\n  async checkCooldowns(chipType) {\r\n    // Check same-URL cooldown\r\n    const urlCooldown = await this.isOnUrlCooldown(chipType);\r\n    if (urlCooldown) {\r\n      return { blocked: true, reason: 'url_cooldown' };\r\n    }\r\n    \r\n    // Check origin dismissal\r\n    const dismissed = await this.isDismissedOnOrigin(chipType);\r\n    if (dismissed) {\r\n      return { blocked: true, reason: 'user_dismissed' };\r\n    }\r\n    \r\n    return { blocked: false };\r\n  }\r\n  \r\n  /**\r\n   * Check if chip is on URL cooldown\r\n   */\r\n  async isOnUrlCooldown(chipType) {\r\n    const url = window.location.href;\r\n    const cooldownKey = `chip_cooldown:${chipType}:${url}`;\r\n    \r\n    try {\r\n      const result = await chrome.storage.local.get(cooldownKey);\r\n      const lastShown = result[cooldownKey];\r\n      \r\n      if (!lastShown) return false;\r\n      \r\n      const now = Date.now();\r\n      const remaining = (lastShown + this.urlCooldown) - now;\r\n      \r\n      if (remaining > 0) {\r\n        console.log(`[ChipCooldown] ${chipType} on cooldown for ${Math.round(remaining/1000)}s`);\r\n        \r\n        // Track analytics\r\n        this.trackEvent('chip_cooldown_active', {\r\n          chipType,\r\n          cooldownType: 'same_url',\r\n          remainingMs: remaining\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      \r\n      // Cooldown expired, remove it\r\n      await chrome.storage.local.remove(cooldownKey);\r\n      return false;\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCooldown] Error checking URL cooldown:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Set URL cooldown for a chip\r\n   */\r\n  async setUrlCooldown(chipType) {\r\n    const url = window.location.href;\r\n    const cooldownKey = `chip_cooldown:${chipType}:${url}`;\r\n    \r\n    try {\r\n      await chrome.storage.local.set({\r\n        [cooldownKey]: Date.now()\r\n      });\r\n      \r\n      console.log(`[ChipCooldown] Set ${chipType} cooldown for 30min`);\r\n      \r\n      this.trackEvent('chip_cooldown_set', {\r\n        chipType,\r\n        url,\r\n        duration: '30min'\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCooldown] Error setting URL cooldown:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if chip is dismissed on this origin\r\n   */\r\n  async isDismissedOnOrigin(chipType) {\r\n    const origin = window.location.origin;\r\n    const dismissalKey = `chip_dismissed:${chipType}:${origin}`;\r\n    \r\n    try {\r\n      const result = await chrome.storage.local.get(dismissalKey);\r\n      const dismissedAt = result[dismissalKey];\r\n      \r\n      if (!dismissedAt) return false;\r\n      \r\n      const now = Date.now();\r\n      const remaining = (dismissedAt + this.originCooldown) - now;\r\n      \r\n      if (remaining > 0) {\r\n        console.log(`[ChipCooldown] ${chipType} dismissed on origin for ${Math.round(remaining/3600000)}h`);\r\n        return true;\r\n      }\r\n      \r\n      // Dismissal expired, remove it\r\n      await chrome.storage.local.remove(dismissalKey);\r\n      return false;\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCooldown] Error checking dismissal:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Dismiss chip on origin for 24 hours\r\n   */\r\n  async dismissChipOnOrigin(chipType) {\r\n    const origin = window.location.origin;\r\n    const dismissalKey = `chip_dismissed:${chipType}:${origin}`;\r\n    \r\n    try {\r\n      await chrome.storage.local.set({\r\n        [dismissalKey]: Date.now()\r\n      });\r\n      \r\n      console.log(`[ChipCooldown] Dismissed ${chipType} on ${origin} for 24h`);\r\n      \r\n      this.trackEvent('chip_dismissed_by_user', {\r\n        chipType,\r\n        origin,\r\n        duration: '24h'\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCooldown] Error setting dismissal:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Unhide chip on origin (called from badge menu)\r\n   */\r\n  async unhideChipOnOrigin(chipType) {\r\n    const origin = window.location.origin;\r\n    const dismissalKey = `chip_dismissed:${chipType}:${origin}`;\r\n    \r\n    try {\r\n      await chrome.storage.local.remove(dismissalKey);\r\n      \r\n      console.log(`[ChipCooldown] Unhid ${chipType} on ${origin}`);\r\n      \r\n      this.trackEvent('chip_unhidden_by_user', {\r\n        chipType,\r\n        origin\r\n      });\r\n      \r\n      // Trigger re-evaluation\r\n      if (window.chipManager) {\r\n        window.chipManager.reevaluate(chipType);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCooldown] Error unhiding:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get dismissal status for badge menu\r\n   */\r\n  async getDismissalStatus() {\r\n    const origin = window.location.origin;\r\n    \r\n    const [healthDismissed, productDismissed] = await Promise.all([\r\n      this.isDismissedOnOrigin('health'),\r\n      this.isDismissedOnOrigin('product')\r\n    ]);\r\n    \r\n    return {\r\n      health: healthDismissed,\r\n      product: productDismissed,\r\n      origin\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Track analytics event\r\n   */\r\n  trackEvent(eventName, data) {\r\n    console.log(`[ChipCooldown] ${eventName}:`, data);\r\n    \r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track(eventName, data);\r\n    }\r\n  }\r\n}\r\n\r\n// Export classes\r\nexport default ChipCooldown;","// extension/src/components/AssistModal.js\r\n// User confirmation modal for borderline/generic subjects\r\n\r\nclass AssistModal {\r\n  constructor() {\r\n    this.modal = null;\r\n    this.callback = null;\r\n    this.chipType = null;\r\n  }\r\n  \r\n  /**\r\n   * Show the assist modal\r\n   * @param {string} chipType - 'product' or 'health'\r\n   * @param {string} subject - Pre-filled subject\r\n   * @param {function} callback - Called with { action: 'confirm'|'dismiss', subject: string }\r\n   */\r\n  show(chipType, subject, callback) {\r\n    this.chipType = chipType;\r\n    this.callback = callback;\r\n    \r\n    // Remove any existing modal\r\n    this.hide();\r\n    \r\n    // Create modal\r\n    this.createModal(chipType, subject);\r\n    \r\n    // Add to page (inside shadow DOM if available)\r\n    const shadowRoot = document.getElementById('safesignal-host')?.shadowRoot;\r\n    if (shadowRoot) {\r\n      shadowRoot.appendChild(this.modal);\r\n    } else {\r\n      document.body.appendChild(this.modal);\r\n    }\r\n    \r\n    // Focus input\r\n    const input = this.modal.querySelector('#assist-subject-input');\r\n    if (input) {\r\n      input.focus();\r\n      input.select();\r\n    }\r\n    \r\n    // Track analytics\r\n    this.trackEvent('chip_assist_shown', {\r\n      chipType,\r\n      subject,\r\n      reason: 'needs_confirmation'\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Hide the modal\r\n   */\r\n  hide() {\r\n    if (this.modal && this.modal.parentNode) {\r\n      this.modal.parentNode.removeChild(this.modal);\r\n    }\r\n    this.modal = null;\r\n    this.callback = null;\r\n    this.chipType = null;\r\n  }\r\n  \r\n  /**\r\n   * Create the modal DOM\r\n   */\r\n  createModal(chipType, subject) {\r\n    const modal = document.createElement('div');\r\n    modal.className = 'assist-modal-overlay';\r\n    \r\n    // Determine button text based on chip type\r\n    const buttonText = chipType === 'health' ? 'Check with CDC/NIH' : 'Check this product';\r\n    const placeholder = chipType === 'health' ? 'e.g., Intermittent fasting' : 'e.g., Sony WH-1000XM5';\r\n    \r\n    modal.innerHTML = `\r\n      <div class=\"assist-modal\">\r\n        <div class=\"assist-modal-header\">\r\n          What should we check?\r\n        </div>\r\n        <div class=\"assist-modal-body\">\r\n          <input \r\n            type=\"text\" \r\n            id=\"assist-subject-input\"\r\n            class=\"assist-input\"\r\n            value=\"${this.escapeHtml(subject)}\"\r\n            placeholder=\"${placeholder}\"\r\n            maxlength=\"100\"\r\n          />\r\n        </div>\r\n        <div class=\"assist-modal-footer\">\r\n          <button class=\"assist-btn assist-btn-primary\" id=\"assist-confirm\">\r\n            ${buttonText}\r\n          </button>\r\n          <button class=\"assist-btn assist-btn-secondary\" id=\"assist-dismiss\">\r\n            Not now\r\n          </button>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    // Add styles\r\n    this.addStyles(modal);\r\n    \r\n    // Add event listeners\r\n    this.attachEventListeners(modal, subject);\r\n    \r\n    this.modal = modal;\r\n  }\r\n  \r\n  /**\r\n   * Add modal styles\r\n   */\r\n  addStyles(modal) {\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      .assist-modal-overlay {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background: rgba(0, 0, 0, 0.5);\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        z-index: 2147483647;\r\n        animation: fadeIn 0.2s ease;\r\n      }\r\n      \r\n      .assist-modal {\r\n        background: white;\r\n        border-radius: 12px;\r\n        padding: 20px;\r\n        max-width: 400px;\r\n        width: 90%;\r\n        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\r\n        animation: slideIn 0.3s ease;\r\n      }\r\n      \r\n      .assist-modal-header {\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n        color: #1a1a1a;\r\n        margin-bottom: 16px;\r\n      }\r\n      \r\n      .assist-modal-body {\r\n        margin-bottom: 20px;\r\n      }\r\n      \r\n      .assist-input {\r\n        width: 100%;\r\n        padding: 12px 16px;\r\n        font-size: 16px;\r\n        border: 2px solid #e0e0e0;\r\n        border-radius: 8px;\r\n        outline: none;\r\n        transition: border-color 0.2s;\r\n      }\r\n      \r\n      .assist-input:focus {\r\n        border-color: #2196f3;\r\n      }\r\n      \r\n      .assist-modal-footer {\r\n        display: flex;\r\n        gap: 12px;\r\n        justify-content: flex-end;\r\n      }\r\n      \r\n      .assist-btn {\r\n        padding: 10px 20px;\r\n        font-size: 15px;\r\n        font-weight: 600;\r\n        border-radius: 8px;\r\n        border: none;\r\n        cursor: pointer;\r\n        transition: all 0.2s;\r\n        outline: none;\r\n      }\r\n      \r\n      .assist-btn-primary {\r\n        background: #2196f3;\r\n        color: white;\r\n      }\r\n      \r\n      .assist-btn-primary:hover {\r\n        background: #1976d2;\r\n        transform: translateY(-1px);\r\n        box-shadow: 0 4px 12px rgba(33, 150, 243, 0.3);\r\n      }\r\n      \r\n      .assist-btn-secondary {\r\n        background: #f5f5f5;\r\n        color: #666;\r\n      }\r\n      \r\n      .assist-btn-secondary:hover {\r\n        background: #e0e0e0;\r\n      }\r\n      \r\n      @keyframes fadeIn {\r\n        from { opacity: 0; }\r\n        to { opacity: 1; }\r\n      }\r\n      \r\n      @keyframes slideIn {\r\n        from { \r\n          transform: translateY(-20px);\r\n          opacity: 0;\r\n        }\r\n        to {\r\n          transform: translateY(0);\r\n          opacity: 1;\r\n        }\r\n      }\r\n    `;\r\n    \r\n    modal.appendChild(style);\r\n  }\r\n  \r\n  /**\r\n   * Attach event listeners to modal\r\n   */\r\n  attachEventListeners(modal, originalSubject) {\r\n    const confirmBtn = modal.querySelector('#assist-confirm');\r\n    const dismissBtn = modal.querySelector('#assist-dismiss');\r\n    const input = modal.querySelector('#assist-subject-input');\r\n    \r\n    // Confirm button\r\n    confirmBtn.addEventListener('click', () => {\r\n      const newSubject = input.value.trim();\r\n      if (newSubject) {\r\n        const edited = newSubject !== originalSubject;\r\n        \r\n        this.trackEvent('chip_assist_confirmed', {\r\n          chipType: this.chipType,\r\n          originalSubject,\r\n          confirmedSubject: newSubject,\r\n          edited\r\n        });\r\n        \r\n        if (this.callback) {\r\n          this.callback({ action: 'confirm', subject: newSubject, edited });\r\n        }\r\n        \r\n        this.hide();\r\n      }\r\n    });\r\n    \r\n    // Dismiss button\r\n    dismissBtn.addEventListener('click', () => {\r\n      this.trackEvent('chip_assist_dismissed', {\r\n        chipType: this.chipType,\r\n        subject: originalSubject\r\n      });\r\n      \r\n      if (this.callback) {\r\n        this.callback({ action: 'dismiss', subject: originalSubject });\r\n      }\r\n      \r\n      this.hide();\r\n    });\r\n    \r\n    // Enter key confirms\r\n    input.addEventListener('keyup', (e) => {\r\n      if (e.key === 'Enter') {\r\n        confirmBtn.click();\r\n      } else if (e.key === 'Escape') {\r\n        dismissBtn.click();\r\n      }\r\n    });\r\n    \r\n    // Click outside closes\r\n    modal.addEventListener('click', (e) => {\r\n      if (e.target === modal) {\r\n        dismissBtn.click();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Helper: Escape HTML\r\n   */\r\n  escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Track analytics event\r\n   */\r\n  trackEvent(eventName, data) {\r\n    // Console logging for development\r\n    console.log(`[AssistModal] ${eventName}:`, data);\r\n    \r\n    // Send to analytics if available\r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track(eventName, data);\r\n    }\r\n  }\r\n}\r\n\r\n// Export for use in chipManager\r\nexport default AssistModal;","// extension/src/services/intentScorer.js\r\n// Gate 1: Intent Scoring - Strict thresholds to prevent false positives\r\n// Product ≥0.85, Health ≥0.75 required to show chips\r\n\r\nclass IntentScorer {\r\n  constructor() {\r\n    // STRICT thresholds (Week 1 conservative settings)\r\n    this.thresholds = {\r\n      product: 0.85,  // Very high confidence required\r\n      health: 0.75    // High confidence required\r\n    };\r\n    \r\n    // Medical terms for paired detection\r\n    this.medicalTerms = {\r\n      conditions: [\r\n        'diabetes', 'cancer', 'heart disease', 'arthritis', 'anxiety', 'depression',\r\n        'insomnia', 'obesity', 'pain', 'inflammation', 'infection', 'sleep quality',\r\n        'blood pressure', 'cholesterol', 'immune system', 'digestion', 'covid',\r\n        'alzheimer', 'dementia', 'stroke', 'asthma', 'copd', 'migraine',\r\n        'hypertension', 'fatigue', 'stress', 'metabolism', 'cognitive decline'\r\n      ],\r\n      therapies: [\r\n        'vitamin', 'supplement', 'medication', 'drug', 'therapy', 'treatment',\r\n        'diet', 'exercise', 'fasting', 'meditation', 'acupuncture', 'surgery',\r\n        'remedy', 'cure', 'medicine', 'pill', 'dosage', 'prescription',\r\n        'vaccine', 'injection', 'procedure', 'rehabilitation', 'counseling'\r\n      ],\r\n      claimVerbs: [\r\n        'cures', 'treats', 'prevents', 'reverses', 'eliminates', 'fixes',\r\n        'reduces', 'improves', 'helps', 'alleviates', 'manages', 'controls',\r\n        'boosts', 'enhances', 'supports', 'relieves', 'heals', 'restores',\r\n        'combats', 'fights', 'addresses', 'mitigates', 'remedies'\r\n      ]\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Score product intent\r\n   * @returns {object} { score: number, signals: object, threshold: number }\r\n   */\r\n  async scoreProductIntent() {\r\n    const signals = this.detectProductSignals();\r\n    const score = this.calculateProductScore(signals);\r\n    \r\n    // Log borderline cases for tuning\r\n    if (score >= 0.55 && score < this.thresholds.product) {\r\n      this.logBorderlineCase('product', score, signals);\r\n    }\r\n    \r\n    console.log('[IntentScorer] Product intent:', {\r\n      score,\r\n      threshold: this.thresholds.product,\r\n      passes: score >= this.thresholds.product,\r\n      signals\r\n    });\r\n    \r\n    return { score, signals, threshold: this.thresholds.product };\r\n  }\r\n  \r\n  /**\r\n   * Score health intent with medical term pairing\r\n   * @returns {object} { score: number, signals: object, threshold: number }\r\n   */\r\n  async scoreHealthIntent() {\r\n    const signals = this.detectHealthSignals();\r\n    const score = this.calculateHealthScore(signals);\r\n    \r\n    // Log borderline cases for tuning\r\n    if (score >= 0.55 && score < this.thresholds.health) {\r\n      this.logBorderlineCase('health', score, signals);\r\n    }\r\n    \r\n    console.log('[IntentScorer] Health intent:', {\r\n      score,\r\n      threshold: this.thresholds.health,\r\n      passes: score >= this.thresholds.health,\r\n      signals\r\n    });\r\n    \r\n    return { score, signals, threshold: this.thresholds.health };\r\n  }\r\n  \r\n  /**\r\n   * Detect product signals\r\n   */\r\n  detectProductSignals() {\r\n    const signals = {\r\n      hasProductSchema: false,\r\n      hasCommerceUI: false,\r\n      hasProductURL: false,\r\n      hasBreadcrumb: false,\r\n      rawIndicators: []\r\n    };\r\n    \r\n    // Check for Product schema (0.4 weight)\r\n    const jsonLdScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\r\n    for (const script of jsonLdScripts) {\r\n      try {\r\n        const data = JSON.parse(script.textContent);\r\n        if (data['@type'] === 'Product' || \r\n            (data['@graph'] && data['@graph'].some(item => item['@type'] === 'Product'))) {\r\n          signals.hasProductSchema = true;\r\n          signals.rawIndicators.push('product_schema');\r\n          break;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    \r\n    // Check for commerce UI elements (0.3 weight)\r\n    const priceElement = document.querySelector(\r\n      '[class*=\"price\"]:not([class*=\"priceless\"]), [itemprop=\"price\"], ' +\r\n      '[data-price], .product-price, .item-price'\r\n    );\r\n    \r\n    const ctaButton = document.querySelector(\r\n      'button[class*=\"add-to-cart\"], button[class*=\"addToCart\"], ' +\r\n      'button[class*=\"buy\"], button[data-testid*=\"add-to-cart\"], ' +\r\n      'button[type=\"submit\"][value*=\"cart\"], .add-to-bag'\r\n    );\r\n    \r\n    if (priceElement && ctaButton) {\r\n      // Check proximity (within 3 DOM levels)\r\n      let element = priceElement;\r\n      let levels = 0;\r\n      while (element && levels < 3) {\r\n        element = element.parentElement;\r\n        if (element && element.contains(ctaButton)) {\r\n          signals.hasCommerceUI = true;\r\n          signals.rawIndicators.push('price_and_cta_nearby');\r\n          break;\r\n        }\r\n        levels++;\r\n      }\r\n    }\r\n    \r\n    // Check for product URL patterns (0.2 weight)\r\n    const productPatterns = [\r\n      /\\/dp\\/[A-Z0-9]+/i,  // Amazon\r\n      /\\/p\\/[^/]+/i,       // Target\r\n      /\\/product\\/[^/]+/i,\r\n      /\\/pd\\/[^/]+/i,\r\n      /\\/item\\/[^/]+/i,\r\n      /\\/ip\\/[^/]+/i       // Walmart\r\n    ];\r\n    \r\n    const pathname = window.location.pathname;\r\n    if (productPatterns.some(pattern => pattern.test(pathname))) {\r\n      signals.hasProductURL = true;\r\n      signals.rawIndicators.push('product_url_pattern');\r\n    }\r\n    \r\n    // Check for breadcrumb with specific product (0.1 weight)\r\n    const breadcrumbs = document.querySelectorAll(\r\n      'nav[aria-label*=\"breadcrumb\"] li:last-child, ' +\r\n      '.breadcrumb li:last-child, ' +\r\n      '[class*=\"breadcrumb\"] > *:last-child'\r\n    );\r\n    \r\n    for (const crumb of breadcrumbs) {\r\n      const text = crumb.textContent.trim().toLowerCase();\r\n      // Check if it's not generic\r\n      const genericTerms = ['home', 'shop', 'products', 'category', 'all'];\r\n      if (text.length > 3 && !genericTerms.some(term => text.includes(term))) {\r\n        signals.hasBreadcrumb = true;\r\n        signals.rawIndicators.push('specific_breadcrumb');\r\n        break;\r\n      }\r\n    }\r\n    \r\n    return signals;\r\n  }\r\n  \r\n  /**\r\n   * Calculate product score from signals\r\n   */\r\n  calculateProductScore(signals) {\r\n    let score = 0;\r\n    \r\n    // Weight distribution (must sum to 1.0)\r\n    const weights = {\r\n      hasProductSchema: 0.4,\r\n      hasCommerceUI: 0.3,\r\n      hasProductURL: 0.2,\r\n      hasBreadcrumb: 0.1\r\n    };\r\n    \r\n    if (signals.hasProductSchema) score += weights.hasProductSchema;\r\n    if (signals.hasCommerceUI) score += weights.hasCommerceUI;\r\n    if (signals.hasProductURL) score += weights.hasProductURL;\r\n    if (signals.hasBreadcrumb) score += weights.hasBreadcrumb;\r\n    \r\n    return Math.min(score, 1.0);\r\n  }\r\n  \r\n  /**\r\n   * Detect health signals with medical pairing\r\n   */\r\n  detectHealthSignals() {\r\n    const signals = {\r\n      hasArticleSchema: false,\r\n      hasHealthURL: false,\r\n      hasMedicalTerms: false,\r\n      isHealthSection: false,\r\n      medicalPairings: [],\r\n      rawIndicators: []\r\n    };\r\n    \r\n    // Check for Article schema (0.3 weight)\r\n    const jsonLdScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\r\n    for (const script of jsonLdScripts) {\r\n      try {\r\n        const data = JSON.parse(script.textContent);\r\n        if (['Article', 'NewsArticle', 'MedicalWebPage', 'BlogPosting'].includes(data['@type'])) {\r\n          signals.hasArticleSchema = true;\r\n          signals.rawIndicators.push('article_schema');\r\n          break;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    \r\n    // Check for health URL patterns (0.3 weight)\r\n    const healthPatterns = [\r\n      /\\/health\\//i, /\\/conditions\\//i, /\\/medical\\//i,\r\n      /\\/diseases\\//i, /\\/treatment\\//i, /\\/symptoms\\//i,\r\n      /\\/nutrition\\//i, /\\/wellness\\//i, /\\/medicine\\//i\r\n    ];\r\n    \r\n    const pathname = window.location.pathname;\r\n    if (healthPatterns.some(pattern => pattern.test(pathname))) {\r\n      signals.hasHealthURL = true;\r\n      signals.rawIndicators.push('health_url_pattern');\r\n    }\r\n    \r\n    // Check for medical term pairing (0.3 weight)\r\n    const medicalScore = this.calculateMedicalTermScore();\r\n    if (medicalScore.score > 0) {\r\n      signals.hasMedicalTerms = true;\r\n      signals.medicalPairings = medicalScore.pairings;\r\n      signals.rawIndicators.push('medical_term_pairs');\r\n    }\r\n    \r\n    // Check if on health site (0.1 weight)\r\n    const healthSites = [\r\n      'healthline.com', 'webmd.com', 'mayoclinic.org', 'medlineplus.gov',\r\n      'cdc.gov', 'nih.gov', 'who.int', 'clevelandclinic.org'\r\n    ];\r\n    \r\n    const hostname = window.location.hostname.replace('www.', '');\r\n    if (healthSites.some(site => hostname.includes(site))) {\r\n      signals.isHealthSection = true;\r\n      signals.rawIndicators.push('health_domain');\r\n    }\r\n    \r\n    return signals;\r\n  }\r\n  \r\n  /**\r\n   * Calculate medical term pairing score\r\n   * CRITICAL: Requires condition + therapy + claim verb in proximity\r\n   */\r\n  calculateMedicalTermScore() {\r\n    // Get main content text\r\n    const contentElements = document.querySelectorAll(\r\n      'main, article, [role=\"main\"], .content, .article-body'\r\n    );\r\n    \r\n    let contentText = '';\r\n    for (const element of contentElements) {\r\n      contentText += (element.textContent || '') + ' ';\r\n    }\r\n    \r\n    if (!contentText) {\r\n      contentText = document.body.textContent || '';\r\n    }\r\n    \r\n    // Limit to first 3000 chars for performance\r\n    contentText = contentText.substring(0, 3000).toLowerCase();\r\n    \r\n    // Split into sentences for proximity checking\r\n    const sentences = contentText.split(/[.!?]+/);\r\n    \r\n    const foundPairings = [];\r\n    let pairingCount = 0;\r\n    \r\n    for (const sentence of sentences) {\r\n      const hasCondition = this.medicalTerms.conditions.some(term => \r\n        sentence.includes(term.toLowerCase())\r\n      );\r\n      const hasTherapy = this.medicalTerms.therapies.some(term => \r\n        sentence.includes(term.toLowerCase())\r\n      );\r\n      const hasClaim = this.medicalTerms.claimVerbs.some(verb => \r\n        sentence.includes(verb.toLowerCase())\r\n      );\r\n      \r\n      // All three must be present in the same sentence\r\n      if (hasCondition && hasTherapy && hasClaim) {\r\n        pairingCount++;\r\n        \r\n        // Extract the specific pairing for logging\r\n        const condition = this.medicalTerms.conditions.find(term => \r\n          sentence.includes(term.toLowerCase())\r\n        );\r\n        const therapy = this.medicalTerms.therapies.find(term => \r\n          sentence.includes(term.toLowerCase())\r\n        );\r\n        const claim = this.medicalTerms.claimVerbs.find(verb => \r\n          sentence.includes(verb.toLowerCase())\r\n        );\r\n        \r\n        if (foundPairings.length < 3) {  // Limit logging\r\n          foundPairings.push(`${condition} + ${therapy} + ${claim}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Calculate density: need at least 3 paired terms per 100 words\r\n    const wordCount = contentText.split(/\\s+/).length;\r\n    const density = pairingCount / (wordCount / 100);\r\n    \r\n    console.log('[IntentScorer] Medical term analysis:', {\r\n      pairingCount,\r\n      wordCount,\r\n      density,\r\n      pairings: foundPairings\r\n    });\r\n    \r\n    return {\r\n      score: density >= 3 ? 0.3 : 0,\r\n      pairings: foundPairings,\r\n      density\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Calculate health score from signals\r\n   */\r\n  calculateHealthScore(signals) {\r\n    let score = 0;\r\n    \r\n    // Weight distribution\r\n    const weights = {\r\n      hasArticleSchema: 0.3,\r\n      hasHealthURL: 0.3,\r\n      hasMedicalTerms: 0.3,\r\n      isHealthSection: 0.1\r\n    };\r\n    \r\n    if (signals.hasArticleSchema) score += weights.hasArticleSchema;\r\n    if (signals.hasHealthURL) score += weights.hasHealthURL;\r\n    if (signals.hasMedicalTerms) score += weights.hasMedicalTerms;\r\n    if (signals.isHealthSection) score += weights.isHealthSection;\r\n    \r\n    return Math.min(score, 1.0);\r\n  }\r\n  \r\n  /**\r\n   * Log borderline cases for future tuning\r\n   */\r\n  logBorderlineCase(chipType, score, signals) {\r\n    console.warn(`[IntentScorer] BORDERLINE ${chipType.toUpperCase()} case for tuning:`, {\r\n      url: window.location.href,\r\n      chipType,\r\n      score,\r\n      threshold: this.thresholds[chipType],\r\n      gap: this.thresholds[chipType] - score,\r\n      signals,\r\n      timestamp: new Date().toISOString(),\r\n      recommendation: 'Review this case for threshold adjustment'\r\n    });\r\n    \r\n    // Send to analytics if available\r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track('chip_intent_borderline', {\r\n        chipType,\r\n        score,\r\n        threshold: this.thresholds[chipType],\r\n        url: window.location.href,\r\n        signals: signals.rawIndicators\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get current scores for both chip types\r\n   */\r\n  async getBothScores() {\r\n    const [productResult, healthResult] = await Promise.all([\r\n      this.scoreProductIntent(),\r\n      this.scoreHealthIntent()\r\n    ]);\r\n    \r\n    return {\r\n      product: productResult,\r\n      health: healthResult\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in chipManager\r\nexport default IntentScorer;","// extension/src/services/chipManager.js\r\n// Orchestrates all 3 gates and controls chip visibility\r\n// IMPORTANT: Never affects badge - badge always shows\r\n\r\nimport PageClassifier from './pageClassifier.js';\r\nimport IntentScorer from './intentScorer.js';\r\nimport SubjectExtractor from './subjectExtractor.js';\r\nimport AssistModal from '../components/AssistModal.js';\r\nimport ChipCache from './chipCache.js';\r\nimport ChipCooldown from './chipCooldown.js';\r\n\r\nclass ChipManager {\r\n  constructor() {\r\n    // Gate services\r\n    this.pageClassifier = new PageClassifier();\r\n    this.intentScorer = new IntentScorer();\r\n    this.subjectExtractor = new SubjectExtractor();\r\n    \r\n    // UI components\r\n    this.assistModal = new AssistModal();\r\n    \r\n    // Caching & cooldowns\r\n    this.cache = new ChipCache();\r\n    this.cooldown = new ChipCooldown();\r\n    \r\n    // Analytics tracking\r\n    this.lastIntentScores = {\r\n      product: null,\r\n      health: null\r\n    };\r\n    \r\n    // Current chip states\r\n    this.chipStates = {\r\n      product: { visible: false, subject: null },\r\n      health: { visible: false, subject: null }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Main entry point - evaluate if chips should be shown\r\n   * Called on page load and SPA navigation\r\n   */\r\n  async evaluateChips() {\r\n    console.log('[ChipManager] ========== EVALUATING CHIPS ==========');\r\n    const startTime = performance.now();\r\n    \r\n    // Run both chip evaluations in parallel\r\n    const [productResult, healthResult] = await Promise.all([\r\n      this.shouldShowChip('product'),\r\n      this.shouldShowChip('health')\r\n    ]);\r\n    \r\n    const evalTime = performance.now() - startTime;\r\n    console.log(`[ChipManager] Evaluation complete in ${evalTime.toFixed(0)}ms`, {\r\n      product: productResult,\r\n      health: healthResult\r\n    });\r\n    \r\n    // Update UI based on results\r\n    this.updateChipDisplay('product', productResult);\r\n    this.updateChipDisplay('health', healthResult);\r\n  }\r\n  \r\n  /**\r\n   * Determine if a chip should be shown (runs all 3 gates)\r\n   * @param {string} chipType - 'product' or 'health'\r\n   * @returns {object} { show: boolean, state: string, subject?: string, reason?: string }\r\n   */\r\n  async shouldShowChip(chipType) {\r\n    console.log(`[ChipManager] Checking ${chipType} chip...`);\r\n    \r\n    // ==================== GATE 0: Page Type ====================\r\n    const pageType = this.pageClassifier.classify();\r\n    console.log(`[ChipManager] Gate 0 - Page type: ${pageType}`);\r\n    \r\n    // Block chips on SERPs, portals, and ambiguous pages\r\n    if (['serp', 'portal', 'ambiguous'].includes(pageType)) {\r\n      this.trackGateBlocked(0, chipType, 'wrong_page_type', { pageType });\r\n      return { show: false, reason: 'wrong_page_type', pageType };\r\n    }\r\n    \r\n    // Check page type matches chip type\r\n    if (chipType === 'product' && pageType !== 'product') {\r\n      this.trackGateBlocked(0, chipType, 'not_product_page', { pageType });\r\n      return { show: false, reason: 'not_product_page' };\r\n    }\r\n    \r\n    if (chipType === 'health' && pageType !== 'article') {\r\n      this.trackGateBlocked(0, chipType, 'not_health_article', { pageType });\r\n      return { show: false, reason: 'not_health_article' };\r\n    }\r\n    \r\n    // ==================== CHECK COOLDOWNS ====================\r\n    // Before Gate 1, check if we're on cooldown\r\n    const cooldownStatus = await this.cooldown.checkCooldowns(chipType);\r\n    if (cooldownStatus.blocked) {\r\n      console.log(`[ChipManager] ${chipType} chip on cooldown:`, cooldownStatus.reason);\r\n      return { show: false, reason: cooldownStatus.reason };\r\n    }\r\n    \r\n    // ==================== GATE 1: Intent Score ====================\r\n    const intentResult = chipType === 'product' \r\n      ? await this.intentScorer.scoreProductIntent()\r\n      : await this.intentScorer.scoreHealthIntent();\r\n    \r\n    const { score, threshold, signals } = intentResult;\r\n    this.lastIntentScores[chipType] = score;\r\n    \r\n    console.log(`[ChipManager] Gate 1 - Intent score: ${score.toFixed(2)} (threshold: ${threshold})`);\r\n    \r\n    // Log borderline cases for future tuning\r\n    if (score >= 0.55 && score < threshold) {\r\n      console.warn(`[ChipManager] BORDERLINE ${chipType} case:`, {\r\n        score,\r\n        threshold,\r\n        gap: threshold - score,\r\n        url: window.location.href\r\n      });\r\n    }\r\n    \r\n    // Check if intent is too low\r\n    if (score < threshold) {\r\n      this.trackGateBlocked(1, chipType, 'low_intent', { score, threshold, signals });\r\n      return { show: false, reason: 'low_intent', score };\r\n    }\r\n    \r\n    // ==================== GATE 2: Subject Specificity ====================\r\n    const extraction = await this.subjectExtractor.extractSubject(chipType);\r\n    console.log(`[ChipManager] Gate 2 - Subject extraction:`, extraction);\r\n    \r\n    // If extraction failed completely\r\n    if (!extraction.subject) {\r\n      this.trackGateBlocked(2, chipType, 'no_subject', {});\r\n      return { show: false, reason: 'no_subject' };\r\n    }\r\n    \r\n    // If subject needs confirmation (generic/borderline)\r\n    if (extraction.needsConfirm) {\r\n      this.trackGateBlocked(2, chipType, 'needs_confirmation', {\r\n        subject: extraction.subject,\r\n        failReason: extraction.failReason\r\n      });\r\n      \r\n      // Show assist modal for user confirmation\r\n      return {\r\n        show: true,\r\n        state: 'needs_confirm',\r\n        subject: extraction.subject,\r\n        failReason: extraction.failReason\r\n      };\r\n    }\r\n    \r\n    // ==================== ALL GATES PASSED ====================\r\n    this.trackGatesPassed(chipType, score, extraction.subject);\r\n    \r\n    // Set cooldown for this URL\r\n    await this.cooldown.setUrlCooldown(chipType);\r\n    \r\n    return {\r\n      show: true,\r\n      state: 'ready',\r\n      subject: extraction.subject,\r\n      confidence: extraction.confidence\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Update chip display based on evaluation result\r\n   */\r\n  updateChipDisplay(chipType, result) {\r\n    const chipElement = this.getChipElement(chipType);\r\n    if (!chipElement) return;\r\n    \r\n    if (!result.show) {\r\n      // Hide chip\r\n      chipElement.style.display = 'none';\r\n      chipElement.classList.remove('visible');\r\n      this.chipStates[chipType] = { visible: false, subject: null };\r\n      \r\n    } else if (result.state === 'needs_confirm') {\r\n      // Show assist modal\r\n      chipElement.style.display = 'none'; // Hide chip until confirmed\r\n      \r\n      this.assistModal.show(chipType, result.subject, (response) => {\r\n        if (response.action === 'confirm') {\r\n          // User confirmed - show chip with edited subject\r\n          this.showChipWithSubject(chipType, response.subject);\r\n        } else {\r\n          // User dismissed - set dismissal cooldown\r\n          this.cooldown.dismissChipOnOrigin(chipType);\r\n        }\r\n      });\r\n      \r\n    } else if (result.state === 'ready') {\r\n      // Show chip immediately\r\n      this.showChipWithSubject(chipType, result.subject);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Show chip with specific subject\r\n   */\r\n  showChipWithSubject(chipType, subject) {\r\n    const chipElement = this.getChipElement(chipType);\r\n    if (!chipElement) return;\r\n    \r\n    // Update chip content if needed\r\n    const subjectSpan = chipElement.querySelector('.chip-subject');\r\n    if (subjectSpan) {\r\n      subjectSpan.textContent = this.truncateSubject(subject);\r\n    }\r\n    \r\n    // Show chip\r\n    chipElement.style.display = 'flex';\r\n    chipElement.classList.add('visible');\r\n    chipElement.setAttribute('data-subject', subject);\r\n    \r\n    this.chipStates[chipType] = { visible: true, subject };\r\n    \r\n    // Update chips wrapper visibility\r\n    this.updateChipsWrapperVisibility();\r\n    \r\n    console.log(`[ChipManager] ${chipType} chip shown with subject: ${subject}`);\r\n  }\r\n  \r\n  /**\r\n   * Get chip DOM element\r\n   */\r\n    getChipElement(chipType) {\r\n        // Get from the callbacks provided by content.js\r\n        if (this.chipElements && this.chipElements[chipType]) {\r\n            return this.chipElements[chipType]();\r\n        }\r\n        return null;\r\n    }\r\n  \r\n  /**\r\n   * Update chips wrapper visibility\r\n   */\r\n    updateChipsWrapperVisibility() {\r\n        if (this.chipElements && this.chipElements.wrapper) {\r\n            const wrapper = this.chipElements.wrapper();\r\n            if (!wrapper) return;\r\n            \r\n            const hasVisibleChips = this.chipStates.product.visible || this.chipStates.health.visible;\r\n            \r\n            if (hasVisibleChips) {\r\n                wrapper.classList.add('visible');\r\n            } else {\r\n                wrapper.classList.remove('visible');\r\n            }\r\n        }\r\n    }\r\n  \r\n  /**\r\n   * Truncate subject for display\r\n   */\r\n  truncateSubject(subject) {\r\n    const maxLength = 40;\r\n    if (subject.length <= maxLength) return subject;\r\n    return subject.substring(0, maxLength - 3) + '...';\r\n  }\r\n  \r\n  /**\r\n   * Re-evaluate chips (called after unhide or variant change)\r\n   */\r\n  async reevaluate(chipType = null) {\r\n    console.log(`[ChipManager] Re-evaluating ${chipType || 'all'} chips`);\r\n    \r\n    if (chipType) {\r\n      // Re-evaluate specific chip\r\n      const result = await this.shouldShowChip(chipType);\r\n      this.updateChipDisplay(chipType, result);\r\n    } else {\r\n      // Re-evaluate all chips\r\n      await this.evaluateChips();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle variant change (product pages)\r\n   */\r\n  async handleVariantChange() {\r\n    console.log('[ChipManager] Variant changed, clearing product cache');\r\n    \r\n    // Clear product cache for this page\r\n    await this.cache.clearProductCache(window.location.hostname);\r\n    \r\n    // Re-evaluate product chip\r\n    await this.reevaluate('product');\r\n    \r\n    this.trackEvent('product_variant_changed', {\r\n      hostname: window.location.hostname,\r\n      triggerReason: 'user_selected_variant'\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Get last intent score (for debugging)\r\n   */\r\n  getLastIntentScore(chipType) {\r\n    return this.lastIntentScores[chipType];\r\n  }\r\n  \r\n  // ==================== ANALYTICS TRACKING ====================\r\n  \r\n  trackGateBlocked(gate, chipType, reason, details) {\r\n    const event = {\r\n      gate,\r\n      chipType,\r\n      reason,\r\n      ...details,\r\n      url: window.location.href,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log(`[ChipManager] Gate ${gate} blocked:`, event);\r\n    \r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track('chip_gate_blocked', event);\r\n    }\r\n  }\r\n  \r\n  trackGatesPassed(chipType, score, subject) {\r\n    const event = {\r\n      chipType,\r\n      score,\r\n      subject,\r\n      url: window.location.href,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log('[ChipManager] All gates passed:', event);\r\n    \r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track('chip_gates_passed', event);\r\n    }\r\n  }\r\n  \r\n  trackEvent(eventName, data) {\r\n    console.log(`[ChipManager] ${eventName}:`, data);\r\n    \r\n    if (typeof analytics !== 'undefined' && analytics.track) {\r\n      analytics.track(eventName, data);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChipManager;","// extension/src/services/chipCache.js\r\n// Caching service for chip scan results\r\n\r\nclass ChipCache {\r\n  constructor() {\r\n    this.cacheTimeout = 30 * 60 * 1000; // 30 minutes\r\n    this.storageKey = 'safesignal_scan_cache';\r\n  }\r\n  \r\n  /**\r\n   * Get cache key for a scan\r\n   */\r\n  getCacheKey(chipType, subject, variant = null) {\r\n    const hostname = window.location.hostname;\r\n    const normalizedSubject = this.normalizeForCache(subject);\r\n    const variantSuffix = variant ? `:${this.normalizeForCache(variant)}` : '';\r\n    \r\n    return `${chipType}_scan:${hostname}:${normalizedSubject}${variantSuffix}`;\r\n  }\r\n  \r\n  /**\r\n   * Normalize text for cache key\r\n   */\r\n  normalizeForCache(text) {\r\n    if (!text) return '';\r\n    return text.toLowerCase()\r\n      .replace(/[^a-z0-9]+/g, '_')\r\n      .replace(/^_+|_+$/g, '');\r\n  }\r\n  \r\n  /**\r\n   * Get cached scan result\r\n   */\r\n  async getCachedScan(cacheKey) {\r\n    try {\r\n      const result = await chrome.storage.local.get(this.storageKey);\r\n      const cache = result[this.storageKey] || {};\r\n      \r\n      const entry = cache[cacheKey];\r\n      if (!entry) return null;\r\n      \r\n      // Check expiry\r\n      const now = Date.now();\r\n      if (now - entry.timestamp > this.cacheTimeout) {\r\n        // Expired, remove it\r\n        delete cache[cacheKey];\r\n        await chrome.storage.local.set({ [this.storageKey]: cache });\r\n        return null;\r\n      }\r\n      \r\n      console.log('[ChipCache] Cache hit:', cacheKey);\r\n      return entry.data;\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCache] Error reading cache:', error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Set cached scan result\r\n   */\r\n  async setCachedScan(cacheKey, data) {\r\n    try {\r\n      const result = await chrome.storage.local.get(this.storageKey);\r\n      const cache = result[this.storageKey] || {};\r\n      \r\n      cache[cacheKey] = {\r\n        data,\r\n        timestamp: Date.now()\r\n      };\r\n      \r\n      // Limit cache size (keep most recent 50 entries)\r\n      const entries = Object.entries(cache);\r\n      if (entries.length > 50) {\r\n        entries.sort((a, b) => b[1].timestamp - a[1].timestamp);\r\n        const keepEntries = entries.slice(0, 50);\r\n        const newCache = Object.fromEntries(keepEntries);\r\n        await chrome.storage.local.set({ [this.storageKey]: newCache });\r\n      } else {\r\n        await chrome.storage.local.set({ [this.storageKey]: cache });\r\n      }\r\n      \r\n      console.log('[ChipCache] Cached result:', cacheKey);\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCache] Error writing cache:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Clear cache for a specific hostname\r\n   */\r\n  async clearHostnameCache(hostname) {\r\n    try {\r\n      const result = await chrome.storage.local.get(this.storageKey);\r\n      const cache = result[this.storageKey] || {};\r\n      \r\n      const keysToDelete = Object.keys(cache).filter(key => \r\n        key.includes(`:${hostname}:`)\r\n      );\r\n      \r\n      keysToDelete.forEach(key => delete cache[key]);\r\n      \r\n      await chrome.storage.local.set({ [this.storageKey]: cache });\r\n      \r\n      console.log(`[ChipCache] Cleared ${keysToDelete.length} entries for ${hostname}`);\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCache] Error clearing cache:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Clear product cache (called on variant change)\r\n   */\r\n  async clearProductCache(hostname) {\r\n    try {\r\n      const result = await chrome.storage.local.get(this.storageKey);\r\n      const cache = result[this.storageKey] || {};\r\n      \r\n      const keysToDelete = Object.keys(cache).filter(key => \r\n        key.startsWith('product_scan:') && key.includes(`:${hostname}:`)\r\n      );\r\n      \r\n      keysToDelete.forEach(key => delete cache[key]);\r\n      \r\n      await chrome.storage.local.set({ [this.storageKey]: cache });\r\n      \r\n      console.log(`[ChipCache] Cleared ${keysToDelete.length} product entries`);\r\n      \r\n    } catch (error) {\r\n      console.error('[ChipCache] Error clearing product cache:', error);\r\n    }\r\n  }\r\n}\r\nexport default ChipCache;  // ← ADD THIS LINE\r\n\r\n","// extension/src/services/subjectExtractor.js\r\n// Gate 2: Subject Extraction with Specificity Validation\r\n// Blocks generic subjects like \"Apple\", \"Health\", \"New Deals\"\r\n\r\nclass SubjectExtractor {\r\n  constructor() {\r\n    // Generic terms that auto-fail specificity check\r\n    this.genericTerms = [\r\n      // Navigation/structure\r\n      'home', 'shop', 'product', 'products', 'category', 'categories',\r\n      'search', 'results', 'browse', 'all', 'more', 'page',\r\n      \r\n      // Commerce\r\n      'deals', 'deal', 'sale', 'sales', 'clearance', 'outlet', 'discount',\r\n      'gifts', 'gift', 'new', 'top', 'best', 'featured', 'trending',\r\n      \r\n      // Content types\r\n      'blog', 'blogs', 'article', 'articles', 'news', 'about', 'help', \r\n      'support', 'faq', 'contact', 'info', 'guide', 'tutorial',\r\n      \r\n      // Departments (retail)\r\n      'clothing', 'apparel', 'electronics', 'furniture', 'toys', 'books',\r\n      'beauty', 'health', 'wellness', 'fitness', 'sports', 'outdoor',\r\n      'men', 'mens', 'women', 'womens', 'kids', 'baby', 'home',\r\n      \r\n      // Generic health\r\n      'wellness', 'health', 'medical', 'healthcare', 'treatment', 'therapy',\r\n      'medicine', 'condition', 'symptom', 'disease'\r\n    ];\r\n    \r\n    // Model/variant patterns that count as specific\r\n    this.modelPatterns = [\r\n      /^[A-Z]{2,3}$/,              // SE, XL, XS, Pro, Max\r\n      /^\\d+[A-Z]+$/,               // 5G, 128GB, 4K\r\n      /^[A-Z]\\d+$/,                // M1, M2, S23\r\n      /^v?\\d+(\\.\\d+)?$/            // v2, 2.0, 13\r\n    ];\r\n    \r\n    // Brand-only terms that fail specificity for products\r\n    this.brandOnlyTerms = [\r\n      'apple', 'amazon', 'target', 'walmart', 'bestbuy', 'ebay',\r\n      'nike', 'adidas', 'samsung', 'google', 'microsoft', 'sony'\r\n    ];\r\n    \r\n    // Site-specific adapters\r\n    this.siteAdapters = this.initializeSiteAdapters();\r\n  }\r\n  \r\n  /**\r\n   * Main extraction method\r\n   * @param {string} chipType - 'product' or 'health'\r\n   * @returns {object} { subject, confidence, needsConfirm, failReason?, extractionMethod }\r\n   */\r\n  async extractSubject(chipType) {\r\n    let extraction;\r\n    \r\n    // Try site-specific adapter first\r\n    extraction = this.tryAdapterExtraction(chipType);\r\n    \r\n    // Fall back to generic extraction\r\n    if (!extraction || !extraction.subject) {\r\n      extraction = this.genericExtraction(chipType);\r\n    }\r\n    \r\n    // Validate specificity\r\n    const specificityResult = this.checkSpecificity(extraction.subject, chipType);\r\n    \r\n    if (!specificityResult.pass) {\r\n      extraction.confidence = 'low';\r\n      extraction.needsConfirm = true;\r\n      extraction.failReason = specificityResult.reason;\r\n    } else {\r\n      // Update subject if it was truncated\r\n      if (specificityResult.subject !== extraction.subject) {\r\n        extraction.subject = specificityResult.subject;\r\n      }\r\n      extraction.needsConfirm = extraction.confidence === 'low';\r\n    }\r\n    \r\n    console.log('[SubjectExtractor] Extraction result:', extraction);\r\n    \r\n    return extraction;\r\n  }\r\n  \r\n  /**\r\n   * Try site-specific adapter extraction\r\n   */\r\n  tryAdapterExtraction(chipType) {\r\n    const hostname = window.location.hostname.replace('www.', '');\r\n    const adapterKey = hostname.replace(/\\./g, '_');\r\n    \r\n    if (this.siteAdapters[adapterKey]) {\r\n      const adapter = this.siteAdapters[adapterKey];\r\n      \r\n      try {\r\n        if (chipType === 'product' && adapter.productName) {\r\n          const subject = adapter.productName();\r\n          if (subject) {\r\n            return {\r\n              subject,\r\n              confidence: 'high',\r\n              needsConfirm: false,\r\n              extractionMethod: `adapter_${adapterKey}`\r\n            };\r\n          }\r\n        } else if (chipType === 'health' && adapter.healthTopic) {\r\n          const subject = adapter.healthTopic();\r\n          if (subject) {\r\n            return {\r\n              subject,\r\n              confidence: 'high',\r\n              needsConfirm: false,\r\n              extractionMethod: `adapter_${adapterKey}`\r\n            };\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.warn(`[SubjectExtractor] Adapter failed for ${adapterKey}:`, e);\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Generic extraction for any site\r\n   */\r\n  genericExtraction(chipType) {\r\n    if (chipType === 'product') {\r\n      return this.extractProductSubject();\r\n    } else {\r\n      return this.extractHealthSubject();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Extract product subject\r\n   */\r\n  extractProductSubject() {\r\n    let subject = '';\r\n    let extractionMethod = '';\r\n    \r\n    // 1. Try JSON-LD Product.name (with variant if available)\r\n    const jsonLd = this.extractFromJsonLd('Product');\r\n    if (jsonLd && jsonLd.name) {\r\n      subject = jsonLd.name;\r\n      \r\n      // Check for selected variant\r\n      if (jsonLd.offers && Array.isArray(jsonLd.offers)) {\r\n        const selectedOffer = jsonLd.offers.find(o => o.availability === 'InStock');\r\n        if (selectedOffer && selectedOffer.name) {\r\n          subject = selectedOffer.name;\r\n        }\r\n      }\r\n      extractionMethod = 'json_ld_product_name';\r\n    }\r\n    \r\n    // 2. Try Open Graph title\r\n    if (!subject) {\r\n      const ogTitle = document.querySelector('meta[property=\"og:title\"]')?.content;\r\n      if (ogTitle) {\r\n        subject = this.cleanTitle(ogTitle);\r\n        extractionMethod = 'og_title';\r\n      }\r\n    }\r\n    \r\n    // 3. Try H1 near price/CTA\r\n    if (!subject) {\r\n      const h1 = this.findH1NearCommerce();\r\n      if (h1) {\r\n        subject = h1;\r\n        extractionMethod = 'h1_near_commerce';\r\n      }\r\n    }\r\n    \r\n    // 4. Try breadcrumb last node\r\n    if (!subject) {\r\n      const breadcrumb = this.extractFromBreadcrumb();\r\n      if (breadcrumb) {\r\n        subject = breadcrumb;\r\n        extractionMethod = 'breadcrumb';\r\n      }\r\n    }\r\n    \r\n    // 5. Try URL slug\r\n    if (!subject) {\r\n      subject = this.extractFromUrlSlug();\r\n      extractionMethod = 'url_slug';\r\n    }\r\n    \r\n    // 6. Fall back to page title\r\n    if (!subject) {\r\n      subject = this.cleanTitle(document.title);\r\n      extractionMethod = 'page_title';\r\n    }\r\n    \r\n    return {\r\n      subject: this.normalizeSubject(subject),\r\n      confidence: extractionMethod.includes('json_ld') || extractionMethod.includes('adapter') ? 'high' : 'low',\r\n      needsConfirm: false,\r\n      extractionMethod\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Extract health subject\r\n   */\r\n  extractHealthSubject() {\r\n    let subject = '';\r\n    let extractionMethod = '';\r\n    \r\n    // 1. Try JSON-LD Article.headline\r\n    const jsonLd = this.extractFromJsonLd('Article');\r\n    if (jsonLd && jsonLd.headline) {\r\n      subject = jsonLd.headline;\r\n      extractionMethod = 'json_ld_headline';\r\n    }\r\n    \r\n    // 2. Try H1 inside article\r\n    if (!subject) {\r\n      const articleH1 = document.querySelector('article h1, main h1, .article-content h1');\r\n      if (articleH1) {\r\n        subject = articleH1.textContent.trim();\r\n        extractionMethod = 'article_h1';\r\n      }\r\n    }\r\n    \r\n    // 3. Try Open Graph title\r\n    if (!subject) {\r\n      const ogTitle = document.querySelector('meta[property=\"og:title\"]')?.content;\r\n      if (ogTitle) {\r\n        subject = this.cleanTitle(ogTitle);\r\n        extractionMethod = 'og_title';\r\n      }\r\n    }\r\n    \r\n    // 4. Try extracting medical noun phrase from intro\r\n    if (!subject) {\r\n      subject = this.extractMedicalPhrase();\r\n      if (subject) {\r\n        extractionMethod = 'medical_phrase';\r\n      }\r\n    }\r\n    \r\n    // 5. Fall back to page title\r\n    if (!subject) {\r\n      subject = this.cleanTitle(document.title);\r\n      extractionMethod = 'page_title';\r\n    }\r\n    \r\n    return {\r\n      subject: this.normalizeSubject(subject),\r\n      confidence: extractionMethod.includes('json_ld') || extractionMethod === 'article_h1' ? 'high' : 'low',\r\n      needsConfirm: false,\r\n      extractionMethod\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Check if subject meets specificity requirements\r\n   */\r\n  checkSpecificity(subject, chipType) {\r\n    if (!subject) {\r\n      return { pass: false, reason: 'empty_subject' };\r\n    }\r\n    \r\n    const words = subject.split(/\\s+/).filter(w => w.length > 0);\r\n    const lowerSubject = subject.toLowerCase();\r\n    \r\n    // Rule 1: At least 2 words\r\n    if (words.length < 2) {\r\n      return { pass: false, reason: 'too_short' };\r\n    }\r\n    \r\n    // Rule 2: Not in generic terms list\r\n    const hasGenericTerm = this.genericTerms.some(term => {\r\n      const regex = new RegExp(`\\\\b${term}\\\\b`, 'i');\r\n      return regex.test(lowerSubject);\r\n    });\r\n    \r\n    if (hasGenericTerm) {\r\n      return { pass: false, reason: 'contains_generic_term' };\r\n    }\r\n    \r\n    // Rule 3: Brand-only guard for products\r\n    if (chipType === 'product') {\r\n      const cleanedSubject = words.map(w => w.toLowerCase()).join(' ');\r\n      const isBrandOnly = this.brandOnlyTerms.some(brand => {\r\n        return cleanedSubject === brand || \r\n               cleanedSubject === brand + 's' ||\r\n               cleanedSubject === 'the ' + brand;\r\n      });\r\n      \r\n      if (isBrandOnly) {\r\n        return { pass: false, reason: 'brand_only' };\r\n      }\r\n    }\r\n    \r\n    // Rule 4: Contains either a model pattern OR two 4+ char words\r\n    const hasModel = words.some(word => \r\n      this.modelPatterns.some(pattern => pattern.test(word))\r\n    );\r\n    \r\n    const longWords = words.filter(w => w.length >= 4);\r\n    const hasTwoLongWords = longWords.length >= 2;\r\n    \r\n    if (!hasModel && !hasTwoLongWords) {\r\n      return { pass: false, reason: 'not_specific_enough' };\r\n    }\r\n    \r\n    // Rule 5: Not longer than 8 words (truncate if needed)\r\n    if (words.length > 8) {\r\n      subject = words.slice(0, 8).join(' ');\r\n    }\r\n    \r\n    return { pass: true, subject };\r\n  }\r\n  \r\n  /**\r\n   * Helper: Extract from JSON-LD\r\n   */\r\n  extractFromJsonLd(type) {\r\n    const scripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\r\n    for (const script of scripts) {\r\n      try {\r\n        const data = JSON.parse(script.textContent);\r\n        if (data['@type'] === type) {\r\n          return data;\r\n        }\r\n        if (data['@graph']) {\r\n          const item = data['@graph'].find(i => i['@type'] === type);\r\n          if (item) return item;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Find H1 near commerce elements\r\n   */\r\n  findH1NearCommerce() {\r\n    const priceElements = document.querySelectorAll('[class*=\"price\"], [data-price]');\r\n    \r\n    for (const priceEl of priceElements) {\r\n      // Look for H1 within 3 parent levels\r\n      let parent = priceEl;\r\n      for (let i = 0; i < 3; i++) {\r\n        parent = parent.parentElement;\r\n        if (!parent) break;\r\n        \r\n        const h1 = parent.querySelector('h1');\r\n        if (h1) {\r\n          return h1.textContent.trim();\r\n        }\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Extract from breadcrumb\r\n   */\r\n  extractFromBreadcrumb() {\r\n    const breadcrumbs = document.querySelectorAll(\r\n      'nav[aria-label*=\"breadcrumb\"] li:last-child, ' +\r\n      '.breadcrumb li:last-child, ' +\r\n      '[class*=\"breadcrumb\"] > *:last-child'\r\n    );\r\n    \r\n    for (const crumb of breadcrumbs) {\r\n      const text = crumb.textContent.trim();\r\n      // Skip if it's a generic term\r\n      if (!this.genericTerms.includes(text.toLowerCase())) {\r\n        return text;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Extract from URL slug\r\n   */\r\n  extractFromUrlSlug() {\r\n    const pathname = window.location.pathname;\r\n    const segments = pathname.split('/').filter(s => s.length > 0);\r\n    \r\n    if (segments.length > 0) {\r\n      const lastSegment = segments[segments.length - 1];\r\n      // Clean up common patterns\r\n      const cleaned = lastSegment\r\n        .replace(/[-_]/g, ' ')\r\n        .replace(/\\.(html?|php|aspx?)$/i, '')\r\n        .replace(/^[A-Z0-9]{10,}$/i, ''); // Skip pure IDs\r\n      \r\n      if (cleaned && !this.genericTerms.includes(cleaned.toLowerCase())) {\r\n        return cleaned;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Extract medical phrase from content\r\n   */\r\n  extractMedicalPhrase() {\r\n    const intro = document.querySelector(\r\n      'article > p:first-of-type, ' +\r\n      '.article-content > p:first-of-type, ' +\r\n      'main > p:first-of-type'\r\n    );\r\n    \r\n    if (!intro) return null;\r\n    \r\n    const text = intro.textContent.substring(0, 200);\r\n    \r\n    // Look for condition + therapy patterns\r\n    const medicalPattern = /(vitamin [A-Z]\\d?|intermittent fasting|keto diet|meditation|acupuncture|supplements?|medication)/i;\r\n    const match = text.match(medicalPattern);\r\n    \r\n    if (match) {\r\n      // Try to get surrounding context\r\n      const startIdx = Math.max(0, match.index - 20);\r\n      const endIdx = Math.min(text.length, match.index + match[0].length + 20);\r\n      const context = text.substring(startIdx, endIdx).trim();\r\n      \r\n      // Clean it up\r\n      return context.replace(/^[^a-zA-Z]+|[^a-zA-Z]+$/g, '');\r\n    }\r\n    \r\n    return null;\r\n  }\r\n  \r\n  /**\r\n   * Helper: Clean title strings\r\n   */\r\n  cleanTitle(title) {\r\n    if (!title) return '';\r\n    \r\n    // Remove common suffixes\r\n    const suffixes = [\r\n      / \\| .+$/,           // | SiteName\r\n      / - .+$/,            // - SiteName\r\n      / – .+$/,            // – SiteName\r\n      / • .+$/,            // • SiteName\r\n      / :: .+$/,           // :: SiteName\r\n      / \\(\\d{4}\\)$/,       // (2024)\r\n      / - Review$/i,       // - Review\r\n      / - Buy Online$/i    // - Buy Online\r\n    ];\r\n    \r\n    let cleaned = title;\r\n    for (const suffix of suffixes) {\r\n      cleaned = cleaned.replace(suffix, '');\r\n    }\r\n    \r\n    return cleaned.trim();\r\n  }\r\n  \r\n  /**\r\n   * Helper: Normalize subject text\r\n   */\r\n  normalizeSubject(subject) {\r\n    if (!subject) return '';\r\n    \r\n    // Cap to 8 words\r\n    const words = subject.split(/\\s+/);\r\n    if (words.length > 8) {\r\n      subject = words.slice(0, 8).join(' ');\r\n    }\r\n    \r\n    // Clean up whitespace\r\n    subject = subject.replace(/\\s+/g, ' ').trim();\r\n    \r\n    // Preserve original case for display\r\n    return subject;\r\n  }\r\n  \r\n  /**\r\n   * Initialize site-specific adapters\r\n   */\r\n  initializeSiteAdapters() {\r\n    return {\r\n      // Amazon adapter\r\n      'amazon_com': {\r\n        productName: () => {\r\n          // Check for selected variant\r\n          const baseTitle = document.querySelector('#productTitle')?.textContent.trim();\r\n          const selectedSize = document.querySelector('#native_dropdown_selected_size_name')?.textContent.trim();\r\n          const selectedColor = document.querySelector('.selection')?.textContent.trim();\r\n          \r\n          const parts = [baseTitle];\r\n          if (selectedColor && !baseTitle?.includes(selectedColor)) {\r\n            parts.push(selectedColor);\r\n          }\r\n          if (selectedSize && !baseTitle?.includes(selectedSize)) {\r\n            parts.push(selectedSize);\r\n          }\r\n          \r\n          return parts.filter(Boolean).join(' ');\r\n        }\r\n      },\r\n      \r\n      // Target adapter\r\n      'target_com': {\r\n        productName: () => {\r\n          const baseTitle = document.querySelector('h1[data-test=\"product-title\"]')?.textContent.trim();\r\n          \r\n          // Check for selected variants\r\n          const variantButtons = document.querySelectorAll('[data-test=\"variant-selector\"] button[aria-checked=\"true\"]');\r\n          const variants = Array.from(variantButtons).map(el => el.textContent.trim());\r\n          \r\n          if (variants.length > 0 && baseTitle) {\r\n            return `${baseTitle} ${variants.join(' ')}`;\r\n          }\r\n          \r\n          return baseTitle;\r\n        }\r\n      },\r\n      \r\n      // Walmart adapter\r\n      'walmart_com': {\r\n        productName: () => {\r\n          const title = document.querySelector('h1[itemprop=\"name\"]')?.textContent.trim();\r\n          const variant = document.querySelector('.variant-selector .selected')?.textContent.trim();\r\n          \r\n          if (variant && title && !title.includes(variant)) {\r\n            return `${title} ${variant}`;\r\n          }\r\n          \r\n          return title;\r\n        }\r\n      },\r\n      \r\n      // Best Buy adapter\r\n      'bestbuy_com': {\r\n        productName: () => {\r\n          return document.querySelector('.sku-title h1')?.textContent.trim();\r\n        }\r\n      },\r\n      \r\n      // Healthline adapter\r\n      'healthline_com': {\r\n        healthTopic: () => {\r\n          const h1 = document.querySelector('h1')?.textContent;\r\n          return h1?.replace(/\\s*[-–]\\s*Healthline$/i, '').trim();\r\n        }\r\n      },\r\n      \r\n      // Mayo Clinic adapter\r\n      'mayoclinic_org': {\r\n        healthTopic: () => {\r\n          const h1 = document.querySelector('h1.content-title, h1')?.textContent;\r\n          return h1?.replace(/\\s*[-–]\\s*Mayo Clinic$/i, '').trim();\r\n        }\r\n      },\r\n      \r\n      // WebMD adapter\r\n      'webmd_com': {\r\n        healthTopic: () => {\r\n          return document.querySelector('h1.article-title, h1')?.textContent.trim();\r\n        }\r\n      },\r\n      \r\n      // MedlinePlus adapter\r\n      'medlineplus_gov': {\r\n        healthTopic: () => {\r\n          return document.querySelector('h1.with-also, h1')?.textContent.trim();\r\n        }\r\n      },\r\n      \r\n      // CNN Health adapter\r\n      'cnn_com': {\r\n        pageType: () => {\r\n          const path = window.location.pathname;\r\n          if (path === '/health' || path === '/health/') return 'portal';\r\n          if (document.querySelector('article')) return 'article';\r\n          return 'portal';\r\n        },\r\n        healthTopic: () => {\r\n          const h1 = document.querySelector('h1.article__title, h1[data-test=\"headline\"], h1');\r\n          return h1?.textContent.trim();\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in chipManager\r\nexport default SubjectExtractor;","// SafeSignal Content Script - Fixed Visibility Edition + Scanner Wiring\r\n// Version: 4.1-visibility-fix + scanners\r\n\r\nconst SAFESIGNAL_BUILD = 'content-2025-10-03-v4.1-scanner-wired';\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\nconsole.info('[SafeSignal] Build:', SAFESIGNAL_BUILD);\r\n// services\r\n// CORRECT - go up one level, then into services\r\nimport ChipManager from './services/chipManager.js';  // ✅ Default import\r\nimport { PageClassifier } from './services/pageClassifier.js';\r\nimport { IntentScorer } from './services/intentScorer.js';\r\nimport { SubjectExtractor } from './services/subjectExtractor.js';\r\nimport { ChipCooldown } from './services/chipCooldown.js';\r\nimport { ChipCache } from './services/chipCache.js';\r\n// components\r\nimport { AssistModal } from './components/AssistModal.js';\r\n\r\n// ← ADDED: Import scanner modules\r\nimport { PageScanner, ScannerUI, APIClient } from './scanners.js';\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        // Core elements\r\n        this.host = null;\r\n        this.root = null;\r\n        \r\n        // State management\r\n        this.currentState = 'checking';\r\n        this.contextData = null;\r\n        this.isMenuOpen = false;\r\n        this.activeModal = null;\r\n        \r\n        // Positioning\r\n        this.position = 'bottom-right';\r\n        \r\n        // Size mode (elder-friendly defaults)\r\n        this.sizeMode = 'large';\r\n        \r\n        // SPA detection\r\n        this.currentUrl = null; // Start as null so first check always runs\r\n        this.mutationObserver = null;\r\n        this.pageDebounceTimer = null;\r\n        this.lastCheckByUrl = new Map();\r\n        this.checkCooldown = 30 * 60 * 1000;\r\n        \r\n        // ← ADDED: Scanner services (initialized after Shadow DOM creation)\r\n        this.apiClient = null;\r\n        this.scanner = null;\r\n        this.scannerUI = null;\r\n        \r\n        // Context detection\r\n        this.contextProbe = new SafeSignalContextProbe();\r\n        \r\n        // User preferences\r\n        this.userPreferences = {\r\n            position: 'bottom-right',\r\n            sizeMode: 'large',\r\n            miniChipsEnabled: true\r\n        };\r\n        this.chipManager = new ChipManager();  // ✅ Create new instance\r\n        \r\n        this.init();\r\n    }\r\n    \r\n    async init() {\r\n        if (this.shouldSkipInjection()) return;\r\n        \r\n        await this.loadUserPreferences();\r\n        this.createBadge();\r\n        chipManager.chipElements = {\r\n            product: () => this.root.querySelector('.chip-product'),\r\n            health: () => this.root.querySelector('.chip-health'),\r\n            wrapper: () => this.chipsWrapper\r\n        };\r\n        // ← ADDED: Initialize scanners after badge creation (needs this.root)\r\n        this.initScanners();\r\n        \r\n        this.initSpaDetection();\r\n        this.setupKeyboardShortcuts();\r\n        this.setupResizeHandler();\r\n        \r\n        console.log('[SafeSignal] Badge initialized and visible');\r\n        this.checkIfPageChanged('initial_load');\r\n    }\r\n    \r\n    shouldSkipInjection() {\r\n        if (document.getElementById('safesignal-host')) {\r\n            console.log('[SafeSignal] Badge already exists');\r\n            return true;\r\n        }\r\n        \r\n        const protocol = window.location.protocol;\r\n        if (['chrome:', 'chrome-extension:', 'moz-extension:', 'about:'].includes(protocol)) {\r\n            return true;\r\n        }\r\n        \r\n        if (window.top !== window) {\r\n            console.log('[SafeSignal] Skipping iframe');\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    // ← ADDED: Scanner initialization\r\n    initScanners() {\r\n        try {\r\n            this.apiClient = new APIClient(API_BASE_URL);\r\n            this.scanner = new PageScanner(this.apiClient);\r\n            this.scannerUI = new ScannerUI(this.scanner, this.root);\r\n            console.log('[SafeSignal] ✅ Scanners initialized');\r\n            this.chipManager.chipElements = {\r\n                product: this.root.querySelector('.chip-product'),\r\n                health: this.root.querySelector('.chip-health'),\r\n                wrapper: this.chipsWrapper\r\n            };\r\n        } catch (error) {\r\n            console.error('[SafeSignal] Scanner initialization failed:', error);\r\n        }\r\n    }\r\n    \r\n    // ==================== BADGE CREATION ====================\r\n    \r\n    createBadge() {\r\n        // Create host container\r\n        this.host = document.createElement('div');\r\n        this.host.setAttribute('id', 'safesignal-host');\r\n        this.root = this.host.attachShadow({ mode: 'open' });\r\n        \r\n        // Get size configuration\r\n        const sizes = {\r\n            normal: { badge: 56, font: 18, chip: 32, chipFont: 14 },\r\n            large: { badge: 64, font: 20, chip: 36, chipFont: 15 },\r\n            xl: { badge: 72, font: 22, chip: 40, chipFont: 16 }\r\n        };\r\n        const config = sizes[this.sizeMode] || sizes.large;\r\n        \r\n        // Create Shadow DOM structure with all your original CSS\r\n        this.root.innerHTML = `\r\n            <style>\r\n                * {\r\n                    margin: 0;\r\n                    padding: 0;\r\n                    box-sizing: border-box;\r\n                }\r\n                \r\n                /* Main container - FIXED positioning */\r\n                .safesignal-container {\r\n                    position: fixed !important;\r\n                    z-index: 2147483647 !important;\r\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif !important;\r\n                    pointer-events: auto !important;\r\n                    display: flex !important;\r\n                    flex-direction: column !important;\r\n                    align-items: center !important;\r\n                    gap: 8px !important;\r\n                }\r\n                \r\n                /* Position classes */\r\n                .pos-top-left { top: 20px !important; left: 20px !important; }\r\n                .pos-top-right { top: 20px !important; right: 20px !important; }\r\n                .pos-bottom-left { bottom: 20px !important; left: 20px !important; }\r\n                .pos-bottom-right { bottom: 20px !important; right: 20px !important; }\r\n                .pos-mid-left { top: 50% !important; left: 20px !important; transform: translateY(-50%) !important; }\r\n                .pos-mid-right { top: 50% !important; right: 20px !important; transform: translateY(-50%) !important; }\r\n                \r\n                /* Mini chips wrapper */\r\n                .chips-wrapper {\r\n                    display: none;\r\n                    flex-direction: column;\r\n                    gap: 6px;\r\n                    max-width: 280px;\r\n                }\r\n                \r\n                .chips-wrapper.visible {\r\n                    display: flex;\r\n                }\r\n                \r\n                .mini-chip {\r\n                    height: ${config.chip}px;\r\n                    padding: 0 16px;\r\n                    border-radius: ${config.chip / 2}px;\r\n                    font-size: ${config.chipFont}px;\r\n                    font-weight: 600;\r\n                    color: white;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 8px;\r\n                    white-space: nowrap;\r\n                    transition: all 0.2s ease;\r\n                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n                }\r\n                \r\n                .mini-chip:hover {\r\n                    transform: translateY(-2px);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .chip-product {\r\n                    background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);\r\n                }\r\n                \r\n                .chip-health {\r\n                    background: linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%);\r\n                }\r\n                \r\n                /* Badge wrapper */\r\n                .badge-wrapper {\r\n                    position: relative;\r\n                }\r\n                \r\n                /* Main badge */\r\n                .badge {\r\n                    height: ${config.badge}px;\r\n                    min-width: ${config.badge}px;\r\n                    padding: 0 20px;\r\n                    padding-right: 48px;\r\n                    border-radius: ${config.badge / 2}px;\r\n                    font-size: ${config.font}px;\r\n                    font-weight: 700;\r\n                    color: white;\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 10px;\r\n                    white-space: nowrap;\r\n                    transition: all 0.2s ease;\r\n                    position: relative;\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.02);\r\n                    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);\r\n                }\r\n                \r\n                /* State colors */\r\n                .state-checking .badge {\r\n                    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                \r\n                .state-ok .badge {\r\n                    background: linear-gradient(135deg, #10b981 0%, #059669 100%);\r\n                }\r\n                \r\n                .state-warning .badge {\r\n                    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\r\n                }\r\n                \r\n                .state-danger .badge {\r\n                    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);\r\n                }\r\n                \r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; }\r\n                    50% { opacity: 0.8; }\r\n                }\r\n                \r\n                .badge-icon {\r\n                    font-size: ${config.font + 2}px;\r\n                    line-height: 1;\r\n                }\r\n                \r\n                .badge-label {\r\n                    font-size: ${config.font}px;\r\n                    line-height: 1;\r\n                }\r\n                \r\n                /* Menu toggle button */\r\n                .menu-btn {\r\n                    position: absolute;\r\n                    right: 8px;\r\n                    top: 50%;\r\n                    transform: translateY(-50%);\r\n                    width: 32px;\r\n                    height: 32px;\r\n                    background: rgba(255, 255, 255, 0.2);\r\n                    border: none;\r\n                    border-radius: 50%;\r\n                    color: white;\r\n                    font-size: 20px;\r\n                    line-height: 1;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n                \r\n                .menu-btn:hover {\r\n                    background: rgba(255, 255, 255, 0.3);\r\n                }\r\n                \r\n                /* Menu panel */\r\n                .menu {\r\n                    position: absolute;\r\n                    bottom: calc(100% + 12px);\r\n                    right: 0;\r\n                    background: white;\r\n                    border-radius: 12px;\r\n                    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\r\n                    border: 1px solid #e5e7eb;\r\n                    padding: 16px;\r\n                    min-width: 220px;\r\n                    display: none;\r\n                    z-index: 1000;\r\n                }\r\n                \r\n                .menu.open {\r\n                    display: block;\r\n                }\r\n                \r\n                /* Adjust menu position for top placements */\r\n                .pos-top-left .menu,\r\n                .pos-top-right .menu {\r\n                    bottom: auto;\r\n                    top: calc(100% + 12px);\r\n                }\r\n                \r\n                .menu-section {\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .menu-section:last-child {\r\n                    margin-bottom: 0;\r\n                }\r\n                \r\n                .menu-label {\r\n                    font-size: 11px;\r\n                    font-weight: 600;\r\n                    color: #6b7280;\r\n                    text-transform: uppercase;\r\n                    letter-spacing: 0.05em;\r\n                    margin-bottom: 8px;\r\n                }\r\n                \r\n                /* Position grid */\r\n                .position-grid {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr);\r\n                    gap: 4px;\r\n                }\r\n                \r\n                .pos-btn {\r\n                    width: 32px;\r\n                    height: 32px;\r\n                    border: 1px solid #d1d5db;\r\n                    border-radius: 6px;\r\n                    background: white;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                    position: relative;\r\n                }\r\n                \r\n                .pos-btn:hover {\r\n                    background: #f3f4f6;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .pos-btn.active {\r\n                    background: #7c3aed;\r\n                    border-color: #7c3aed;\r\n                }\r\n                \r\n                .pos-btn.active::after {\r\n                    content: '✓';\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    left: 50%;\r\n                    transform: translate(-50%, -50%);\r\n                    color: white;\r\n                    font-size: 14px;\r\n                    font-weight: 700;\r\n                }\r\n                \r\n                /* Size controls */\r\n                .size-controls {\r\n                    display: flex;\r\n                    gap: 4px;\r\n                }\r\n                \r\n                .size-btn {\r\n                    flex: 1;\r\n                    padding: 6px 12px;\r\n                    border: 1px solid #d1d5db;\r\n                    border-radius: 6px;\r\n                    background: white;\r\n                    font-size: 13px;\r\n                    font-weight: 500;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                }\r\n                \r\n                .size-btn:hover {\r\n                    background: #f3f4f6;\r\n                    border-color: #9ca3af;\r\n                }\r\n                \r\n                .size-btn.active {\r\n                    background: #7c3aed;\r\n                    color: white;\r\n                    border-color: #7c3aed;\r\n                }\r\n                \r\n                /* Modal overlay */\r\n                .modal-overlay {\r\n                    display: none;\r\n                    position: fixed;\r\n                    top: 0;\r\n                    left: 0;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    background: rgba(0, 0, 0, 0.5);\r\n                    z-index: 2147483646;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n                \r\n                .modal-overlay.visible {\r\n                    display: flex;\r\n                }\r\n                \r\n                .modal {\r\n                    background: white;\r\n                    border-radius: 16px;\r\n                    padding: 24px;\r\n                    max-width: 400px;\r\n                    width: 90%;\r\n                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\r\n                }\r\n                \r\n                .modal-title {\r\n                    font-size: 20px;\r\n                    font-weight: 700;\r\n                    color: #111827;\r\n                    margin-bottom: 12px;\r\n                }\r\n                \r\n                .modal-body {\r\n                    font-size: 16px;\r\n                    line-height: 1.5;\r\n                    color: #6b7280;\r\n                    margin-bottom: 20px;\r\n                }\r\n                \r\n                .modal-close {\r\n                    width: 100%;\r\n                    padding: 12px;\r\n                    border-radius: 8px;\r\n                    background: #7c3aed;\r\n                    color: white;\r\n                    font-size: 16px;\r\n                    font-weight: 600;\r\n                    border: none;\r\n                    cursor: pointer;\r\n                    transition: all 0.2s ease;\r\n                }\r\n                \r\n                .modal-close:hover {\r\n                    background: #6d28d9;\r\n                }\r\n                \r\n                /* Accessibility */\r\n                @media (prefers-reduced-motion: reduce) {\r\n                    * {\r\n                        transition: none !important;\r\n                        animation: none !important;\r\n                    }\r\n                }\r\n            </style>\r\n            \r\n            <!-- Main container with position class -->\r\n            <div class=\"safesignal-container pos-bottom-right\" id=\"main-container\">\r\n                <!-- Mini chips wrapper (will be populated dynamically) -->\r\n                <div class=\"chips-wrapper\" id=\"chips-wrapper\"></div>\r\n                \r\n                <!-- Badge wrapper -->\r\n                <div class=\"badge-wrapper\">\r\n                    <div class=\"badge state-checking\" \r\n                         role=\"button\" \r\n                         tabindex=\"0\" \r\n                         aria-live=\"polite\" \r\n                         aria-label=\"SafeSignal: Checking\"\r\n                         id=\"main-badge\">\r\n                        <span class=\"badge-icon\">⧗</span>\r\n                        <span class=\"badge-label\">Checking</span>\r\n                        <button class=\"menu-btn\" \r\n                                aria-label=\"SafeSignal Menu\"\r\n                                aria-expanded=\"false\"\r\n                                id=\"menu-btn\">\r\n                            ⋯\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <!-- Menu -->\r\n                    <div class=\"menu\" id=\"menu\" role=\"dialog\">\r\n                        <div class=\"menu-section\">\r\n                            <div class=\"menu-label\">Position</div>\r\n                            <div class=\"position-grid\">\r\n                                <button class=\"pos-btn\" data-pos=\"top-left\" title=\"Top Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"top-center\" title=\"Top Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"top-right\" title=\"Top Right\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-left\" title=\"Middle Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-center\" title=\"Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"mid-right\" title=\"Middle Right\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"bottom-left\" title=\"Bottom Left\"></button>\r\n                                <button class=\"pos-btn\" data-pos=\"bottom-center\" title=\"Bottom Center\" disabled style=\"opacity: 0.3\"></button>\r\n                                <button class=\"pos-btn active\" data-pos=\"bottom-right\" title=\"Bottom Right\"></button>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div class=\"menu-section\">\r\n                            <div class=\"menu-label\">Size</div>\r\n                            <div class=\"size-controls\">\r\n                                <button class=\"size-btn\" data-size=\"normal\">Normal</button>\r\n                                <button class=\"size-btn active\" data-size=\"large\">Large</button>\r\n                                <button class=\"size-btn\" data-size=\"xl\">XL</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Modal -->\r\n            <div class=\"modal-overlay\" id=\"modal-overlay\">\r\n                <div class=\"modal\" role=\"dialog\" aria-modal=\"true\">\r\n                    <h2 class=\"modal-title\" id=\"modal-title\">Feature Coming Soon</h2>\r\n                    <div class=\"modal-body\" id=\"modal-body\">\r\n                        This feature is being developed and will be available soon.\r\n                    </div>\r\n                    <button class=\"modal-close\" id=\"modal-close\">Got it</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        // Add to page - CRITICAL: append to body\r\n        document.body.appendChild(this.host);\r\n        \r\n        // Get element references\r\n        this.container = this.root.getElementById('main-container');\r\n        this.badge = this.root.getElementById('main-badge');\r\n        this.menuBtn = this.root.getElementById('menu-btn');\r\n        this.menu = this.root.getElementById('menu');\r\n        this.chipsWrapper = this.root.getElementById('chips-wrapper');\r\n        this.modalOverlay = this.root.getElementById('modal-overlay');\r\n        \r\n        // Initialize event listeners\r\n        this.initEventListeners();\r\n        \r\n        // Apply saved position\r\n        this.setPosition(this.userPreferences.position);\r\n        \r\n        // Apply saved size\r\n        this.setSize(this.userPreferences.sizeMode);\r\n        \r\n        console.log('[SafeSignal] Badge created and should be visible');\r\n    }\r\n    \r\n    // ==================== EVENT LISTENERS ====================\r\n    \r\n    initEventListeners() {\r\n        // Badge click\r\n        this.badge.addEventListener('click', (e) => {\r\n            if (e.target === this.menuBtn || this.menuBtn.contains(e.target)) return;\r\n            console.log('[SafeSignal] Badge clicked');\r\n        });\r\n        \r\n        // Menu toggle\r\n        this.menuBtn.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.toggleMenu();\r\n        });\r\n        \r\n        // Position buttons\r\n        this.root.querySelectorAll('.pos-btn:not([disabled])').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const position = btn.dataset.pos;\r\n                this.setPosition(position);\r\n                this.saveUserPreferences();\r\n            });\r\n        });\r\n        \r\n        // Size buttons\r\n        this.root.querySelectorAll('.size-btn').forEach(btn => {\r\n            btn.addEventListener('click', () => {\r\n                const size = btn.dataset.size;\r\n                this.setSize(size);\r\n                this.saveUserPreferences();\r\n            });\r\n        });\r\n        \r\n        // Modal close\r\n        this.root.getElementById('modal-close').addEventListener('click', () => {\r\n            this.closeModal();\r\n        });\r\n        \r\n        // Close menu on outside click\r\n        document.addEventListener('click', (e) => {\r\n            if (this.isMenuOpen && !this.host.contains(e.target)) {\r\n                this.closeMenu();\r\n            }\r\n        });\r\n    }\r\n    \r\n    // ==================== POSITION MANAGEMENT ====================\r\n    \r\n    setPosition(position) {\r\n        const validPositions = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'mid-left', 'mid-right'];\r\n        \r\n        if (!validPositions.includes(position)) {\r\n            position = 'bottom-right';\r\n        }\r\n        \r\n        // Remove all position classes\r\n        validPositions.forEach(pos => {\r\n            this.container.classList.remove(`pos-${pos}`);\r\n        });\r\n        \r\n        // Add new position class\r\n        this.container.classList.add(`pos-${position}`);\r\n        \r\n        // Update active button\r\n        this.root.querySelectorAll('.pos-btn').forEach(btn => {\r\n            btn.classList.toggle('active', btn.dataset.pos === position);\r\n        });\r\n        \r\n        this.position = position;\r\n        this.userPreferences.position = position;\r\n        \r\n        console.log(`[SafeSignal] Position set to: ${position}`);\r\n    }\r\n    \r\n    // ==================== SIZE MANAGEMENT ====================\r\n    \r\n    setSize(size) {\r\n        const sizes = {\r\n            normal: { badge: 56, font: 18, chip: 32, chipFont: 14 },\r\n            large: { badge: 64, font: 20, chip: 36, chipFont: 15 },\r\n            xl: { badge: 72, font: 22, chip: 40, chipFont: 16 }\r\n        };\r\n        \r\n        const config = sizes[size] || sizes.large;\r\n        \r\n        // Update badge size\r\n        this.badge.style.height = `${config.badge}px`;\r\n        this.badge.style.minWidth = `${config.badge}px`;\r\n        this.badge.style.borderRadius = `${config.badge / 2}px`;\r\n        this.badge.style.fontSize = `${config.font}px`;\r\n        \r\n        // Update chips size\r\n        this.root.querySelectorAll('.mini-chip').forEach(chip => {\r\n            chip.style.height = `${config.chip}px`;\r\n            chip.style.borderRadius = `${config.chip / 2}px`;\r\n            chip.style.fontSize = `${config.chipFont}px`;\r\n        });\r\n        \r\n        // Update active button\r\n        this.root.querySelectorAll('.size-btn').forEach(btn => {\r\n            btn.classList.toggle('active', btn.dataset.size === size);\r\n        });\r\n        \r\n        this.sizeMode = size;\r\n        this.userPreferences.sizeMode = size;\r\n        \r\n        console.log(`[SafeSignal] Size set to: ${size}`);\r\n    }\r\n    \r\n    // ==================== MENU MANAGEMENT ====================\r\n    \r\n    toggleMenu() {\r\n        if (this.isMenuOpen) {\r\n            this.closeMenu();\r\n        } else {\r\n            this.openMenu();\r\n        }\r\n    }\r\n    \r\n    openMenu() {\r\n        this.menu.classList.add('open');\r\n        this.menuBtn.setAttribute('aria-expanded', 'true');\r\n        this.isMenuOpen = true;\r\n    }\r\n    \r\n    closeMenu() {\r\n        this.menu.classList.remove('open');\r\n        this.menuBtn.setAttribute('aria-expanded', 'false');\r\n        this.isMenuOpen = false;\r\n    }\r\n    \r\n    // ==================== MODAL MANAGEMENT ====================\r\n    \r\n    showModal(title, body) {\r\n        this.root.getElementById('modal-title').textContent = title;\r\n        this.root.getElementById('modal-body').textContent = body;\r\n        this.modalOverlay.classList.add('visible');\r\n        this.activeModal = this.modalOverlay;\r\n    }\r\n    \r\n    closeModal() {\r\n        this.modalOverlay.classList.remove('visible');\r\n        this.activeModal = null;\r\n    }\r\n    \r\n    // ==================== MINI CHIPS MANAGEMENT ====================\r\n    \r\n    updateMiniChips() {\r\n        // Let the chip manager handle all gate logic\r\n        this.chipManager.evaluateChips();\r\n    }\r\n    \r\n        // ← ADDED: Scanner handlers\r\n    async handleProductScan() {\r\n        if (!this.scannerUI) {\r\n            console.error('[SafeSignal] Scanner UI not initialized');\r\n            return;\r\n        }\r\n        \r\n        // Get the extracted subject from chip manager\r\n        const extraction = await chipManager.subjectExtractor.extractSubject('product');\r\n        if (!extraction.subject) {\r\n            console.log('[SafeSignal] No product subject extracted');\r\n            return;\r\n        }\r\n        \r\n        console.log('[SafeSignal] 🛒 Starting product scan for:', extraction.subject);\r\n        try {\r\n            await this.scannerUI.handleProductScan(extraction.subject);\r\n        } catch (error) {\r\n            console.error('[SafeSignal] Product scan error:', error);\r\n        }\r\n    }\r\n\r\n    // Similarly for handleHealthScan():\r\n    async handleHealthScan() {\r\n        if (!this.scannerUI) {\r\n            console.error('[SafeSignal] Scanner UI not initialized');\r\n            return;\r\n        }\r\n        \r\n        // Get the extracted subject from chip manager\r\n        const extraction = await chipManager.subjectExtractor.extractSubject('health');\r\n        if (!extraction.subject) {\r\n            console.log('[SafeSignal] No health subject extracted');\r\n            return;\r\n        }\r\n        \r\n        console.log('[SafeSignal] 🏥 Starting health scan for:', extraction.subject);\r\n        try {\r\n            await this.scannerUI.handleHealthScan(extraction.subject);\r\n        } catch (error) {\r\n            console.error('[SafeSignal] Health scan error:', error);\r\n        }\r\n    }\r\n    \r\n    // ==================== STATE MANAGEMENT ====================\r\n    \r\n    getStateIcon() {\r\n        const icons = {\r\n            checking: '⧗',\r\n            ok: '✅',\r\n            warning: '⚠️',\r\n            danger: '❌'\r\n        };\r\n        return icons[this.currentState] || '❓';\r\n    }\r\n    \r\n    getStateText() {\r\n        const texts = {\r\n            checking: 'Checking',\r\n            ok: 'Looks Good',\r\n            warning: 'Be Careful',\r\n            danger: 'High Risk'\r\n        };\r\n        return texts[this.currentState] || 'Unknown';\r\n    }\r\n    \r\n    updateBadgeState(state) {\r\n        this.currentState = state;\r\n        \r\n        // Update badge state classes\r\n        this.container.classList.remove('state-checking', 'state-ok', 'state-warning', 'state-danger');\r\n        this.container.classList.add(`state-${state}`);\r\n        \r\n        // Update icon and text\r\n        const icon = this.root.querySelector('.badge-icon');\r\n        const label = this.root.querySelector('.badge-label');\r\n        \r\n        if (icon) icon.textContent = this.getStateIcon();\r\n        if (label) label.textContent = this.getStateText();\r\n        \r\n        // Update ARIA label\r\n        this.badge.setAttribute('aria-label', `SafeSignal: ${this.getStateText()}`);\r\n        \r\n        // Update mini chips based on new state\r\n        this.updateMiniChips();\r\n        \r\n        console.log(`[SafeSignal] State updated to: ${state}`);\r\n    }\r\n    \r\n    // ==================== PAGE CHANGE DETECTION ====================\r\n    \r\n    async checkIfPageChanged(trigger = 'unknown') {\r\n        const url = window.location.href;\r\n        \r\n        // Skip if URL hasn't changed and not initial load\r\n        if (this.currentUrl === url && trigger !== 'initial_load') {\r\n            return;\r\n        }\r\n        \r\n        // Check cooldown\r\n        const lastCheck = this.lastCheckByUrl.get(url);\r\n        if (lastCheck && (Date.now() - lastCheck) < this.checkCooldown) {\r\n            console.log('[SafeSignal] Skipping check (cooldown)');\r\n            return;\r\n        }\r\n        \r\n        this.currentUrl = url;\r\n        console.log(`[SafeSignal] Checking page (${trigger}): ${url}`);\r\n        \r\n        // Set checking state\r\n        this.updateBadgeState('checking');\r\n        \r\n        try {\r\n            // Simple heuristic analysis (your original logic)\r\n            const pageText = document.body.innerText.toLowerCase();\r\n            let state = 'ok';\r\n            \r\n            // Check for suspicious patterns\r\n            const suspiciousTerms = [\r\n                'urgent', 'act now', 'limited time', 'congratulations', 'claim your', 'verify account',\r\n                'suspended', 'click here immediately', 'confirm identity'\r\n            ];\r\n            \r\n            const warningTerms = [\r\n                'sale', 'discount', 'offer', 'deal', 'subscribe',\r\n                'download', 'update required', 'install'\r\n            ];\r\n            \r\n            // Count suspicious indicators\r\n            const suspiciousCount = suspiciousTerms.filter(term => pageText.includes(term)).length;\r\n            const warningCount = warningTerms.filter(term => pageText.includes(term)).length;\r\n            \r\n            // Determine state based on indicators\r\n            if (suspiciousCount >= 3) {\r\n                state = 'danger';\r\n            } else if (suspiciousCount >= 1 || warningCount >= 3) {\r\n                state = 'warning';\r\n            } else {\r\n                // Check URL patterns\r\n                const urlLower = url.toLowerCase();\r\n                if (urlLower.includes('phishing') || urlLower.includes('suspicious')) {\r\n                    state = 'danger';\r\n                } else if (urlLower.includes('shop') || urlLower.includes('promo')) {\r\n                    state = 'warning';\r\n                }\r\n            }\r\n            \r\n            console.log(`[SafeSignal] Analysis complete: ${state}`);\r\n            this.updateBadgeState(state);\r\n            this.lastCheckByUrl.set(url, Date.now());\r\n            \r\n        } catch (error) {\r\n            console.error('[SafeSignal] Analysis failed:', error);\r\n            this.updateBadgeState('ok'); // Default to safe on error\r\n        }\r\n    }\r\n    \r\n    // ==================== SPA DETECTION ====================\r\n    \r\n    initSpaDetection() {\r\n        // Patch history API\r\n        const originalPushState = history.pushState;\r\n        const originalReplaceState = history.replaceState;\r\n        \r\n        history.pushState = (...args) => {\r\n            originalPushState.apply(history, args);\r\n            this.checkIfPageChanged('pushState');\r\n        };\r\n        \r\n        history.replaceState = (...args) => {\r\n            originalReplaceState.apply(history, args);\r\n            this.checkIfPageChanged('replaceState');\r\n        };\r\n        \r\n        // Listen to popstate\r\n        window.addEventListener('popstate', () => {\r\n            this.checkIfPageChanged('popstate');\r\n        });\r\n        \r\n        // Mutation observer for content changes\r\n        this.mutationObserver = new MutationObserver(() => {\r\n            this.debouncedPageCheck();\r\n        });\r\n        \r\n        this.mutationObserver.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n        \r\n        console.log('[SafeSignal] SPA detection enabled');\r\n    }\r\n    \r\n    debouncedPageCheck() {\r\n        clearTimeout(this.pageDebounceTimer);\r\n        this.pageDebounceTimer = setTimeout(() => {\r\n            this.checkIfPageChanged('mutation');\r\n        }, 800);\r\n    }\r\n    \r\n    // ==================== KEYBOARD SHORTCUTS ====================\r\n    \r\n    setupKeyboardShortcuts() {\r\n        document.addEventListener('keydown', (e) => {\r\n            // Alt+S to toggle SafeSignal visibility\r\n            if (e.altKey && e.key === 's') {\r\n                e.preventDefault();\r\n                this.toggleVisibility();\r\n            }\r\n            \r\n            // Escape to close menu/modal\r\n            if (e.key === 'Escape') {\r\n                if (this.activeModal) {\r\n                    this.closeModal();\r\n                } else if (this.isMenuOpen) {\r\n                    this.closeMenu();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    \r\n    toggleVisibility() {\r\n        if (this.host.style.display === 'none') {\r\n            this.host.style.display = '';\r\n            console.log('[SafeSignal] Badge shown');\r\n        } else {\r\n            this.host.style.display = 'none';\r\n            console.log('[SafeSignal] Badge hidden');\r\n        }\r\n    }\r\n    \r\n    // ==================== RESIZE HANDLER ====================\r\n    \r\n    setupResizeHandler() {\r\n        let resizeTimer;\r\n        \r\n        window.addEventListener('resize', () => {\r\n            if (resizeTimer) {\r\n                clearTimeout(resizeTimer);\r\n            }\r\n            \r\n            resizeTimer = setTimeout(() => {\r\n                // Ensure badge stays visible after resize\r\n                const rect = this.container.getBoundingClientRect();\r\n                if (rect.right > window.innerWidth || rect.bottom > window.innerHeight) {\r\n                    console.log('[SafeSignal] Adjusting position after resize');\r\n                    this.setPosition(this.position);\r\n                }\r\n            }, 250);\r\n        });\r\n    }\r\n    \r\n    // ==================== USER PREFERENCES ====================\r\n    \r\n    async loadUserPreferences() {\r\n        try {\r\n            const stored = await chrome.storage.sync.get([\r\n                'position',\r\n                'sizeMode',\r\n                'miniChipsEnabled'\r\n            ]);\r\n            \r\n            if (stored.position) {\r\n                this.userPreferences.position = stored.position;\r\n            }\r\n            \r\n            if (stored.sizeMode) {\r\n                this.userPreferences.sizeMode = stored.sizeMode;\r\n                this.sizeMode = stored.sizeMode;\r\n            }\r\n            \r\n            if (stored.miniChipsEnabled !== undefined) {\r\n                this.userPreferences.miniChipsEnabled = stored.miniChipsEnabled;\r\n            }\r\n            \r\n            console.log('[SafeSignal] Preferences loaded:', this.userPreferences);\r\n        } catch (error) {\r\n            console.warn('[SafeSignal] Could not load preferences:', error);\r\n            // Use defaults if storage fails\r\n        }\r\n    }\r\n    \r\n    async saveUserPreferences() {\r\n        try {\r\n            await chrome.storage.sync.set({\r\n                position: this.userPreferences.position,\r\n                sizeMode: this.userPreferences.sizeMode,\r\n                miniChipsEnabled: this.userPreferences.miniChipsEnabled\r\n            });\r\n            \r\n            console.log('[SafeSignal] Preferences saved');\r\n        } catch (error) {\r\n            console.warn('[SafeSignal] Could not save preferences:', error);\r\n        }\r\n    }\r\n    \r\n    // ==================== CLEANUP ====================\r\n    \r\n    destroy() {\r\n        // Remove event listeners\r\n        if (this.mutationObserver) {\r\n            this.mutationObserver.disconnect();\r\n        }\r\n        \r\n        // Remove DOM elements\r\n        if (this.host && this.host.parentNode) {\r\n            this.host.parentNode.removeChild(this.host);\r\n        }\r\n        \r\n        // Clear maps\r\n        this.lastCheckByUrl.clear();\r\n        \r\n        console.log('[SafeSignal] Badge destroyed');\r\n    }\r\n}\r\n\r\n// ==================== CONTEXT PROBE (YOUR ORIGINAL) ====================\r\n\r\nclass SafeSignalContextProbe {\r\n    constructor() {\r\n        this.indicators = {\r\n            product: {\r\n                terms: ['price', 'buy now', 'add to cart', 'shop', 'deal', 'sale', 'discount'],\r\n                selectors: [\r\n                    '[itemtype*=\"Product\"]',\r\n                    '[data-price]',\r\n                    'button[name=\"add-to-cart\"]',\r\n                    '.product-price',\r\n                    '.price'\r\n                ],\r\n                patterns: [/\\$\\d+/, /€\\d+/, /£\\d+/]\r\n            },\r\n            health: {\r\n                terms: ['symptom', 'treatment', 'cure', 'diagnosis', 'medical', 'health', 'doctor'],\r\n                suspiciousTerms: ['miracle cure', 'guaranteed', 'breakthrough', 'secret'],\r\n                selectors: [\r\n                    'article[about*=\"health\"]',\r\n                    '.medical-content',\r\n                    '[data-medical-info]'\r\n                ]\r\n            }\r\n        };\r\n    }\r\n    \r\n    detectContext() {\r\n        const results = {\r\n            product: { confidence: 0, signals: [] },\r\n            health: { confidence: 0, signals: [] }\r\n        };\r\n        \r\n        const pageText = this.getPageText();\r\n        const pageTitle = document.title.toLowerCase();\r\n        const pageUrl = window.location.href.toLowerCase();\r\n        \r\n        results.product = this.analyzeProductSignals(pageText, pageTitle, pageUrl);\r\n        results.health = this.analyzeHealthSignals(pageText, pageTitle, pageUrl);\r\n        \r\n        return results;\r\n    }\r\n    \r\n    getPageText() {\r\n        const contentSelectors = ['main', 'article', '[role=\"main\"]', '#content', '.content'];\r\n        let text = '';\r\n        \r\n        for (const selector of contentSelectors) {\r\n            const element = document.querySelector(selector);\r\n            if (element) {\r\n                text += (element.innerText || element.textContent || '') + ' ';\r\n            }\r\n        }\r\n        \r\n        if (!text.trim()) {\r\n            const bodyText = document.body.innerText || document.body.textContent || '';\r\n            text = bodyText;\r\n        }\r\n        \r\n        return text.toLowerCase().slice(0, 5000);\r\n    }\r\n    \r\n    analyzeProductSignals(pageText, pageTitle, pageUrl) {\r\n        let confidence = 0;\r\n        const signals = [];\r\n        \r\n        const termMatches = this.indicators.product.terms.filter(term => \r\n            pageText.includes(term) || pageTitle.includes(term)\r\n        );\r\n        \r\n        if (termMatches.length > 0) {\r\n            confidence += Math.min(termMatches.length * 0.1, 0.4);\r\n            signals.push(`Found ${termMatches.length} shopping terms`);\r\n        }\r\n        \r\n        const selectorMatches = this.indicators.product.selectors.filter(selector => {\r\n            try {\r\n                return document.querySelector(selector) !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        });\r\n        \r\n        if (selectorMatches.length > 0) {\r\n            confidence += Math.min(selectorMatches.length * 0.2, 0.4);\r\n            signals.push(`Found ${selectorMatches.length} product elements`);\r\n        }\r\n        \r\n        const priceMatches = this.indicators.product.patterns.filter(pattern =>\r\n            pattern.test(pageText)\r\n        );\r\n        \r\n        if (priceMatches.length > 0) {\r\n            confidence += 0.2;\r\n            signals.push('Found price indicators');\r\n        }\r\n        \r\n        if (/shop|store|product|cart|checkout|buy/.test(pageUrl)) {\r\n            confidence += 0.2;\r\n            signals.push('Shopping URL pattern');\r\n        }\r\n        \r\n        return { confidence: Math.min(confidence, 1), signals };\r\n    }\r\n    \r\n    analyzeHealthSignals(pageText, pageTitle, pageUrl) {\r\n        let confidence = 0;\r\n        const signals = [];\r\n        \r\n        const termMatches = this.indicators.health.terms.filter(term =>\r\n            pageText.includes(term) || pageTitle.includes(term)\r\n        );\r\n        \r\n        if (termMatches.length > 0) {\r\n            confidence += Math.min(termMatches.length * 0.1, 0.4);\r\n            signals.push(`Found ${termMatches.length} health terms`);\r\n        }\r\n        \r\n        const suspiciousMatches = this.indicators.health.suspiciousTerms.filter(term =>\r\n            pageText.includes(term)\r\n        );\r\n        \r\n        if (suspiciousMatches.length > 0) {\r\n            confidence += Math.min(suspiciousMatches.length * 0.15, 0.3);\r\n            signals.push('Detected suspicious health claims');\r\n        }\r\n        \r\n        const selectorMatches = this.indicators.health.selectors.filter(selector => {\r\n            try {\r\n                return document.querySelector(selector) !== null;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        });\r\n        \r\n        if (selectorMatches.length > 0) {\r\n            confidence += 0.2;\r\n            signals.push('Found health-related markup');\r\n        }\r\n        \r\n        if (/health|medical|medicine|treatment|symptom|drug/.test(pageUrl)) {\r\n            confidence += 0.2;\r\n            signals.push('Health URL pattern');\r\n        }\r\n        \r\n        return { confidence: Math.min(confidence, 1), signals };\r\n    }\r\n}\r\n\r\n// ==================== INITIALIZATION ====================\r\n\r\nfunction initializeSafeSignal() {\r\n    // Clean up any existing instance\r\n    if (window.safeSignalInstance) {\r\n        window.safeSignalInstance.destroy();\r\n        window.safeSignalInstance = null;\r\n    }\r\n    \r\n    // Create chipManager singleton FIRST\r\n    if (!window.chipManager) {\r\n        window.chipManager = new ChipManager();\r\n    }\r\n    \r\n    // Create new badge instance\r\n    window.safeSignalInstance = new SafeSignalBadge();\r\n    console.log('[SafeSignal] Extension initialized with scanners');\r\n}\r\n\r\n// Wait for DOM to be ready\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeSafeSignal);\r\n} else {\r\n    // DOM is already loaded, initialize immediately\r\n    initializeSafeSignal();\r\n}\r\n\r\n// Handle dynamic iframe injections\r\nif (window.self === window.top) {\r\n    // Only in main window, not iframes\r\n    console.log('[SafeSignal] Content script loaded in main window');\r\n}\r\n\r\n// Export for testing\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = { SafeSignalBadge, SafeSignalContextProbe };\r\n}","// extension/src/services/pageClassifier.js\r\n// Gate 0: Page Type Classification - Blocks chips on SERPs, portals, feeds\r\n// NEVER affects badge - badge always shows on all pages\r\n\r\nclass PageClassifier {\r\n  constructor() {\r\n    // Known domains categorized by type\r\n    this.knownDomains = {\r\n      serp: [\r\n        'google.com/search', 'bing.com/search', 'duckduckgo.com',\r\n        'search.yahoo.com', 'ask.com', 'baidu.com', 'yandex.com',\r\n        'reddit.com/search', 'twitter.com/search', 'facebook.com/search'\r\n      ],\r\n      portal: [\r\n        'google.com', 'bing.com', 'yahoo.com', 'msn.com',\r\n        'news.google.com', 'apple.news', 'flipboard.com', 'feedly.com',\r\n        'reddit.com/r/all', 'reddit.com/r/popular', 'reddit.com',\r\n        'twitter.com', 'facebook.com', 'instagram.com', 'linkedin.com/feed',\r\n        'tiktok.com', 'pinterest.com', 'tumblr.com',\r\n        'cnn.com', 'bbc.com', 'foxnews.com', 'nytimes.com',\r\n        'target.com', 'walmart.com', 'amazon.com', 'ebay.com',\r\n        'bestbuy.com', 'homedepot.com', 'costco.com'\r\n      ],\r\n      health: [\r\n        'healthline.com', 'webmd.com', 'mayoclinic.org', 'medlineplus.gov',\r\n        'cdc.gov', 'nih.gov', 'who.int', 'clevelandclinic.org'\r\n      ]\r\n    };\r\n    \r\n    // URL patterns for detection\r\n    this.urlPatterns = {\r\n      serp: [\r\n        /\\/search\\b/i, /\\/results\\b/i, /[?&]q=/i, /[?&]query=/i,\r\n        /\\/find\\b/i, /[?&]s=/i, /\\/s\\?/i\r\n      ],\r\n      portal: [\r\n        /^\\/$/,  // Root path\r\n        /^\\/news\\/?$/i, /^\\/trending\\/?$/i, /^\\/popular\\/?$/i,\r\n        /^\\/feed\\/?$/i, /^\\/explore\\/?$/i, /^\\/discover\\/?$/i,\r\n        /^\\/all\\/?$/i, /^\\/home\\/?$/i\r\n      ],\r\n      category: [\r\n        /\\/c\\/[^/]+$/i,  // Target category pages\r\n        /\\/category\\/[^/]+$/i, /\\/categories\\//i,\r\n        /\\/shop\\/[^/]+$/i, /\\/department\\/[^/]+$/i,\r\n        /\\/browse\\/[^/]+$/i, /\\/collection\\/[^/]+$/i\r\n      ],\r\n      product: [\r\n        /\\/dp\\/[A-Z0-9]+/i,  // Amazon\r\n        /\\/p\\/[^/]+/i,  // Target\r\n        /\\/pd\\/[^/]+/i, /\\/product\\/[^/]+/i,\r\n        /\\/item\\/[^/]+/i, /\\/ip\\/[^/]+/i,  // Walmart\r\n        /\\/itm\\/\\d+/i  // eBay\r\n      ],\r\n      article: [\r\n        /\\/article\\//i, /\\/story\\//i, /\\/post\\//i,\r\n        /\\/\\d{4}\\/\\d{2}\\//,  // Date-based URLs\r\n        /\\/health\\/[^/]+\\/[^/]+/i,  // Health articles\r\n        /\\/nutrition\\/[^/]+/i, /\\/conditions\\/[^/]+/i\r\n      ]\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Main classification method\r\n   * @returns {string} 'serp' | 'portal' | 'product' | 'health' | 'article' | 'ambiguous'\r\n   */\r\n  classify(url = window.location.href) {\r\n    const urlObj = new URL(url);\r\n    const hostname = urlObj.hostname.replace('www.', '');\r\n    const pathname = urlObj.pathname;\r\n    const fullPath = hostname + pathname;\r\n    \r\n    console.log('[PageClassifier] Analyzing:', fullPath);\r\n    \r\n    // 1. Check for SERP indicators\r\n    if (this.isSERP(urlObj, hostname, pathname)) {\r\n      return 'serp';\r\n    }\r\n    \r\n    // 2. Check for portal/feed pages\r\n    if (this.isPortal(urlObj, hostname, pathname)) {\r\n      return 'portal';\r\n    }\r\n    \r\n    // 3. Check for category/listing pages\r\n    if (this.isCategoryPage(urlObj, hostname, pathname)) {\r\n      return 'portal';  // Treat category pages as portals (no chips)\r\n    }\r\n    \r\n    // 4. Check for product pages\r\n    if (this.isProductPage(urlObj, hostname, pathname)) {\r\n      return 'product';\r\n    }\r\n    \r\n    // 5. Check for health/article pages\r\n    if (this.isHealthArticle(urlObj, hostname, pathname)) {\r\n      return 'article';\r\n    }\r\n    \r\n    // 6. Check for general articles\r\n    if (this.isArticle(urlObj, hostname, pathname)) {\r\n      return 'article';\r\n    }\r\n    \r\n    // Default to ambiguous (chips blocked)\r\n    return 'ambiguous';\r\n  }\r\n  \r\n  /**\r\n   * SERP Detection\r\n   */\r\n  isSERP(urlObj, hostname, pathname) {\r\n    // Check known SERP domains\r\n    if (this.knownDomains.serp.some(domain => \r\n      (hostname + pathname).startsWith(domain)\r\n    )) {\r\n      console.log('[PageClassifier] Matched known SERP domain');\r\n      return true;\r\n    }\r\n    \r\n    // Check URL patterns\r\n    if (this.urlPatterns.serp.some(pattern => pattern.test(urlObj.href))) {\r\n      console.log('[PageClassifier] Matched SERP URL pattern');\r\n      return true;\r\n    }\r\n    \r\n    // Check query parameters\r\n    const hasSearchQuery = urlObj.searchParams.has('q') || \r\n                          urlObj.searchParams.has('query') ||\r\n                          urlObj.searchParams.has('search_query') ||\r\n                          urlObj.searchParams.has('s');\r\n    if (hasSearchQuery && pathname.includes('search')) {\r\n      console.log('[PageClassifier] Detected search query params');\r\n      return true;\r\n    }\r\n    \r\n    // DOM-based SERP detection\r\n    const serpSelectors = [\r\n      '#rso .g',  // Google results\r\n      '[data-hveid]',  // Google result items\r\n      '.b_algo',  // Bing results\r\n      '.search-result-item',\r\n      '#search-results',\r\n      '.results-list'\r\n    ];\r\n    \r\n    for (const selector of serpSelectors) {\r\n      try {\r\n        const elements = document.querySelectorAll(selector);\r\n        if (elements.length >= 3) {  // Multiple results indicate SERP\r\n          console.log('[PageClassifier] Found SERP DOM elements:', selector);\r\n          return true;\r\n        }\r\n      } catch (e) {\r\n        // Selector might be invalid, continue\r\n      }\r\n    }\r\n    \r\n    // Check for search input + results pattern\r\n    const hasSearchInput = document.querySelector('input[type=\"search\"], input[name=\"q\"], input[name=\"query\"]');\r\n    const hasMultipleLinks = document.querySelectorAll('a[href*=\"http\"]').length > 20;\r\n    if (hasSearchInput && hasMultipleLinks) {\r\n      console.log('[PageClassifier] Detected search input + many links');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Portal/Feed Detection\r\n   */\r\n  isPortal(urlObj, hostname, pathname) {\r\n    // Check known portal domains\r\n    for (const domain of this.knownDomains.portal) {\r\n      if (hostname === domain || hostname.endsWith('.' + domain)) {\r\n        // Check if we're on homepage or section page\r\n        if (pathname === '/' || pathname === '' || \r\n            this.urlPatterns.portal.some(p => p.test(pathname))) {\r\n          console.log('[PageClassifier] Matched portal domain:', domain);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Special case: news site homepages and section pages\r\n    const newsSites = ['cnn.com', 'bbc.com', 'nytimes.com', 'foxnews.com'];\r\n    if (newsSites.some(site => hostname.includes(site))) {\r\n      // Section pages like /health, /tech, /business\r\n      if (pathname.match(/^\\/[a-z]+\\/?$/i) && !pathname.includes('article')) {\r\n        console.log('[PageClassifier] News section page detected');\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Special case: e-commerce homepages\r\n    const ecommerceSites = ['amazon.com', 'target.com', 'walmart.com', 'ebay.com'];\r\n    if (ecommerceSites.some(site => hostname.includes(site))) {\r\n      if (pathname === '/' || pathname === '') {\r\n        console.log('[PageClassifier] E-commerce homepage detected');\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Social media feeds\r\n    const socialPatterns = [\r\n      /twitter\\.com\\/?$/,\r\n      /facebook\\.com\\/?$/,\r\n      /instagram\\.com\\/?$/,\r\n      /linkedin\\.com\\/feed/,\r\n      /reddit\\.com\\/r\\/\\w+\\/?$/\r\n    ];\r\n    if (socialPatterns.some(pattern => pattern.test(hostname + pathname))) {\r\n      console.log('[PageClassifier] Social media feed detected');\r\n      return true;\r\n    }\r\n    \r\n    // DOM-based portal detection\r\n    const feedIndicators = [\r\n      '.feed', '.timeline', '.stream',\r\n      '[data-testid=\"primaryColumn\"]',  // Twitter feed\r\n      '[role=\"feed\"]', '.news-feed'\r\n    ];\r\n    \r\n    let feedElementCount = 0;\r\n    for (const selector of feedIndicators) {\r\n      try {\r\n        if (document.querySelector(selector)) {\r\n          feedElementCount++;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    \r\n    if (feedElementCount >= 2) {\r\n      console.log('[PageClassifier] Multiple feed elements found');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Category/Listing Page Detection\r\n   */\r\n  isCategoryPage(urlObj, hostname, pathname) {\r\n    // URL pattern matching\r\n    if (this.urlPatterns.category.some(pattern => pattern.test(pathname))) {\r\n      console.log('[PageClassifier] Category URL pattern matched');\r\n      return true;\r\n    }\r\n    \r\n    // Look for product grids (multiple product cards)\r\n    const productCards = document.querySelectorAll(\r\n      '[class*=\"product-card\"], [class*=\"productCard\"], ' +\r\n      '[class*=\"product-item\"], [class*=\"item-card\"], ' +\r\n      '[data-testid*=\"product\"], [data-product-id]'\r\n    );\r\n    \r\n    if (productCards.length >= 6) {  // Multiple products = category page\r\n      console.log('[PageClassifier] Product grid detected:', productCards.length, 'items');\r\n      return true;\r\n    }\r\n    \r\n    // Check for pagination (indicates listing)\r\n    const paginationExists = document.querySelector(\r\n      '.pagination, [class*=\"pagination\"], ' +\r\n      'nav[aria-label*=\"pagination\"], .page-numbers'\r\n    );\r\n    \r\n    if (paginationExists && productCards.length > 0) {\r\n      console.log('[PageClassifier] Category page with pagination detected');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Product Page Detection\r\n   */\r\n  isProductPage(urlObj, hostname, pathname) {\r\n    // URL pattern matching\r\n    if (this.urlPatterns.product.some(pattern => pattern.test(pathname))) {\r\n      console.log('[PageClassifier] Product URL pattern matched');\r\n      \r\n      // Additional validation: not a category page\r\n      if (!this.isCategoryPage(urlObj, hostname, pathname)) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Check for JSON-LD Product schema\r\n    const jsonLdScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\r\n    for (const script of jsonLdScripts) {\r\n      try {\r\n        const data = JSON.parse(script.textContent);\r\n        if (data['@type'] === 'Product' || \r\n            (Array.isArray(data['@graph']) && \r\n             data['@graph'].some(item => item['@type'] === 'Product'))) {\r\n          console.log('[PageClassifier] Product schema found');\r\n          return true;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    \r\n    // DOM-based product detection\r\n    const priceElement = document.querySelector(\r\n      '[class*=\"price\"], [itemprop=\"price\"], ' +\r\n      '[data-price], .product-price'\r\n    );\r\n    const addToCartBtn = document.querySelector(\r\n      'button[class*=\"add-to-cart\"], button[class*=\"addToCart\"], ' +\r\n      'button[id*=\"add-to-cart\"], [data-testid*=\"add-to-cart\"]'\r\n    );\r\n    \r\n    if (priceElement && addToCartBtn) {\r\n      // Check they're near each other (within 3 parent levels)\r\n      let element = priceElement;\r\n      let levelsUp = 0;\r\n      while (element && levelsUp < 3) {\r\n        element = element.parentElement;\r\n        if (element && element.contains(addToCartBtn)) {\r\n          console.log('[PageClassifier] Price + Add to Cart found together');\r\n          return true;\r\n        }\r\n        levelsUp++;\r\n      }\r\n    }\r\n    \r\n    // Check for product title + price + buy button pattern\r\n    const hasProductTitle = document.querySelector('h1[class*=\"product\"], h1[itemprop=\"name\"]');\r\n    const hasBuyButton = addToCartBtn || document.querySelector('button[class*=\"buy\"]');\r\n    if (hasProductTitle && priceElement && hasBuyButton) {\r\n      console.log('[PageClassifier] Product page elements detected');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Health Article Detection\r\n   */\r\n  isHealthArticle(urlObj, hostname, pathname) {\r\n    // Known health sites\r\n    if (this.knownDomains.health.some(domain => hostname.includes(domain))) {\r\n      // Check if it's an article (not homepage or section)\r\n      if (pathname.length > 10 && !this.isPortal(urlObj, hostname, pathname)) {\r\n        console.log('[PageClassifier] Health site article detected');\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Health-related URL patterns\r\n    const healthPatterns = [\r\n      /\\/health\\//i, /\\/conditions\\//i, /\\/diseases\\//i,\r\n      /\\/treatment\\//i, /\\/symptoms\\//i, /\\/medical\\//i,\r\n      /\\/nutrition\\//i, /\\/wellness\\//i, /\\/fitness\\//i\r\n    ];\r\n    \r\n    if (healthPatterns.some(pattern => pattern.test(pathname)) && \r\n        this.isArticle(urlObj, hostname, pathname)) {\r\n      console.log('[PageClassifier] Health article URL pattern matched');\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * General Article Detection\r\n   */\r\n  isArticle(urlObj, hostname, pathname) {\r\n    // Check for article schema\r\n    const jsonLdScripts = document.querySelectorAll('script[type=\"application/ld+json\"]');\r\n    for (const script of jsonLdScripts) {\r\n      try {\r\n        const data = JSON.parse(script.textContent);\r\n        if (['Article', 'NewsArticle', 'BlogPosting', 'MedicalWebPage'].includes(data['@type'])) {\r\n          console.log('[PageClassifier] Article schema found');\r\n          return true;\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    \r\n    // Check for article elements\r\n    const articleElement = document.querySelector('article, [role=\"article\"]');\r\n    const hasHeadline = document.querySelector('h1');\r\n    const hasAuthor = document.querySelector('[class*=\"author\"], [rel=\"author\"], .byline');\r\n    const hasDate = document.querySelector('time, [class*=\"publish\"], [class*=\"date\"]');\r\n    \r\n    if (articleElement && hasHeadline && (hasAuthor || hasDate)) {\r\n      console.log('[PageClassifier] Article structure detected');\r\n      return true;\r\n    }\r\n    \r\n    // URL patterns for articles\r\n    if (this.urlPatterns.article.some(pattern => pattern.test(pathname))) {\r\n      // Additional check: has substantial content\r\n      const mainContent = document.querySelector('main, article, .content');\r\n      if (mainContent && mainContent.textContent.length > 500) {\r\n        console.log('[PageClassifier] Article URL pattern with content');\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}\r\n\r\n// Export for use in chipManager\r\nexport default PageClassifier;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(611);\n__webpack_require__(737);\n__webpack_require__(317);\n__webpack_require__(431);\n__webpack_require__(354);\n__webpack_require__(423);\n__webpack_require__(264);\nvar __webpack_exports__ = __webpack_require__(295);\n",""],"names":[],"sourceRoot":""}