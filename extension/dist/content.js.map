{"version":3,"file":"content.js","mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://safesignal-extension/./src/content/content.js"],"sourcesContent":["// SafeSignal Content Script - Phase 1.2: Shadow DOM Badge\r\n// Replace the content in extension/src/content/content.js\r\nconsole.log('SafeSignal: Content script Phase 1.2 loaded on', window.location.hostname);\r\n\r\nclass SafeSignalBadge {\r\n    constructor() {\r\n        this.shadowRoot = null;\r\n        this.badgeContainer = null;\r\n        this.currentState = 'checking'; // checking, ok, warning, danger\r\n        this.isVisible = true;\r\n        this.position = 'bottom-right'; // Will be loaded from storage later\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        // Don't inject on chrome:// pages or extension pages\r\n        if (this.shouldSkipInjection()) {\r\n            return;\r\n        }\r\n\r\n        this.createShadowDOMBadge();\r\n        this.attachEventListeners();\r\n        \r\n        // Simulate different states for testing (Phase 1.2 dummy data)\r\n        this.simulateStates();\r\n        \r\n        console.log('SafeSignal: Phase 1.2 Shadow DOM badge injected');\r\n    }\r\n\r\n    shouldSkipInjection() {\r\n        const protocol = window.location.protocol;\r\n        return protocol === 'chrome:' || \r\n               protocol === 'chrome-extension:' ||\r\n               protocol === 'moz-extension:' ||\r\n               protocol === 'about:';\r\n    }\r\n\r\n    createShadowDOMBadge() {\r\n        // Create container element\r\n        this.badgeContainer = document.createElement('div');\r\n        this.badgeContainer.id = 'safesignal-badge-container';\r\n        \r\n        // Create Shadow DOM to isolate our styles\r\n        this.shadowRoot = this.badgeContainer.attachShadow({ mode: 'closed' });\r\n        \r\n        // Create badge structure\r\n        this.shadowRoot.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    all: initial;\r\n                    /* Ensure we don't inherit any page styles */\r\n                }\r\n                \r\n                .badge {\r\n                    position: fixed;\r\n                    width: 3rem; /* 48px at default zoom, scales with rem */\r\n                    height: 3rem;\r\n                    border-radius: 50%;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\r\n                    font-size: 1.25rem; /* 20px, scales with zoom */\r\n                    font-weight: 600;\r\n                    cursor: pointer;\r\n                    user-select: none;\r\n                    z-index: 2147483647; /* Maximum safe z-index */\r\n                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15), 0 1px 3px rgba(0, 0, 0, 0.1);\r\n                    transition: all 0.2s ease;\r\n                    transform: scale(1);\r\n                    backdrop-filter: blur(8px);\r\n                }\r\n                \r\n                .badge:hover {\r\n                    transform: scale(1.05);\r\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2), 0 2px 6px rgba(0, 0, 0, 0.15);\r\n                }\r\n                \r\n                .badge:active {\r\n                    transform: scale(0.95);\r\n                }\r\n                \r\n                /* State-specific styles */\r\n                .badge.checking {\r\n                    background: linear-gradient(135deg, #6b7280 0%, #9ca3af 100%);\r\n                    color: white;\r\n                    animation: pulse 2s infinite;\r\n                }\r\n                \r\n                .badge.ok {\r\n                    background: linear-gradient(135deg, #10b981 0%, #34d399 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.warning {\r\n                    background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                .badge.danger {\r\n                    background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\r\n                    color: white;\r\n                }\r\n                \r\n                /* Position classes */\r\n                .position-bottom-right {\r\n                    bottom: 1.25rem; /* 20px */\r\n                    right: 1.25rem;\r\n                }\r\n                \r\n                .position-bottom-left {\r\n                    bottom: 1.25rem;\r\n                    left: 1.25rem;\r\n                }\r\n                \r\n                .position-top-right {\r\n                    top: 1.25rem;\r\n                    right: 1.25rem;\r\n                }\r\n                \r\n                .position-top-left {\r\n                    top: 1.25rem;\r\n                    left: 1.25rem;\r\n                }\r\n                \r\n                .position-mid-right {\r\n                    top: 50%;\r\n                    right: 1.25rem;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-mid-left {\r\n                    top: 50%;\r\n                    left: 1.25rem;\r\n                    transform: translateY(-50%);\r\n                }\r\n                \r\n                .position-mid-right:hover,\r\n                .position-mid-left:hover {\r\n                    transform: translateY(-50%) scale(1.05);\r\n                }\r\n                \r\n                .position-mid-right:active,\r\n                .position-mid-left:active {\r\n                    transform: translateY(-50%) scale(0.95);\r\n                }\r\n                \r\n                /* Animations */\r\n                @keyframes pulse {\r\n                    0%, 100% { opacity: 1; }\r\n                    50% { opacity: 0.7; }\r\n                }\r\n                \r\n                /* Collision avoidance nudge */\r\n                .nudged {\r\n                    transform: translate(-16px, -16px);\r\n                }\r\n                \r\n                .position-mid-right.nudged,\r\n                .position-mid-left.nudged {\r\n                    transform: translateY(-50%) translate(-16px, -16px);\r\n                }\r\n                \r\n                /* Accessibility */\r\n                .badge:focus {\r\n                    outline: 2px solid #3b82f6;\r\n                    outline-offset: 2px;\r\n                }\r\n                \r\n                /* Hidden state */\r\n                .badge.hidden {\r\n                    display: none;\r\n                }\r\n            </style>\r\n            \r\n            <div class=\"badge checking position-bottom-right\" \r\n                 role=\"button\" \r\n                 tabindex=\"0\"\r\n                 aria-label=\"SafeSignal security indicator\"\r\n                 title=\"SafeSignal - Checking page safety\">\r\n                <span class=\"badge-icon\">S</span>\r\n            </div>\r\n        `;\r\n        \r\n        // Insert into page\r\n        document.body.appendChild(this.badgeContainer);\r\n        \r\n        // Apply collision detection\r\n        this.handleCollisionDetection();\r\n    }\r\n\r\n    attachEventListeners() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        // Click handler\r\n        badge.addEventListener('click', (e) => {\r\n            e.stopPropagation();\r\n            this.handleBadgeClick();\r\n        });\r\n        \r\n        // Keyboard handler\r\n        badge.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.handleBadgeClick();\r\n            }\r\n        });\r\n        \r\n        // Handle window resize for collision detection\r\n        window.addEventListener('resize', () => {\r\n            this.handleCollisionDetection();\r\n        });\r\n    }\r\n\r\n    handleBadgeClick() {\r\n        // For Phase 1.2, just show current state info\r\n        const stateMessages = {\r\n            checking: 'SafeSignal is checking this page...',\r\n            ok: 'SafeSignal: This page appears safe ✅\\n\\nPhase 1.2 - Shadow DOM implementation working!',\r\n            warning: 'SafeSignal: Exercise caution on this page ⚠️\\n\\nPhase 1.2 - Warning state demo',\r\n            danger: 'SafeSignal: This page shows risk signals ❌\\n\\nPhase 1.2 - Danger state demo'\r\n        };\r\n        \r\n        alert(stateMessages[this.currentState] || 'SafeSignal badge clicked');\r\n        \r\n        // Log for development\r\n        console.log('SafeSignal: Badge clicked, current state:', this.currentState);\r\n    }\r\n\r\n    setState(newState, options = {}) {\r\n        if (!['checking', 'ok', 'warning', 'danger'].includes(newState)) {\r\n            console.warn('SafeSignal: Invalid state:', newState);\r\n            return;\r\n        }\r\n\r\n        this.currentState = newState;\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const icon = this.shadowRoot.querySelector('.badge-icon');\r\n        \r\n        // Remove all state classes\r\n        badge.classList.remove('checking', 'ok', 'warning', 'danger');\r\n        badge.classList.add(newState);\r\n        \r\n        // Update icon and aria-label\r\n        const stateConfig = {\r\n            checking: { icon: 'S', label: 'SafeSignal - Checking page safety', title: 'SafeSignal - Checking page safety' },\r\n            ok: { icon: '✓', label: 'SafeSignal - Page appears safe', title: 'SafeSignal - Page appears safe' },\r\n            warning: { icon: '⚠', label: 'SafeSignal - Exercise caution', title: 'SafeSignal - Exercise caution' },\r\n            danger: { icon: '⚠', label: 'SafeSignal - Risk signals detected', title: 'SafeSignal - Risk signals detected' }\r\n        };\r\n        \r\n        const config = stateConfig[newState];\r\n        icon.textContent = config.icon;\r\n        badge.setAttribute('aria-label', config.label);\r\n        badge.setAttribute('title', config.title);\r\n        \r\n        console.log('SafeSignal: State changed to:', newState);\r\n    }\r\n\r\n    setPosition(position) {\r\n        const validPositions = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'mid-right', 'mid-left'];\r\n        \r\n        if (!validPositions.includes(position)) {\r\n            console.warn('SafeSignal: Invalid position:', position);\r\n            return;\r\n        }\r\n        \r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        \r\n        // Remove all position classes\r\n        validPositions.forEach(pos => {\r\n            badge.classList.remove(`position-${pos}`);\r\n        });\r\n        \r\n        // Add new position class\r\n        badge.classList.add(`position-${position}`);\r\n        this.position = position;\r\n        \r\n        // Recheck collision detection\r\n        this.handleCollisionDetection();\r\n        \r\n        console.log('SafeSignal: Position changed to:', position);\r\n    }\r\n\r\n    hide() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.add('hidden');\r\n        this.isVisible = false;\r\n    }\r\n\r\n    show() {\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        badge.classList.remove('hidden');\r\n        this.isVisible = true;\r\n    }\r\n\r\n    handleCollisionDetection() {\r\n        // Basic collision detection - check for overlapping elements\r\n        // This is a simplified version - Phase 1.3 will enhance this\r\n        const badge = this.shadowRoot.querySelector('.badge');\r\n        const rect = badge.getBoundingClientRect();\r\n        \r\n        // Get elements at badge position (excluding our own badge)\r\n        const elementsAtPosition = document.elementsFromPoint(\r\n            rect.left + rect.width / 2, \r\n            rect.top + rect.height / 2\r\n        ).filter(el => el !== this.badgeContainer);\r\n        \r\n        // Simple heuristic: if there are other visible elements at our position, nudge\r\n        const hasCollision = elementsAtPosition.some(el => {\r\n            const style = window.getComputedStyle(el);\r\n            return style.position === 'fixed' && \r\n                   style.zIndex !== 'auto' && \r\n                   parseInt(style.zIndex) > 1000;\r\n        });\r\n        \r\n        if (hasCollision) {\r\n            badge.classList.add('nudged');\r\n            console.log('SafeSignal: Collision detected, badge nudged');\r\n        } else {\r\n            badge.classList.remove('nudged');\r\n        }\r\n    }\r\n\r\n    // Phase 1.2 Demo: Simulate different states for testing\r\n    simulateStates() {\r\n        // Start in checking state\r\n        setTimeout(() => {\r\n            // Simulate different outcomes based on domain for demo\r\n            const hostname = window.location.hostname.toLowerCase();\r\n            \r\n            if (hostname.includes('google') || hostname.includes('wikipedia') || hostname.includes('github')) {\r\n                this.setState('ok');\r\n            } else if (hostname.includes('test') || hostname.includes('example')) {\r\n                this.setState('warning');\r\n            } else if (hostname.includes('malware') || hostname.includes('phishing')) {\r\n                this.setState('danger');\r\n            } else {\r\n                // Random state for demo\r\n                const states = ['ok', 'warning', 'danger'];\r\n                const randomState = states[Math.floor(Math.random() * states.length)];\r\n                this.setState(randomState);\r\n            }\r\n        }, 2000); // 2 second delay to show checking state\r\n    }\r\n\r\n    destroy() {\r\n        if (this.badgeContainer && this.badgeContainer.parentNode) {\r\n            this.badgeContainer.parentNode.removeChild(this.badgeContainer);\r\n        }\r\n        console.log('SafeSignal: Badge destroyed');\r\n    }\r\n}\r\n\r\n// Initialize badge when DOM is ready\r\nlet safesignalBadge = null;\r\n\r\nfunction initializeBadge() {\r\n    // Clean up any existing badge\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n    \r\n    // Create new badge\r\n    safesignalBadge = new SafeSignalBadge();\r\n}\r\n\r\n// Wait for DOM to be ready\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeBadge);\r\n} else {\r\n    initializeBadge();\r\n}\r\n\r\n// Clean up on page unload\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (safesignalBadge) {\r\n        safesignalBadge.destroy();\r\n    }\r\n});\r\n\r\n// Export for potential Phase 1.3 usage\r\nif (typeof window !== 'undefined') {\r\n    window.SafeSignalBadge = SafeSignalBadge;\r\n}"],"names":[],"sourceRoot":""}